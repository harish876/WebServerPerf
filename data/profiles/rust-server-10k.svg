<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1350" onload="init(evt)" viewBox="0 0 1200 1350" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1350" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1333.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1333.00"> </text><svg id="frames" x="10" width="1180"><g><title>inline &lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref [http_server_rust] (4 samples, 0.14%)</title><rect x="0.8760%" y="949" width="0.1402%" height="15" fill="rgb(227,0,7)"/><text x="1.1260%" y="959.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::as_slice [http_server_rust] (4 samples, 0.14%)</title><rect x="0.8760%" y="933" width="0.1402%" height="15" fill="rgb(217,0,24)"/><text x="1.1260%" y="943.50"></text></g><g><title>inline core::slice::raw::from_raw_parts [http_server_rust] (4 samples, 0.14%)</title><rect x="0.8760%" y="917" width="0.1402%" height="15" fill="rgb(221,193,54)"/><text x="1.1260%" y="927.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check [http_server_rust] (4 samples, 0.14%)</title><rect x="0.8760%" y="901" width="0.1402%" height="15" fill="rgb(248,212,6)"/><text x="1.1260%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index [http_server_rust] (9 samples, 0.32%)</title><rect x="0.8409%" y="965" width="0.3153%" height="15" fill="rgb(208,68,35)"/><text x="1.0909%" y="975.50"></text></g><g><title>inline core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index [http_server_rust] (4 samples, 0.14%)</title><rect x="1.0161%" y="949" width="0.1402%" height="15" fill="rgb(232,128,0)"/><text x="1.2661%" y="959.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index [http_server_rust] (4 samples, 0.14%)</title><rect x="1.0161%" y="933" width="0.1402%" height="15" fill="rgb(207,160,47)"/><text x="1.2661%" y="943.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (8 samples, 0.28%)</title><rect x="1.3315%" y="917" width="0.2803%" height="15" fill="rgb(228,23,34)"/><text x="1.5815%" y="927.50"></text></g><g><title>__close [libpthread-2.31.so] (13 samples, 0.46%)</title><rect x="1.2263%" y="965" width="0.4555%" height="15" fill="rgb(218,30,26)"/><text x="1.4763%" y="975.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (10 samples, 0.35%)</title><rect x="1.3315%" y="949" width="0.3504%" height="15" fill="rgb(220,122,19)"/><text x="1.5815%" y="959.50"></text></g><g><title>do_syscall_64 [linux] (10 samples, 0.35%)</title><rect x="1.3315%" y="933" width="0.3504%" height="15" fill="rgb(250,228,42)"/><text x="1.5815%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr [http_server_rust] (3 samples, 0.11%)</title><rect x="1.6819%" y="965" width="0.1051%" height="15" fill="rgb(240,193,28)"/><text x="1.9319%" y="975.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked [http_server_rust] (5 samples, 0.18%)</title><rect x="1.9271%" y="933" width="0.1752%" height="15" fill="rgb(216,20,37)"/><text x="2.1771%" y="943.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next [http_server_rust] (9 samples, 0.32%)</title><rect x="1.8220%" y="949" width="0.3153%" height="15" fill="rgb(206,188,39)"/><text x="2.0720%" y="959.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next [http_server_rust] (10 samples, 0.35%)</title><rect x="1.8220%" y="965" width="0.3504%" height="15" fill="rgb(217,207,13)"/><text x="2.0720%" y="975.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="2.6629%" y="805" width="0.1402%" height="15" fill="rgb(231,73,38)"/><text x="2.9129%" y="815.50"></text></g><g><title>dnotify_flush [linux] (4 samples, 0.14%)</title><rect x="2.8732%" y="757" width="0.1402%" height="15" fill="rgb(225,20,46)"/><text x="3.1232%" y="767.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="2.8732%" y="741" width="0.1402%" height="15" fill="rgb(210,31,41)"/><text x="3.1232%" y="751.50"></text></g><g><title>filp_close [linux] (9 samples, 0.32%)</title><rect x="2.8381%" y="773" width="0.3153%" height="15" fill="rgb(221,200,47)"/><text x="3.0881%" y="783.50"></text></g><g><title>locks_remove_posix [linux] (4 samples, 0.14%)</title><rect x="3.0133%" y="757" width="0.1402%" height="15" fill="rgb(226,26,5)"/><text x="3.2633%" y="767.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="3.0133%" y="741" width="0.1402%" height="15" fill="rgb(249,33,26)"/><text x="3.2633%" y="751.50"></text></g><g><title>__close_fd [linux] (10 samples, 0.35%)</title><rect x="2.8381%" y="789" width="0.3504%" height="15" fill="rgb(235,183,28)"/><text x="3.0881%" y="799.50"></text></g><g><title>__x64_sys_close [linux] (12 samples, 0.42%)</title><rect x="2.8031%" y="805" width="0.4205%" height="15" fill="rgb(221,5,38)"/><text x="3.0531%" y="815.50"></text></g><g><title>____fput [linux] (4 samples, 0.14%)</title><rect x="3.3287%" y="789" width="0.1402%" height="15" fill="rgb(247,18,42)"/><text x="3.5787%" y="799.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="3.3287%" y="773" width="0.1402%" height="15" fill="rgb(241,131,45)"/><text x="3.5787%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="3.6090%" y="741" width="0.1402%" height="15" fill="rgb(249,31,29)"/><text x="3.8590%" y="751.50"></text></g><g><title>__fsnotify_parent [linux] (3 samples, 0.11%)</title><rect x="3.7491%" y="741" width="0.1051%" height="15" fill="rgb(225,111,53)"/><text x="3.9991%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="3.7491%" y="725" width="0.1051%" height="15" fill="rgb(238,160,17)"/><text x="3.9991%" y="735.50"></text></g><g><title>apparmor_file_free_security [linux] (7 samples, 0.25%)</title><rect x="3.9594%" y="741" width="0.2453%" height="15" fill="rgb(214,148,48)"/><text x="4.2094%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="3.9594%" y="725" width="0.2453%" height="15" fill="rgb(232,36,49)"/><text x="4.2094%" y="735.50"></text></g><g><title>call_rcu [linux] (5 samples, 0.18%)</title><rect x="4.2046%" y="741" width="0.1752%" height="15" fill="rgb(209,103,24)"/><text x="4.4546%" y="751.50"></text></g><g><title>__call_rcu [linux] (5 samples, 0.18%)</title><rect x="4.2046%" y="725" width="0.1752%" height="15" fill="rgb(229,88,8)"/><text x="4.4546%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="4.2046%" y="709" width="0.1752%" height="15" fill="rgb(213,181,19)"/><text x="4.4546%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="4.5200%" y="677" width="0.1402%" height="15" fill="rgb(254,191,54)"/><text x="4.7700%" y="687.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="4.6601%" y="661" width="0.1051%" height="15" fill="rgb(241,83,37)"/><text x="4.9101%" y="671.50"></text></g><g><title>dentry_free [linux] (8 samples, 0.28%)</title><rect x="4.5200%" y="709" width="0.2803%" height="15" fill="rgb(233,36,39)"/><text x="4.7700%" y="719.50"></text></g><g><title>kmem_cache_free [linux] (8 samples, 0.28%)</title><rect x="4.5200%" y="693" width="0.2803%" height="15" fill="rgb(226,3,54)"/><text x="4.7700%" y="703.50"></text></g><g><title>__slab_free [linux] (4 samples, 0.14%)</title><rect x="4.6601%" y="677" width="0.1402%" height="15" fill="rgb(245,192,40)"/><text x="4.9101%" y="687.50"></text></g><g><title>__destroy_inode [linux] (6 samples, 0.21%)</title><rect x="4.9404%" y="645" width="0.2102%" height="15" fill="rgb(238,167,29)"/><text x="5.1904%" y="655.50"></text></g><g><title>call_rcu [linux] (5 samples, 0.18%)</title><rect x="5.1507%" y="645" width="0.1752%" height="15" fill="rgb(232,182,51)"/><text x="5.4007%" y="655.50"></text></g><g><title>__call_rcu [linux] (5 samples, 0.18%)</title><rect x="5.1507%" y="629" width="0.1752%" height="15" fill="rgb(231,60,39)"/><text x="5.4007%" y="639.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="5.1507%" y="613" width="0.1752%" height="15" fill="rgb(208,69,12)"/><text x="5.4007%" y="623.50"></text></g><g><title>destroy_inode [linux] (14 samples, 0.49%)</title><rect x="4.9054%" y="661" width="0.4905%" height="15" fill="rgb(235,93,37)"/><text x="5.1554%" y="671.50"></text></g><g><title>truncate_inode_pages_final [linux] (3 samples, 0.11%)</title><rect x="5.3959%" y="661" width="0.1051%" height="15" fill="rgb(213,116,39)"/><text x="5.6459%" y="671.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="5.3959%" y="645" width="0.1051%" height="15" fill="rgb(222,207,29)"/><text x="5.6459%" y="655.50"></text></g><g><title>__dentry_kill [linux] (33 samples, 1.16%)</title><rect x="4.4499%" y="725" width="1.1563%" height="15" fill="rgb(206,96,30)"/><text x="4.6999%" y="735.50"></text></g><g><title>dentry_unlink_inode [linux] (23 samples, 0.81%)</title><rect x="4.8003%" y="709" width="0.8059%" height="15" fill="rgb(218,138,4)"/><text x="5.0503%" y="719.50"></text></g><g><title>iput [linux] (23 samples, 0.81%)</title><rect x="4.8003%" y="693" width="0.8059%" height="15" fill="rgb(250,191,14)"/><text x="5.0503%" y="703.50"></text></g><g><title>evict [linux] (21 samples, 0.74%)</title><rect x="4.8704%" y="677" width="0.7358%" height="15" fill="rgb(239,60,40)"/><text x="5.1204%" y="687.50"></text></g><g><title>wake_up_bit [linux] (3 samples, 0.11%)</title><rect x="5.5011%" y="661" width="0.1051%" height="15" fill="rgb(206,27,48)"/><text x="5.7511%" y="671.50"></text></g><g><title>__wake_up_bit [linux] (3 samples, 0.11%)</title><rect x="5.5011%" y="645" width="0.1051%" height="15" fill="rgb(225,35,8)"/><text x="5.7511%" y="655.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="5.5011%" y="629" width="0.1051%" height="15" fill="rgb(250,213,24)"/><text x="5.7511%" y="639.50"></text></g><g><title>_cond_resched [linux] (27 samples, 0.95%)</title><rect x="5.6062%" y="725" width="0.9460%" height="15" fill="rgb(247,123,22)"/><text x="5.8562%" y="735.50"></text></g><g><title>preempt_schedule_common [linux] (27 samples, 0.95%)</title><rect x="5.6062%" y="709" width="0.9460%" height="15" fill="rgb(231,138,38)"/><text x="5.8562%" y="719.50"></text></g><g><title>__sched_text_start [linux] (27 samples, 0.95%)</title><rect x="5.6062%" y="693" width="0.9460%" height="15" fill="rgb(231,145,46)"/><text x="5.8562%" y="703.50"></text></g><g><title>finish_task_switch [linux] (27 samples, 0.95%)</title><rect x="5.6062%" y="677" width="0.9460%" height="15" fill="rgb(251,118,11)"/><text x="5.8562%" y="687.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (27 samples, 0.95%)</title><rect x="5.6062%" y="661" width="0.9460%" height="15" fill="rgb(217,147,25)"/><text x="5.8562%" y="671.50"></text></g><g><title>dput [linux] (64 samples, 2.24%)</title><rect x="4.3798%" y="741" width="2.2425%" height="15" fill="rgb(247,81,37)"/><text x="4.6298%" y="751.50">d..</text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="6.6573%" y="709" width="0.1402%" height="15" fill="rgb(209,12,38)"/><text x="6.9073%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="6.9376%" y="677" width="0.1402%" height="15" fill="rgb(227,1,9)"/><text x="7.1876%" y="687.50"></text></g><g><title>kmem_cache_free [linux] (6 samples, 0.21%)</title><rect x="6.9376%" y="693" width="0.2102%" height="15" fill="rgb(248,47,43)"/><text x="7.1876%" y="703.50"></text></g><g><title>ep_remove [linux] (15 samples, 0.53%)</title><rect x="6.6573%" y="725" width="0.5256%" height="15" fill="rgb(221,10,30)"/><text x="6.9073%" y="735.50"></text></g><g><title>ep_unregister_pollwait.isra.0 [linux] (9 samples, 0.32%)</title><rect x="6.8676%" y="709" width="0.3153%" height="15" fill="rgb(210,229,1)"/><text x="7.1176%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="7.1829%" y="709" width="0.1051%" height="15" fill="rgb(222,148,37)"/><text x="7.4329%" y="719.50"></text></g><g><title>mutex_lock [linux] (4 samples, 0.14%)</title><rect x="7.1829%" y="725" width="0.1402%" height="15" fill="rgb(234,67,33)"/><text x="7.4329%" y="735.50"></text></g><g><title>rb_erase [linux] (5 samples, 0.18%)</title><rect x="7.3231%" y="725" width="0.1752%" height="15" fill="rgb(247,98,35)"/><text x="7.5731%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="7.3231%" y="709" width="0.1752%" height="15" fill="rgb(247,138,52)"/><text x="7.5731%" y="719.50"></text></g><g><title>eventpoll_release_file [linux] (26 samples, 0.91%)</title><rect x="6.6223%" y="741" width="0.9110%" height="15" fill="rgb(213,79,30)"/><text x="6.8723%" y="751.50"></text></g><g><title>fsnotify [linux] (6 samples, 0.21%)</title><rect x="7.5333%" y="741" width="0.2102%" height="15" fill="rgb(246,177,23)"/><text x="7.7833%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="7.5333%" y="725" width="0.2102%" height="15" fill="rgb(230,62,27)"/><text x="7.7833%" y="735.50"></text></g><g><title>lockref_put_return [linux] (5 samples, 0.18%)</title><rect x="7.7435%" y="741" width="0.1752%" height="15" fill="rgb(216,154,8)"/><text x="7.9935%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="7.7435%" y="725" width="0.1752%" height="15" fill="rgb(244,35,45)"/><text x="7.9935%" y="735.50"></text></g><g><title>mutex_unlock [linux] (3 samples, 0.11%)</title><rect x="7.9537%" y="741" width="0.1051%" height="15" fill="rgb(251,115,12)"/><text x="8.2037%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="7.9537%" y="725" width="0.1051%" height="15" fill="rgb(240,54,50)"/><text x="8.2037%" y="735.50"></text></g><g><title>apparmor_file_free_security [linux] (4 samples, 0.14%)</title><rect x="8.0589%" y="725" width="0.1402%" height="15" fill="rgb(233,84,52)"/><text x="8.3089%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="8.0589%" y="709" width="0.1402%" height="15" fill="rgb(207,117,47)"/><text x="8.3089%" y="719.50"></text></g><g><title>security_file_free [linux] (7 samples, 0.25%)</title><rect x="8.0589%" y="741" width="0.2453%" height="15" fill="rgb(249,43,39)"/><text x="8.3089%" y="751.50"></text></g><g><title>kmem_cache_free [linux] (3 samples, 0.11%)</title><rect x="8.1990%" y="725" width="0.1051%" height="15" fill="rgb(209,38,44)"/><text x="8.4490%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="8.3742%" y="693" width="0.1051%" height="15" fill="rgb(236,212,23)"/><text x="8.6242%" y="703.50"></text></g><g><title>down_write [linux] (4 samples, 0.14%)</title><rect x="8.3742%" y="709" width="0.1402%" height="15" fill="rgb(242,79,21)"/><text x="8.6242%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="8.6195%" y="661" width="0.1402%" height="15" fill="rgb(211,96,35)"/><text x="8.8695%" y="671.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="9.0399%" y="629" width="0.1051%" height="15" fill="rgb(253,215,40)"/><text x="9.2899%" y="639.50"></text></g><g><title>__kmalloc_reserve.isra.0 [linux] (3 samples, 0.11%)</title><rect x="9.1451%" y="629" width="0.1051%" height="15" fill="rgb(211,81,21)"/><text x="9.3951%" y="639.50"></text></g><g><title>__alloc_skb [linux] (9 samples, 0.32%)</title><rect x="9.0399%" y="645" width="0.3153%" height="15" fill="rgb(208,190,38)"/><text x="9.2899%" y="655.50"></text></g><g><title>kmem_cache_alloc_node [linux] (3 samples, 0.11%)</title><rect x="9.2502%" y="629" width="0.1051%" height="15" fill="rgb(235,213,38)"/><text x="9.5002%" y="639.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="9.2502%" y="613" width="0.1051%" height="15" fill="rgb(237,122,38)"/><text x="9.5002%" y="623.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="9.4604%" y="613" width="0.1051%" height="15" fill="rgb(244,218,35)"/><text x="9.7104%" y="623.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="9.9159%" y="485" width="0.2102%" height="15" fill="rgb(240,68,47)"/><text x="10.1659%" y="495.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="10.2663%" y="389" width="0.1752%" height="15" fill="rgb(210,16,53)"/><text x="10.5163%" y="399.50"></text></g><g><title>raw_rcv [linux] (7 samples, 0.25%)</title><rect x="10.6517%" y="261" width="0.2453%" height="15" fill="rgb(235,124,12)"/><text x="10.9017%" y="271.50"></text></g><g><title>raw_rcv_skb [linux] (6 samples, 0.21%)</title><rect x="10.6868%" y="245" width="0.2102%" height="15" fill="rgb(224,169,11)"/><text x="10.9368%" y="255.50"></text></g><g><title>raw_local_deliver [linux] (8 samples, 0.28%)</title><rect x="10.6517%" y="277" width="0.2803%" height="15" fill="rgb(250,166,2)"/><text x="10.9017%" y="287.50"></text></g><g><title>__inet_lookup_established [linux] (4 samples, 0.14%)</title><rect x="11.0371%" y="261" width="0.1402%" height="15" fill="rgb(242,216,29)"/><text x="11.2871%" y="271.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="11.0371%" y="245" width="0.1402%" height="15" fill="rgb(230,116,27)"/><text x="11.2871%" y="255.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="11.3525%" y="165" width="0.1051%" height="15" fill="rgb(228,99,48)"/><text x="11.6025%" y="175.50"></text></g><g><title>__lock_text_start [linux] (4 samples, 0.14%)</title><rect x="11.4576%" y="165" width="0.1402%" height="15" fill="rgb(253,11,6)"/><text x="11.7076%" y="175.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="11.4576%" y="149" width="0.1402%" height="15" fill="rgb(247,143,39)"/><text x="11.7076%" y="159.50"></text></g><g><title>__tcp_ack_snd_check [linux] (10 samples, 0.35%)</title><rect x="11.2824%" y="229" width="0.3504%" height="15" fill="rgb(236,97,10)"/><text x="11.5324%" y="239.50"></text></g><g><title>tcp_send_delayed_ack [linux] (9 samples, 0.32%)</title><rect x="11.3174%" y="213" width="0.3153%" height="15" fill="rgb(233,208,19)"/><text x="11.5674%" y="223.50"></text></g><g><title>sk_reset_timer [linux] (9 samples, 0.32%)</title><rect x="11.3174%" y="197" width="0.3153%" height="15" fill="rgb(216,164,2)"/><text x="11.5674%" y="207.50"></text></g><g><title>mod_timer [linux] (8 samples, 0.28%)</title><rect x="11.3525%" y="181" width="0.2803%" height="15" fill="rgb(220,129,5)"/><text x="11.6025%" y="191.50"></text></g><g><title>sock_def_wakeup [linux] (3 samples, 0.11%)</title><rect x="11.7730%" y="213" width="0.1051%" height="15" fill="rgb(242,17,10)"/><text x="12.0230%" y="223.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="11.7730%" y="197" width="0.1051%" height="15" fill="rgb(242,107,0)"/><text x="12.0230%" y="207.50"></text></g><g><title>tcp_data_ready [linux] (3 samples, 0.11%)</title><rect x="11.8781%" y="213" width="0.1051%" height="15" fill="rgb(251,28,31)"/><text x="12.1281%" y="223.50"></text></g><g><title>sock_def_readable [linux] (3 samples, 0.11%)</title><rect x="11.8781%" y="197" width="0.1051%" height="15" fill="rgb(233,223,10)"/><text x="12.1281%" y="207.50"></text></g><g><title>__wake_up_sync_key [linux] (3 samples, 0.11%)</title><rect x="11.8781%" y="181" width="0.1051%" height="15" fill="rgb(215,21,27)"/><text x="12.1281%" y="191.50"></text></g><g><title>__wake_up_common_lock [linux] (3 samples, 0.11%)</title><rect x="11.8781%" y="165" width="0.1051%" height="15" fill="rgb(232,23,21)"/><text x="12.1281%" y="175.50"></text></g><g><title>__wake_up [linux] (22 samples, 0.77%)</title><rect x="11.9832%" y="181" width="0.7708%" height="15" fill="rgb(244,5,23)"/><text x="12.2332%" y="191.50"></text></g><g><title>__wake_up_common_lock [linux] (22 samples, 0.77%)</title><rect x="11.9832%" y="165" width="0.7708%" height="15" fill="rgb(226,81,46)"/><text x="12.2332%" y="175.50"></text></g><g><title>__lock_text_start [linux] (22 samples, 0.77%)</title><rect x="11.9832%" y="149" width="0.7708%" height="15" fill="rgb(247,70,30)"/><text x="12.2332%" y="159.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (22 samples, 0.77%)</title><rect x="11.9832%" y="133" width="0.7708%" height="15" fill="rgb(212,68,19)"/><text x="12.2332%" y="143.50"></text></g><g><title>sock_def_wakeup [linux] (23 samples, 0.81%)</title><rect x="11.9832%" y="197" width="0.8059%" height="15" fill="rgb(240,187,13)"/><text x="12.2332%" y="207.50"></text></g><g><title>tcp_fin [linux] (24 samples, 0.84%)</title><rect x="11.9832%" y="213" width="0.8409%" height="15" fill="rgb(223,113,26)"/><text x="12.2332%" y="223.50"></text></g><g><title>tcp_data_queue [linux] (35 samples, 1.23%)</title><rect x="11.6678%" y="229" width="1.2263%" height="15" fill="rgb(206,192,2)"/><text x="11.9178%" y="239.50"></text></g><g><title>tcp_rcv_established [linux] (52 samples, 1.82%)</title><rect x="11.2123%" y="245" width="1.8220%" height="15" fill="rgb(241,108,4)"/><text x="11.4623%" y="255.50">t..</text></g><g><title>tcp_mstamp_refresh [linux] (3 samples, 0.11%)</title><rect x="12.9292%" y="229" width="0.1051%" height="15" fill="rgb(247,173,49)"/><text x="13.1792%" y="239.50"></text></g><g><title>tcp_v4_do_rcv [linux] (53 samples, 1.86%)</title><rect x="11.2123%" y="261" width="1.8570%" height="15" fill="rgb(224,114,35)"/><text x="11.4623%" y="271.50">t..</text></g><g><title>__softirqentry_text_start [linux] (83 samples, 2.91%)</title><rect x="10.1962%" y="437" width="2.9082%" height="15" fill="rgb(245,159,27)"/><text x="10.4462%" y="447.50">__..</text></g><g><title>net_rx_action [linux] (81 samples, 2.84%)</title><rect x="10.2663%" y="421" width="2.8381%" height="15" fill="rgb(245,172,44)"/><text x="10.5163%" y="431.50">ne..</text></g><g><title>process_backlog [linux] (81 samples, 2.84%)</title><rect x="10.2663%" y="405" width="2.8381%" height="15" fill="rgb(236,23,11)"/><text x="10.5163%" y="415.50">pr..</text></g><g><title>__netif_receive_skb [linux] (76 samples, 2.66%)</title><rect x="10.4415%" y="389" width="2.6629%" height="15" fill="rgb(205,117,38)"/><text x="10.6915%" y="399.50">__..</text></g><g><title>__netif_receive_skb_one_core [linux] (75 samples, 2.63%)</title><rect x="10.4765%" y="373" width="2.6279%" height="15" fill="rgb(237,72,25)"/><text x="10.7265%" y="383.50">__..</text></g><g><title>ip_rcv [linux] (72 samples, 2.52%)</title><rect x="10.5816%" y="357" width="2.5228%" height="15" fill="rgb(244,70,9)"/><text x="10.8316%" y="367.50">ip..</text></g><g><title>ip_rcv_finish [linux] (72 samples, 2.52%)</title><rect x="10.5816%" y="341" width="2.5228%" height="15" fill="rgb(217,125,39)"/><text x="10.8316%" y="351.50">ip..</text></g><g><title>ip_local_deliver [linux] (72 samples, 2.52%)</title><rect x="10.5816%" y="325" width="2.5228%" height="15" fill="rgb(235,36,10)"/><text x="10.8316%" y="335.50">ip..</text></g><g><title>ip_local_deliver_finish [linux] (72 samples, 2.52%)</title><rect x="10.5816%" y="309" width="2.5228%" height="15" fill="rgb(251,123,47)"/><text x="10.8316%" y="319.50">ip..</text></g><g><title>ip_protocol_deliver_rcu [linux] (72 samples, 2.52%)</title><rect x="10.5816%" y="293" width="2.5228%" height="15" fill="rgb(221,13,13)"/><text x="10.8316%" y="303.50">ip..</text></g><g><title>tcp_v4_rcv [linux] (61 samples, 2.14%)</title><rect x="10.9671%" y="277" width="2.1374%" height="15" fill="rgb(238,131,9)"/><text x="11.2171%" y="287.50">t..</text></g><g><title>__local_bh_enable_ip [linux] (86 samples, 3.01%)</title><rect x="10.1261%" y="485" width="3.0133%" height="15" fill="rgb(211,50,8)"/><text x="10.3761%" y="495.50">__l..</text></g><g><title>do_softirq.part.0 [linux] (86 samples, 3.01%)</title><rect x="10.1261%" y="469" width="3.0133%" height="15" fill="rgb(245,182,24)"/><text x="10.3761%" y="479.50">do_..</text></g><g><title>do_softirq_own_stack [linux] (84 samples, 2.94%)</title><rect x="10.1962%" y="453" width="2.9432%" height="15" fill="rgb(242,14,37)"/><text x="10.4462%" y="463.50">do..</text></g><g><title>dev_hard_start_xmit [linux] (5 samples, 0.18%)</title><rect x="13.1745%" y="453" width="0.1752%" height="15" fill="rgb(246,228,12)"/><text x="13.4245%" y="463.50"></text></g><g><title>loopback_xmit [linux] (4 samples, 0.14%)</title><rect x="13.2095%" y="437" width="0.1402%" height="15" fill="rgb(213,55,15)"/><text x="13.4595%" y="447.50"></text></g><g><title>__dev_queue_xmit [linux] (10 samples, 0.35%)</title><rect x="13.1395%" y="469" width="0.3504%" height="15" fill="rgb(209,9,3)"/><text x="13.3895%" y="479.50"></text></g><g><title>validate_xmit_skb [linux] (3 samples, 0.11%)</title><rect x="13.3847%" y="453" width="0.1051%" height="15" fill="rgb(230,59,30)"/><text x="13.6347%" y="463.50"></text></g><g><title>ip_queue_xmit [linux] (110 samples, 3.85%)</title><rect x="9.6706%" y="597" width="3.8542%" height="15" fill="rgb(209,121,21)"/><text x="9.9206%" y="607.50">ip_q..</text></g><g><title>__ip_queue_xmit [linux] (110 samples, 3.85%)</title><rect x="9.6706%" y="581" width="3.8542%" height="15" fill="rgb(220,109,13)"/><text x="9.9206%" y="591.50">__ip..</text></g><g><title>ip_local_out [linux] (109 samples, 3.82%)</title><rect x="9.7057%" y="565" width="3.8192%" height="15" fill="rgb(232,18,1)"/><text x="9.9557%" y="575.50">ip_l..</text></g><g><title>ip_output [linux] (106 samples, 3.71%)</title><rect x="9.8108%" y="549" width="3.7141%" height="15" fill="rgb(215,41,42)"/><text x="10.0608%" y="559.50">ip_o..</text></g><g><title>ip_finish_output [linux] (105 samples, 3.68%)</title><rect x="9.8458%" y="533" width="3.6790%" height="15" fill="rgb(224,123,36)"/><text x="10.0958%" y="543.50">ip_f..</text></g><g><title>__ip_finish_output [linux] (104 samples, 3.64%)</title><rect x="9.8809%" y="517" width="3.6440%" height="15" fill="rgb(240,125,3)"/><text x="10.1309%" y="527.50">__ip..</text></g><g><title>ip_finish_output2 [linux] (103 samples, 3.61%)</title><rect x="9.9159%" y="501" width="3.6090%" height="15" fill="rgb(205,98,50)"/><text x="10.1659%" y="511.50">ip_f..</text></g><g><title>dev_queue_xmit [linux] (11 samples, 0.39%)</title><rect x="13.1395%" y="485" width="0.3854%" height="15" fill="rgb(205,185,37)"/><text x="13.3895%" y="495.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="13.5249%" y="565" width="0.1051%" height="15" fill="rgb(238,207,15)"/><text x="13.7749%" y="575.50"></text></g><g><title>skb_clone [linux] (4 samples, 0.14%)</title><rect x="13.5249%" y="597" width="0.1402%" height="15" fill="rgb(213,199,42)"/><text x="13.7749%" y="607.50"></text></g><g><title>__skb_clone [linux] (4 samples, 0.14%)</title><rect x="13.5249%" y="581" width="0.1402%" height="15" fill="rgb(235,201,11)"/><text x="13.7749%" y="591.50"></text></g><g><title>__tcp_transmit_skb [linux] (118 samples, 4.13%)</title><rect x="9.6006%" y="613" width="4.1345%" height="15" fill="rgb(207,46,11)"/><text x="9.8506%" y="623.50">__tcp..</text></g><g><title>tcp_event_new_data_sent [linux] (3 samples, 0.11%)</title><rect x="13.9103%" y="613" width="0.1051%" height="15" fill="rgb(241,35,35)"/><text x="14.1603%" y="623.50"></text></g><g><title>tcp_schedule_loss_probe.part.0 [linux] (3 samples, 0.11%)</title><rect x="14.0855%" y="613" width="0.1051%" height="15" fill="rgb(243,32,47)"/><text x="14.3355%" y="623.50"></text></g><g><title>__tcp_push_pending_frames [linux] (138 samples, 4.84%)</title><rect x="9.3903%" y="645" width="4.8353%" height="15" fill="rgb(247,202,23)"/><text x="9.6403%" y="655.50">__tcp_..</text></g><g><title>tcp_write_xmit [linux] (136 samples, 4.77%)</title><rect x="9.4604%" y="629" width="4.7652%" height="15" fill="rgb(219,102,11)"/><text x="9.7104%" y="639.50">tcp_wr..</text></g><g><title>__tcp_close [linux] (163 samples, 5.71%)</title><rect x="8.6195%" y="677" width="5.7113%" height="15" fill="rgb(243,110,44)"/><text x="8.8695%" y="687.50">__tcp_c..</text></g><g><title>tcp_send_fin [linux] (153 samples, 5.36%)</title><rect x="8.9699%" y="661" width="5.3609%" height="15" fill="rgb(222,74,54)"/><text x="9.2199%" y="671.50">tcp_sen..</text></g><g><title>_raw_spin_lock [linux] (4 samples, 0.14%)</title><rect x="14.3308%" y="677" width="0.1402%" height="15" fill="rgb(216,99,12)"/><text x="14.5808%" y="687.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="14.3308%" y="661" width="0.1402%" height="15" fill="rgb(226,22,26)"/><text x="14.5808%" y="671.50"></text></g><g><title>inet_release [linux] (176 samples, 6.17%)</title><rect x="8.5144%" y="709" width="6.1668%" height="15" fill="rgb(217,163,10)"/><text x="8.7644%" y="719.50">inet_rel..</text></g><g><title>tcp_close [linux] (174 samples, 6.10%)</title><rect x="8.5844%" y="693" width="6.0967%" height="15" fill="rgb(213,25,53)"/><text x="8.8344%" y="703.50">tcp_clos..</text></g><g><title>__fput [linux] (318 samples, 11.14%)</title><rect x="3.6090%" y="757" width="11.1423%" height="15" fill="rgb(252,105,26)"/><text x="3.8590%" y="767.50">__fput [linux]</text></g><g><title>sock_close [linux] (184 samples, 6.45%)</title><rect x="8.3041%" y="741" width="6.4471%" height="15" fill="rgb(220,39,43)"/><text x="8.5541%" y="751.50">sock_clo..</text></g><g><title>__sock_release [linux] (184 samples, 6.45%)</title><rect x="8.3041%" y="725" width="6.4471%" height="15" fill="rgb(229,68,48)"/><text x="8.5541%" y="735.50">__sock_r..</text></g><g><title>____fput [linux] (325 samples, 11.39%)</title><rect x="3.6090%" y="773" width="11.3875%" height="15" fill="rgb(252,8,32)"/><text x="3.8590%" y="783.50">____fput [linux]</text></g><g><title>__close [libpthread-2.31.so] (359 samples, 12.58%)</title><rect x="2.4527%" y="853" width="12.5788%" height="15" fill="rgb(223,20,43)"/><text x="2.7027%" y="863.50">__close [libpthread..</text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (355 samples, 12.44%)</title><rect x="2.5929%" y="837" width="12.4387%" height="15" fill="rgb(229,81,49)"/><text x="2.8429%" y="847.50">entry_SYSCALL_64_af..</text></g><g><title>do_syscall_64 [linux] (353 samples, 12.37%)</title><rect x="2.6629%" y="821" width="12.3686%" height="15" fill="rgb(236,28,36)"/><text x="2.9129%" y="831.50">do_syscall_64 [lin..</text></g><g><title>exit_to_usermode_loop [linux] (336 samples, 11.77%)</title><rect x="3.2586%" y="805" width="11.7730%" height="15" fill="rgb(249,185,26)"/><text x="3.5086%" y="815.50">exit_to_usermode_..</text></g><g><title>task_work_run [linux] (326 samples, 11.42%)</title><rect x="3.6090%" y="789" width="11.4226%" height="15" fill="rgb(249,174,33)"/><text x="3.8590%" y="799.50">task_work_run [li..</text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="15.2768%" y="757" width="0.1402%" height="15" fill="rgb(233,201,37)"/><text x="15.5268%" y="767.50"></text></g><g><title>__fdget_raw [linux] (3 samples, 0.11%)</title><rect x="15.4870%" y="741" width="0.1051%" height="15" fill="rgb(221,78,26)"/><text x="15.7370%" y="751.50"></text></g><g><title>__fget_light [linux] (3 samples, 0.11%)</title><rect x="15.4870%" y="725" width="0.1051%" height="15" fill="rgb(250,127,30)"/><text x="15.7370%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="15.4870%" y="709" width="0.1051%" height="15" fill="rgb(230,49,44)"/><text x="15.7370%" y="719.50"></text></g><g><title>__x64_sys_fcntl [linux] (10 samples, 0.35%)</title><rect x="15.4520%" y="757" width="0.3504%" height="15" fill="rgb(229,67,23)"/><text x="15.7020%" y="767.50"></text></g><g><title>do_fcntl [linux] (5 samples, 0.18%)</title><rect x="15.6272%" y="741" width="0.1752%" height="15" fill="rgb(249,83,47)"/><text x="15.8772%" y="751.50"></text></g><g><title>get_close_on_exec [linux] (4 samples, 0.14%)</title><rect x="15.6622%" y="725" width="0.1402%" height="15" fill="rgb(215,43,3)"/><text x="15.9122%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="15.6622%" y="709" width="0.1402%" height="15" fill="rgb(238,154,13)"/><text x="15.9122%" y="719.50"></text></g><g><title>0x00007FF9617BA664 [libc-2.31.so] (18 samples, 0.63%)</title><rect x="15.2067%" y="805" width="0.6307%" height="15" fill="rgb(219,56,2)"/><text x="15.4567%" y="815.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (17 samples, 0.60%)</title><rect x="15.2418%" y="789" width="0.5957%" height="15" fill="rgb(233,0,4)"/><text x="15.4918%" y="799.50"></text></g><g><title>do_syscall_64 [linux] (16 samples, 0.56%)</title><rect x="15.2768%" y="773" width="0.5606%" height="15" fill="rgb(235,30,7)"/><text x="15.5268%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::net::tcp::TcpStream&gt;&gt; [http_server_rust] (391 samples, 13.70%)</title><rect x="2.1724%" y="965" width="13.7001%" height="15" fill="rgb(250,79,13)"/><text x="2.4224%" y="975.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;std::net::tcp::TcpStream&gt; [http_server_rust] (389 samples, 13.63%)</title><rect x="2.2425%" y="949" width="13.6300%" height="15" fill="rgb(211,146,34)"/><text x="2.4925%" y="959.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::net::TcpStream&gt; [http_server_rust] (388 samples, 13.59%)</title><rect x="2.2775%" y="933" width="13.5950%" height="15" fill="rgb(228,22,38)"/><text x="2.5275%" y="943.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::net::Socket&gt; [http_server_rust] (388 samples, 13.59%)</title><rect x="2.2775%" y="917" width="13.5950%" height="15" fill="rgb(235,168,5)"/><text x="2.5275%" y="927.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; [http_server_rust] (386 samples, 13.52%)</title><rect x="2.3476%" y="901" width="13.5249%" height="15" fill="rgb(221,155,16)"/><text x="2.5976%" y="911.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; [http_server_rust] (386 samples, 13.52%)</title><rect x="2.3476%" y="885" width="13.5249%" height="15" fill="rgb(215,215,53)"/><text x="2.5976%" y="895.50">core::ptr::drop_in_p..</text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop [http_server_rust] (385 samples, 13.49%)</title><rect x="2.3826%" y="869" width="13.4898%" height="15" fill="rgb(223,4,10)"/><text x="2.6326%" y="879.50">&lt;std::os::fd::owned:..</text></g><g><title>std::sys::pal::unix::fs::debug_assert_fd_is_open [http_server_rust] (24 samples, 0.84%)</title><rect x="15.0315%" y="853" width="0.8409%" height="15" fill="rgb(234,103,6)"/><text x="15.2815%" y="863.50"></text></g><g><title>__fcntl [libpthread-2.31.so] (24 samples, 0.84%)</title><rect x="15.0315%" y="837" width="0.8409%" height="15" fill="rgb(227,97,0)"/><text x="15.2815%" y="847.50"></text></g><g><title>__libc_fcntl64 [libc-2.31.so] (23 samples, 0.81%)</title><rect x="15.0666%" y="821" width="0.8059%" height="15" fill="rgb(234,150,53)"/><text x="15.3166%" y="831.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="16.0126%" y="917" width="0.2102%" height="15" fill="rgb(228,201,54)"/><text x="16.2626%" y="927.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (14 samples, 0.49%)</title><rect x="16.2228%" y="901" width="0.4905%" height="15" fill="rgb(222,22,37)"/><text x="16.4728%" y="911.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="16.8535%" y="885" width="0.1402%" height="15" fill="rgb(237,53,32)"/><text x="17.1035%" y="895.50"></text></g><g><title>ep_item_poll.isra.0 [linux] (9 samples, 0.32%)</title><rect x="16.9937%" y="885" width="0.3153%" height="15" fill="rgb(233,25,53)"/><text x="17.2437%" y="895.50"></text></g><g><title>sock_poll [linux] (8 samples, 0.28%)</title><rect x="17.0287%" y="869" width="0.2803%" height="15" fill="rgb(210,40,34)"/><text x="17.2787%" y="879.50"></text></g><g><title>tcp_poll [linux] (6 samples, 0.21%)</title><rect x="17.0988%" y="853" width="0.2102%" height="15" fill="rgb(241,220,44)"/><text x="17.3488%" y="863.50"></text></g><g><title>ep_ptable_queue_proc [linux] (4 samples, 0.14%)</title><rect x="17.1689%" y="837" width="0.1402%" height="15" fill="rgb(235,28,35)"/><text x="17.4189%" y="847.50"></text></g><g><title>ep_insert [linux] (18 samples, 0.63%)</title><rect x="16.8535%" y="901" width="0.6307%" height="15" fill="rgb(210,56,17)"/><text x="17.1035%" y="911.50"></text></g><g><title>kmem_cache_alloc [linux] (5 samples, 0.18%)</title><rect x="17.3090%" y="885" width="0.1752%" height="15" fill="rgb(224,130,29)"/><text x="17.5590%" y="895.50"></text></g><g><title>__x64_sys_epoll_ctl [linux] (42 samples, 1.47%)</title><rect x="16.2228%" y="917" width="1.4716%" height="15" fill="rgb(235,212,8)"/><text x="16.4728%" y="927.50"></text></g><g><title>rb_insert_color [linux] (4 samples, 0.14%)</title><rect x="17.5543%" y="901" width="0.1402%" height="15" fill="rgb(223,33,50)"/><text x="17.8043%" y="911.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="17.5543%" y="885" width="0.1402%" height="15" fill="rgb(219,149,13)"/><text x="17.8043%" y="895.50"></text></g><g><title>epoll_ctl [libc-2.31.so] (54 samples, 1.89%)</title><rect x="15.8725%" y="965" width="1.8921%" height="15" fill="rgb(250,156,29)"/><text x="16.1225%" y="975.50">e..</text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (50 samples, 1.75%)</title><rect x="16.0126%" y="949" width="1.7519%" height="15" fill="rgb(216,193,19)"/><text x="16.2626%" y="959.50"></text></g><g><title>do_syscall_64 [linux] (50 samples, 1.75%)</title><rect x="16.0126%" y="933" width="1.7519%" height="15" fill="rgb(216,135,14)"/><text x="16.2626%" y="943.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (16 samples, 0.56%)</title><rect x="18.4653%" y="917" width="0.5606%" height="15" fill="rgb(241,47,5)"/><text x="18.7153%" y="927.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="19.0960%" y="869" width="0.2453%" height="15" fill="rgb(233,42,35)"/><text x="19.3460%" y="879.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="19.3763%" y="853" width="0.1051%" height="15" fill="rgb(231,13,6)"/><text x="19.6263%" y="863.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (13 samples, 0.46%)</title><rect x="19.5515%" y="837" width="0.4555%" height="15" fill="rgb(207,181,40)"/><text x="19.8015%" y="847.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (10 samples, 0.35%)</title><rect x="20.0070%" y="821" width="0.3504%" height="15" fill="rgb(254,173,49)"/><text x="20.2570%" y="831.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (9 samples, 0.32%)</title><rect x="20.3574%" y="805" width="0.3153%" height="15" fill="rgb(221,1,38)"/><text x="20.6074%" y="815.50"></text></g><g><title>tcp_poll [linux] (5 samples, 0.18%)</title><rect x="20.6727%" y="805" width="0.1752%" height="15" fill="rgb(206,124,46)"/><text x="20.9227%" y="815.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="20.6727%" y="789" width="0.1752%" height="15" fill="rgb(249,21,11)"/><text x="20.9227%" y="799.50"></text></g><g><title>ep_send_events_proc [linux] (38 samples, 1.33%)</title><rect x="19.5515%" y="853" width="1.3315%" height="15" fill="rgb(222,201,40)"/><text x="19.8015%" y="863.50"></text></g><g><title>ep_item_poll.isra.0 [linux] (25 samples, 0.88%)</title><rect x="20.0070%" y="837" width="0.8760%" height="15" fill="rgb(235,61,29)"/><text x="20.2570%" y="847.50"></text></g><g><title>sock_poll [linux] (15 samples, 0.53%)</title><rect x="20.3574%" y="821" width="0.5256%" height="15" fill="rgb(219,207,3)"/><text x="20.6074%" y="831.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="20.8830%" y="837" width="0.1402%" height="15" fill="rgb(222,56,46)"/><text x="21.1330%" y="847.50"></text></g><g><title>ep_scan_ready_list.constprop.0 [linux] (50 samples, 1.75%)</title><rect x="19.3763%" y="869" width="1.7519%" height="15" fill="rgb(239,76,54)"/><text x="19.6263%" y="879.50"></text></g><g><title>mutex_lock [linux] (7 samples, 0.25%)</title><rect x="20.8830%" y="853" width="0.2453%" height="15" fill="rgb(231,124,27)"/><text x="21.1330%" y="863.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="21.2334%" y="821" width="0.1402%" height="15" fill="rgb(249,195,6)"/><text x="21.4834%" y="831.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="21.3735%" y="805" width="0.2102%" height="15" fill="rgb(237,174,47)"/><text x="21.6235%" y="815.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (213 samples, 7.46%)</title><rect x="21.5837%" y="789" width="7.4632%" height="15" fill="rgb(206,201,31)"/><text x="21.8337%" y="799.50">0xFFFFFFFF..</text></g><g><title>__x64_sys_epoll_wait [linux] (287 samples, 10.06%)</title><rect x="19.0259%" y="917" width="10.0561%" height="15" fill="rgb(231,57,52)"/><text x="19.2759%" y="927.50">__x64_sys_epoll..</text></g><g><title>do_epoll_wait [linux] (287 samples, 10.06%)</title><rect x="19.0259%" y="901" width="10.0561%" height="15" fill="rgb(248,177,22)"/><text x="19.2759%" y="911.50">do_epoll_wait [..</text></g><g><title>ep_poll [linux] (285 samples, 9.99%)</title><rect x="19.0960%" y="885" width="9.9860%" height="15" fill="rgb(215,211,37)"/><text x="19.3460%" y="895.50">ep_poll [linux]</text></g><g><title>schedule_hrtimeout_range [linux] (225 samples, 7.88%)</title><rect x="21.1983%" y="869" width="7.8837%" height="15" fill="rgb(241,128,51)"/><text x="21.4483%" y="879.50">schedule_hr..</text></g><g><title>schedule_hrtimeout_range_clock [linux] (225 samples, 7.88%)</title><rect x="21.1983%" y="853" width="7.8837%" height="15" fill="rgb(227,165,31)"/><text x="21.4483%" y="863.50">schedule_hr..</text></g><g><title>schedule [linux] (224 samples, 7.85%)</title><rect x="21.2334%" y="837" width="7.8486%" height="15" fill="rgb(228,167,24)"/><text x="21.4834%" y="847.50">schedule [l..</text></g><g><title>__sched_text_start [linux] (220 samples, 7.71%)</title><rect x="21.3735%" y="821" width="7.7085%" height="15" fill="rgb(228,143,12)"/><text x="21.6235%" y="831.50">__sched_tex..</text></g><g><title>finish_task_switch [linux] (214 samples, 7.50%)</title><rect x="21.5837%" y="805" width="7.4982%" height="15" fill="rgb(249,149,8)"/><text x="21.8337%" y="815.50">finish_tas..</text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (306 samples, 10.72%)</title><rect x="18.3952%" y="949" width="10.7218%" height="15" fill="rgb(243,35,44)"/><text x="18.6452%" y="959.50">entry_SYSCALL_64..</text></g><g><title>do_syscall_64 [linux] (304 samples, 10.65%)</title><rect x="18.4653%" y="933" width="10.6517%" height="15" fill="rgb(246,89,9)"/><text x="18.7153%" y="943.50">do_syscall_64 [l..</text></g><g><title>epoll_wait [libc-2.31.so] (325 samples, 11.39%)</title><rect x="17.7645%" y="965" width="11.3875%" height="15" fill="rgb(233,213,13)"/><text x="18.0145%" y="975.50">epoll_wait [libc-..</text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="30.0981%" y="837" width="0.1402%" height="15" fill="rgb(233,141,41)"/><text x="30.3481%" y="847.50"></text></g><g><title>apparmor_socket_recvmsg [linux] (3 samples, 0.11%)</title><rect x="30.3784%" y="789" width="0.1051%" height="15" fill="rgb(239,167,4)"/><text x="30.6284%" y="799.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="30.3784%" y="773" width="0.1051%" height="15" fill="rgb(209,217,16)"/><text x="30.6284%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (12 samples, 0.42%)</title><rect x="30.6237%" y="757" width="0.4205%" height="15" fill="rgb(219,88,35)"/><text x="30.8737%" y="767.50"></text></g><g><title>kfree_skbmem [linux] (4 samples, 0.14%)</title><rect x="31.0792%" y="741" width="0.1402%" height="15" fill="rgb(220,193,23)"/><text x="31.3292%" y="751.50"></text></g><g><title>kmem_cache_free [linux] (3 samples, 0.11%)</title><rect x="31.1142%" y="725" width="0.1051%" height="15" fill="rgb(230,90,52)"/><text x="31.3642%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="31.1142%" y="709" width="0.1051%" height="15" fill="rgb(252,106,19)"/><text x="31.3642%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="31.3595%" y="677" width="0.1402%" height="15" fill="rgb(206,74,20)"/><text x="31.6095%" y="687.50"></text></g><g><title>skb_release_data [linux] (9 samples, 0.32%)</title><rect x="31.2544%" y="725" width="0.3153%" height="15" fill="rgb(230,138,44)"/><text x="31.5044%" y="735.50"></text></g><g><title>skb_free_head [linux] (7 samples, 0.25%)</title><rect x="31.3245%" y="709" width="0.2453%" height="15" fill="rgb(235,182,43)"/><text x="31.5745%" y="719.50"></text></g><g><title>kfree [linux] (6 samples, 0.21%)</title><rect x="31.3595%" y="693" width="0.2102%" height="15" fill="rgb(242,16,51)"/><text x="31.6095%" y="703.50"></text></g><g><title>__kfree_skb [linux] (16 samples, 0.56%)</title><rect x="31.0441%" y="757" width="0.5606%" height="15" fill="rgb(248,9,4)"/><text x="31.2941%" y="767.50"></text></g><g><title>skb_release_all [linux] (11 samples, 0.39%)</title><rect x="31.2193%" y="741" width="0.3854%" height="15" fill="rgb(210,31,22)"/><text x="31.4693%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="31.7099%" y="725" width="0.2102%" height="15" fill="rgb(239,54,39)"/><text x="31.9599%" y="735.50"></text></g><g><title>copy_user_enhanced_fast_string [linux] (3 samples, 0.11%)</title><rect x="32.0603%" y="693" width="0.1051%" height="15" fill="rgb(230,99,41)"/><text x="32.3103%" y="703.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="32.0603%" y="677" width="0.1051%" height="15" fill="rgb(253,106,12)"/><text x="32.3103%" y="687.50"></text></g><g><title>_copy_to_iter [linux] (4 samples, 0.14%)</title><rect x="32.0603%" y="709" width="0.1402%" height="15" fill="rgb(213,46,41)"/><text x="32.3103%" y="719.50"></text></g><g><title>skb_copy_datagram_iter [linux] (16 samples, 0.56%)</title><rect x="31.6748%" y="757" width="0.5606%" height="15" fill="rgb(215,133,35)"/><text x="31.9248%" y="767.50"></text></g><g><title>__skb_datagram_iter [linux] (15 samples, 0.53%)</title><rect x="31.7099%" y="741" width="0.5256%" height="15" fill="rgb(213,28,5)"/><text x="31.9599%" y="751.50"></text></g><g><title>simple_copy_to_iter [linux] (6 samples, 0.21%)</title><rect x="32.0252%" y="725" width="0.2102%" height="15" fill="rgb(215,77,49)"/><text x="32.2752%" y="735.50"></text></g><g><title>inet_recvmsg [linux] (53 samples, 1.86%)</title><rect x="30.4835%" y="789" width="1.8570%" height="15" fill="rgb(248,100,22)"/><text x="30.7335%" y="799.50">i..</text></g><g><title>tcp_recvmsg [linux] (49 samples, 1.72%)</title><rect x="30.6237%" y="773" width="1.7169%" height="15" fill="rgb(208,67,9)"/><text x="30.8737%" y="783.50"></text></g><g><title>sock_recvmsg [linux] (58 samples, 2.03%)</title><rect x="30.3434%" y="805" width="2.0322%" height="15" fill="rgb(219,133,21)"/><text x="30.5934%" y="815.50">s..</text></g><g><title>__sys_recvfrom [linux] (67 samples, 2.35%)</title><rect x="30.2733%" y="821" width="2.3476%" height="15" fill="rgb(246,46,29)"/><text x="30.5233%" y="831.50">_..</text></g><g><title>sockfd_lookup_light [linux] (7 samples, 0.25%)</title><rect x="32.3756%" y="805" width="0.2453%" height="15" fill="rgb(246,185,52)"/><text x="32.6256%" y="815.50"></text></g><g><title>__fdget [linux] (7 samples, 0.25%)</title><rect x="32.3756%" y="789" width="0.2453%" height="15" fill="rgb(252,136,11)"/><text x="32.6256%" y="799.50"></text></g><g><title>__fget_light [linux] (7 samples, 0.25%)</title><rect x="32.3756%" y="773" width="0.2453%" height="15" fill="rgb(219,138,53)"/><text x="32.6256%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="32.3756%" y="757" width="0.2453%" height="15" fill="rgb(211,51,23)"/><text x="32.6256%" y="767.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read [http_server_rust] (76 samples, 2.66%)</title><rect x="29.9930%" y="949" width="2.6629%" height="15" fill="rgb(247,221,28)"/><text x="30.2430%" y="959.50">&lt;&amp;..</text></g><g><title>inline std::sys_common::net::TcpStream::read [http_server_rust] (76 samples, 2.66%)</title><rect x="29.9930%" y="933" width="2.6629%" height="15" fill="rgb(251,222,45)"/><text x="30.2430%" y="943.50">in..</text></g><g><title>inline std::sys::pal::unix::net::Socket::read [http_server_rust] (76 samples, 2.66%)</title><rect x="29.9930%" y="917" width="2.6629%" height="15" fill="rgb(217,162,53)"/><text x="30.2430%" y="927.50">in..</text></g><g><title>inline std::sys::pal::unix::net::Socket::recv_with_flags [http_server_rust] (76 samples, 2.66%)</title><rect x="29.9930%" y="901" width="2.6629%" height="15" fill="rgb(229,93,14)"/><text x="30.2430%" y="911.50">in..</text></g><g><title>recv [libpthread-2.31.so] (76 samples, 2.66%)</title><rect x="29.9930%" y="885" width="2.6629%" height="15" fill="rgb(209,67,49)"/><text x="30.2430%" y="895.50">re..</text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (74 samples, 2.59%)</title><rect x="30.0631%" y="869" width="2.5929%" height="15" fill="rgb(213,87,29)"/><text x="30.3131%" y="879.50">en..</text></g><g><title>do_syscall_64 [linux] (73 samples, 2.56%)</title><rect x="30.0981%" y="853" width="2.5578%" height="15" fill="rgb(205,151,52)"/><text x="30.3481%" y="863.50">do..</text></g><g><title>__x64_sys_recvfrom [linux] (68 samples, 2.38%)</title><rect x="30.2733%" y="837" width="2.3826%" height="15" fill="rgb(253,215,39)"/><text x="30.5233%" y="847.50">__..</text></g><g><title>__libc_malloc [libc-2.31.so] (10 samples, 0.35%)</title><rect x="32.9713%" y="741" width="0.3504%" height="15" fill="rgb(221,220,41)"/><text x="33.2213%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in [http_server_rust] (12 samples, 0.42%)</title><rect x="32.9362%" y="757" width="0.4205%" height="15" fill="rgb(218,133,21)"/><text x="33.1862%" y="767.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::with_capacity_in [http_server_rust] (16 samples, 0.56%)</title><rect x="32.8662%" y="805" width="0.5606%" height="15" fill="rgb(221,193,43)"/><text x="33.1162%" y="815.50"></text></g><g><title>inline alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in [http_server_rust] (16 samples, 0.56%)</title><rect x="32.8662%" y="789" width="0.5606%" height="15" fill="rgb(240,128,52)"/><text x="33.1162%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in [http_server_rust] (16 samples, 0.56%)</title><rect x="32.8662%" y="773" width="0.5606%" height="15" fill="rgb(253,114,12)"/><text x="33.1162%" y="783.50"></text></g><g><title>inline alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned [http_server_rust] (28 samples, 0.98%)</title><rect x="32.6910%" y="885" width="0.9811%" height="15" fill="rgb(215,223,47)"/><text x="32.9410%" y="895.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec [http_server_rust] (28 samples, 0.98%)</title><rect x="32.6910%" y="869" width="0.9811%" height="15" fill="rgb(248,225,23)"/><text x="32.9410%" y="879.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec_in [http_server_rust] (28 samples, 0.98%)</title><rect x="32.6910%" y="853" width="0.9811%" height="15" fill="rgb(250,108,0)"/><text x="32.9410%" y="863.50"></text></g><g><title>inline alloc::slice::hack::to_vec [http_server_rust] (28 samples, 0.98%)</title><rect x="32.6910%" y="837" width="0.9811%" height="15" fill="rgb(228,208,7)"/><text x="32.9410%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec [http_server_rust] (28 samples, 0.98%)</title><rect x="32.6910%" y="821" width="0.9811%" height="15" fill="rgb(244,45,10)"/><text x="32.9410%" y="831.50"></text></g><g><title>inline core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping [http_server_rust] (7 samples, 0.25%)</title><rect x="33.4268%" y="805" width="0.2453%" height="15" fill="rgb(207,125,25)"/><text x="33.6768%" y="815.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (7 samples, 0.25%)</title><rect x="33.4268%" y="789" width="0.2453%" height="15" fill="rgb(210,195,18)"/><text x="33.6768%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (6 samples, 0.21%)</title><rect x="33.4618%" y="773" width="0.2102%" height="15" fill="rgb(249,80,12)"/><text x="33.7118%" y="783.50"></text></g><g><title>inline core::ub_checks::maybe_is_nonoverlapping [http_server_rust] (3 samples, 0.11%)</title><rect x="33.5669%" y="757" width="0.1051%" height="15" fill="rgb(221,65,9)"/><text x="33.8169%" y="767.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime [http_server_rust] (3 samples, 0.11%)</title><rect x="33.5669%" y="741" width="0.1051%" height="15" fill="rgb(235,49,36)"/><text x="33.8169%" y="751.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string [http_server_rust] (31 samples, 1.09%)</title><rect x="32.6559%" y="949" width="1.0862%" height="15" fill="rgb(225,32,20)"/><text x="32.9059%" y="959.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string [http_server_rust] (31 samples, 1.09%)</title><rect x="32.6559%" y="933" width="1.0862%" height="15" fill="rgb(215,141,46)"/><text x="32.9059%" y="943.50"></text></g><g><title>inline &lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from [http_server_rust] (30 samples, 1.05%)</title><rect x="32.6910%" y="917" width="1.0512%" height="15" fill="rgb(250,160,47)"/><text x="32.9410%" y="927.50"></text></g><g><title>inline alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned [http_server_rust] (30 samples, 1.05%)</title><rect x="32.6910%" y="901" width="1.0512%" height="15" fill="rgb(216,222,40)"/><text x="32.9410%" y="911.50"></text></g><g><title>inline core::ub_checks::is_valid_allocation_size [http_server_rust] (3 samples, 0.11%)</title><rect x="34.0224%" y="853" width="0.1051%" height="15" fill="rgb(234,217,39)"/><text x="34.2724%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index [http_server_rust] (8 samples, 0.28%)</title><rect x="33.8823%" y="933" width="0.2803%" height="15" fill="rgb(207,178,40)"/><text x="34.1323%" y="943.50"></text></g><g><title>inline alloc::string::String::as_str [http_server_rust] (7 samples, 0.25%)</title><rect x="33.9173%" y="917" width="0.2453%" height="15" fill="rgb(221,136,13)"/><text x="34.1673%" y="927.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::as_slice [http_server_rust] (7 samples, 0.25%)</title><rect x="33.9173%" y="901" width="0.2453%" height="15" fill="rgb(249,199,10)"/><text x="34.1673%" y="911.50"></text></g><g><title>inline core::slice::raw::from_raw_parts [http_server_rust] (7 samples, 0.25%)</title><rect x="33.9173%" y="885" width="0.2453%" height="15" fill="rgb(249,222,13)"/><text x="34.1673%" y="895.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check [http_server_rust] (7 samples, 0.25%)</title><rect x="33.9173%" y="869" width="0.2453%" height="15" fill="rgb(244,185,38)"/><text x="34.1673%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;&amp;str&gt;&gt;::eq [http_server_rust] (16 samples, 0.56%)</title><rect x="33.7421%" y="949" width="0.5606%" height="15" fill="rgb(236,202,9)"/><text x="33.9921%" y="959.50"></text></g><g><title>inline core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq [http_server_rust] (4 samples, 0.14%)</title><rect x="34.1626%" y="933" width="0.1402%" height="15" fill="rgb(250,229,37)"/><text x="34.4126%" y="943.50"></text></g><g><title>inline core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq [http_server_rust] (4 samples, 0.14%)</title><rect x="34.1626%" y="917" width="0.1402%" height="15" fill="rgb(206,174,23)"/><text x="34.4126%" y="927.50"></text></g><g><title>inline core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq [http_server_rust] (4 samples, 0.14%)</title><rect x="34.1626%" y="901" width="0.1402%" height="15" fill="rgb(211,33,43)"/><text x="34.4126%" y="911.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal [http_server_rust] (3 samples, 0.11%)</title><rect x="34.1976%" y="885" width="0.1051%" height="15" fill="rgb(245,58,50)"/><text x="34.4476%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from [http_server_rust] (4 samples, 0.14%)</title><rect x="34.3027%" y="949" width="0.1402%" height="15" fill="rgb(244,68,36)"/><text x="34.5527%" y="959.50"></text></g><g><title>inline alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned [http_server_rust] (3 samples, 0.11%)</title><rect x="34.3378%" y="933" width="0.1051%" height="15" fill="rgb(232,229,15)"/><text x="34.5878%" y="943.50"></text></g><g><title>inline alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned [http_server_rust] (3 samples, 0.11%)</title><rect x="34.3378%" y="917" width="0.1051%" height="15" fill="rgb(254,30,23)"/><text x="34.5878%" y="927.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec [http_server_rust] (3 samples, 0.11%)</title><rect x="34.3378%" y="901" width="0.1051%" height="15" fill="rgb(235,160,14)"/><text x="34.5878%" y="911.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec_in [http_server_rust] (3 samples, 0.11%)</title><rect x="34.3378%" y="885" width="0.1051%" height="15" fill="rgb(212,155,44)"/><text x="34.5878%" y="895.50"></text></g><g><title>inline alloc::slice::hack::to_vec [http_server_rust] (3 samples, 0.11%)</title><rect x="34.3378%" y="869" width="0.1051%" height="15" fill="rgb(226,2,50)"/><text x="34.5878%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec [http_server_rust] (3 samples, 0.11%)</title><rect x="34.3378%" y="853" width="0.1051%" height="15" fill="rgb(234,177,6)"/><text x="34.5878%" y="863.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::as_slice [http_server_rust] (3 samples, 0.11%)</title><rect x="34.4429%" y="917" width="0.1051%" height="15" fill="rgb(217,24,9)"/><text x="34.6929%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref [http_server_rust] (4 samples, 0.14%)</title><rect x="34.4429%" y="949" width="0.1402%" height="15" fill="rgb(220,13,46)"/><text x="34.6929%" y="959.50"></text></g><g><title>alloc::string::String::as_str [http_server_rust] (4 samples, 0.14%)</title><rect x="34.4429%" y="933" width="0.1402%" height="15" fill="rgb(239,221,27)"/><text x="34.6929%" y="943.50"></text></g><g><title>inline &lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref [http_server_rust] (6 samples, 0.21%)</title><rect x="34.6181%" y="933" width="0.2102%" height="15" fill="rgb(222,198,25)"/><text x="34.8681%" y="943.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::as_slice [http_server_rust] (6 samples, 0.21%)</title><rect x="34.6181%" y="917" width="0.2102%" height="15" fill="rgb(211,99,13)"/><text x="34.8681%" y="927.50"></text></g><g><title>inline core::slice::raw::from_raw_parts [http_server_rust] (5 samples, 0.18%)</title><rect x="34.6531%" y="901" width="0.1752%" height="15" fill="rgb(232,111,31)"/><text x="34.9031%" y="911.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check [http_server_rust] (4 samples, 0.14%)</title><rect x="34.6882%" y="885" width="0.1402%" height="15" fill="rgb(245,82,37)"/><text x="34.9382%" y="895.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null [http_server_rust] (3 samples, 0.11%)</title><rect x="34.7232%" y="869" width="0.1051%" height="15" fill="rgb(227,149,46)"/><text x="34.9732%" y="879.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null::runtime [http_server_rust] (3 samples, 0.11%)</title><rect x="34.7232%" y="853" width="0.1051%" height="15" fill="rgb(218,36,50)"/><text x="34.9732%" y="863.50"></text></g><g><title>inline core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to [http_server_rust] (3 samples, 0.11%)</title><rect x="34.7232%" y="837" width="0.1051%" height="15" fill="rgb(226,80,48)"/><text x="34.9732%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index [http_server_rust] (8 samples, 0.28%)</title><rect x="34.5830%" y="949" width="0.2803%" height="15" fill="rgb(238,224,15)"/><text x="34.8330%" y="959.50"></text></g><g><title>inline core::slice::memchr::memchr_aligned::runtime [http_server_rust] (3 samples, 0.11%)</title><rect x="35.6342%" y="837" width="0.1051%" height="15" fill="rgb(241,136,10)"/><text x="35.8842%" y="847.50"></text></g><g><title>inline core::slice::memchr::memchr_naive [http_server_rust] (3 samples, 0.11%)</title><rect x="35.6342%" y="821" width="0.1051%" height="15" fill="rgb(208,32,45)"/><text x="35.8842%" y="831.50"></text></g><g><title>core::slice::memchr::memchr [http_server_rust] (11 samples, 0.39%)</title><rect x="35.3889%" y="869" width="0.3854%" height="15" fill="rgb(207,135,9)"/><text x="35.6389%" y="879.50"></text></g><g><title>core::slice::memchr::memchr_aligned [http_server_rust] (7 samples, 0.25%)</title><rect x="35.5291%" y="853" width="0.2453%" height="15" fill="rgb(206,86,44)"/><text x="35.7791%" y="863.50"></text></g><g><title>inline core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq [http_server_rust] (7 samples, 0.25%)</title><rect x="35.8094%" y="869" width="0.2453%" height="15" fill="rgb(245,177,15)"/><text x="36.0594%" y="879.50"></text></g><g><title>inline core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq [http_server_rust] (7 samples, 0.25%)</title><rect x="35.8094%" y="853" width="0.2453%" height="15" fill="rgb(206,64,50)"/><text x="36.0594%" y="863.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal [http_server_rust] (5 samples, 0.18%)</title><rect x="35.8795%" y="837" width="0.1752%" height="15" fill="rgb(234,36,40)"/><text x="36.1295%" y="847.50"></text></g><g><title>inline core::slice::&lt;impl [T]&gt;::get [http_server_rust] (5 samples, 0.18%)</title><rect x="36.0547%" y="869" width="0.1752%" height="15" fill="rgb(213,64,8)"/><text x="36.3047%" y="879.50"></text></g><g><title>inline &lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get [http_server_rust] (5 samples, 0.18%)</title><rect x="36.0547%" y="853" width="0.1752%" height="15" fill="rgb(210,75,36)"/><text x="36.3047%" y="863.50"></text></g><g><title>inline core::num::&lt;impl usize&gt;::checked_sub [http_server_rust] (3 samples, 0.11%)</title><rect x="36.1247%" y="837" width="0.1051%" height="15" fill="rgb(229,88,21)"/><text x="36.3747%" y="847.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match [http_server_rust] (32 samples, 1.12%)</title><rect x="35.1437%" y="885" width="1.1212%" height="15" fill="rgb(252,204,47)"/><text x="35.3937%" y="895.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (37 samples, 1.30%)</title><rect x="35.0035%" y="917" width="1.2964%" height="15" fill="rgb(208,77,27)"/><text x="35.2535%" y="927.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive [http_server_rust] (33 samples, 1.16%)</title><rect x="35.1437%" y="901" width="1.1563%" height="15" fill="rgb(221,76,26)"/><text x="35.3937%" y="911.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal [http_server_rust] (3 samples, 0.11%)</title><rect x="36.7204%" y="789" width="0.1051%" height="15" fill="rgb(225,139,18)"/><text x="36.9704%" y="799.50"></text></g><g><title>inline &lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of [http_server_rust] (4 samples, 0.14%)</title><rect x="36.7204%" y="805" width="0.1402%" height="15" fill="rgb(230,137,11)"/><text x="36.9704%" y="815.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of [http_server_rust] (10 samples, 0.35%)</title><rect x="36.5452%" y="821" width="0.3504%" height="15" fill="rgb(212,28,1)"/><text x="36.7952%" y="831.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (69 samples, 2.42%)</title><rect x="34.8633%" y="949" width="2.4177%" height="15" fill="rgb(248,164,17)"/><text x="35.1133%" y="959.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (67 samples, 2.35%)</title><rect x="34.9334%" y="933" width="2.3476%" height="15" fill="rgb(222,171,42)"/><text x="35.1834%" y="943.50">&lt;..</text></g><g><title>inline core::option::Option&lt;T&gt;::map [http_server_rust] (28 samples, 0.98%)</title><rect x="36.2999%" y="917" width="0.9811%" height="15" fill="rgb(243,84,45)"/><text x="36.5499%" y="927.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once [http_server_rust] (28 samples, 0.98%)</title><rect x="36.2999%" y="901" width="0.9811%" height="15" fill="rgb(252,49,23)"/><text x="36.5499%" y="911.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut [http_server_rust] (28 samples, 0.98%)</title><rect x="36.2999%" y="885" width="0.9811%" height="15" fill="rgb(215,19,7)"/><text x="36.5499%" y="895.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call [http_server_rust] (26 samples, 0.91%)</title><rect x="36.3700%" y="869" width="0.9110%" height="15" fill="rgb(238,81,41)"/><text x="36.6200%" y="879.50"></text></g><g><title>inline core::str::&lt;impl str&gt;::strip_suffix [http_server_rust] (23 samples, 0.81%)</title><rect x="36.4751%" y="853" width="0.8059%" height="15" fill="rgb(210,199,37)"/><text x="36.7251%" y="863.50"></text></g><g><title>inline &lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of [http_server_rust] (23 samples, 0.81%)</title><rect x="36.4751%" y="837" width="0.8059%" height="15" fill="rgb(244,192,49)"/><text x="36.7251%" y="847.50"></text></g><g><title>inline core::char::methods::&lt;impl char&gt;::encode_utf8 [http_server_rust] (11 samples, 0.39%)</title><rect x="36.8956%" y="821" width="0.3854%" height="15" fill="rgb(226,211,11)"/><text x="37.1456%" y="831.50"></text></g><g><title>core::char::methods::encode_utf8_raw [http_server_rust] (9 samples, 0.32%)</title><rect x="36.9657%" y="805" width="0.3153%" height="15" fill="rgb(236,162,54)"/><text x="37.2157%" y="815.50"></text></g><g><title>inline core::slice::raw::from_raw_parts_mut [http_server_rust] (7 samples, 0.25%)</title><rect x="37.0357%" y="789" width="0.2453%" height="15" fill="rgb(220,229,9)"/><text x="37.2857%" y="799.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut::precondition_check [http_server_rust] (6 samples, 0.21%)</title><rect x="37.0708%" y="773" width="0.2102%" height="15" fill="rgb(250,87,22)"/><text x="37.3208%" y="783.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null [http_server_rust] (3 samples, 0.11%)</title><rect x="37.1759%" y="757" width="0.1051%" height="15" fill="rgb(239,43,17)"/><text x="37.4259%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else [http_server_rust] (17 samples, 0.60%)</title><rect x="37.2810%" y="933" width="0.5957%" height="15" fill="rgb(231,177,25)"/><text x="37.5310%" y="943.50"></text></g><g><title>alloc::fmt::format::{{closure}} [http_server_rust] (16 samples, 0.56%)</title><rect x="37.3160%" y="917" width="0.5606%" height="15" fill="rgb(219,179,1)"/><text x="37.5660%" y="927.50"></text></g><g><title>alloc::fmt::format::format_inner [http_server_rust] (16 samples, 0.56%)</title><rect x="37.3160%" y="901" width="0.5606%" height="15" fill="rgb(238,219,53)"/><text x="37.5660%" y="911.50"></text></g><g><title>inline core::fmt::Write::write_fmt [http_server_rust] (13 samples, 0.46%)</title><rect x="37.4212%" y="885" width="0.4555%" height="15" fill="rgb(232,167,36)"/><text x="37.6712%" y="895.50"></text></g><g><title>inline &lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt [http_server_rust] (13 samples, 0.46%)</title><rect x="37.4212%" y="869" width="0.4555%" height="15" fill="rgb(244,19,51)"/><text x="37.6712%" y="879.50"></text></g><g><title>core::fmt::write [http_server_rust] (13 samples, 0.46%)</title><rect x="37.4212%" y="853" width="0.4555%" height="15" fill="rgb(224,6,22)"/><text x="37.6712%" y="863.50"></text></g><g><title>inline core::fmt::rt::Argument::fmt [http_server_rust] (8 samples, 0.28%)</title><rect x="37.5964%" y="837" width="0.2803%" height="15" fill="rgb(224,145,5)"/><text x="37.8464%" y="847.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt [http_server_rust] (6 samples, 0.21%)</title><rect x="37.6664%" y="821" width="0.2102%" height="15" fill="rgb(234,130,49)"/><text x="37.9164%" y="831.50"></text></g><g><title>inline core::fmt::num::imp::&lt;impl u64&gt;::_fmt [http_server_rust] (5 samples, 0.18%)</title><rect x="37.7015%" y="805" width="0.1752%" height="15" fill="rgb(254,6,2)"/><text x="37.9515%" y="815.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (3 samples, 0.11%)</title><rect x="37.7715%" y="789" width="0.1051%" height="15" fill="rgb(208,96,46)"/><text x="38.0215%" y="799.50"></text></g><g><title>alloc::fmt::format [http_server_rust] (18 samples, 0.63%)</title><rect x="37.2810%" y="949" width="0.6307%" height="15" fill="rgb(239,3,39)"/><text x="37.5310%" y="959.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase [http_server_rust] (14 samples, 0.49%)</title><rect x="37.9117%" y="949" width="0.4905%" height="15" fill="rgb(233,210,1)"/><text x="38.1617%" y="959.50"></text></g><g><title>inline alloc::str::convert_while_ascii [http_server_rust] (11 samples, 0.39%)</title><rect x="38.0168%" y="933" width="0.3854%" height="15" fill="rgb(244,137,37)"/><text x="38.2668%" y="943.50"></text></g><g><title>inline alloc::vec::Vec&lt;T&gt;::with_capacity [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="917" width="0.1402%" height="15" fill="rgb(240,136,2)"/><text x="38.5121%" y="927.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::with_capacity_in [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="901" width="0.1402%" height="15" fill="rgb(239,18,37)"/><text x="38.5121%" y="911.50"></text></g><g><title>inline alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="885" width="0.1402%" height="15" fill="rgb(218,185,22)"/><text x="38.5121%" y="895.50"></text></g><g><title>inline alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="869" width="0.1402%" height="15" fill="rgb(225,218,4)"/><text x="38.5121%" y="879.50"></text></g><g><title>inline alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="853" width="0.1402%" height="15" fill="rgb(230,182,32)"/><text x="38.5121%" y="863.50"></text></g><g><title>inline &lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="837" width="0.1402%" height="15" fill="rgb(242,56,43)"/><text x="38.5121%" y="847.50"></text></g><g><title>inline alloc::alloc::Global::alloc_impl [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="821" width="0.1402%" height="15" fill="rgb(233,99,24)"/><text x="38.5121%" y="831.50"></text></g><g><title>inline alloc::alloc::alloc [http_server_rust] (4 samples, 0.14%)</title><rect x="38.2621%" y="805" width="0.1402%" height="15" fill="rgb(234,209,42)"/><text x="38.5121%" y="815.50"></text></g><g><title>__libc_malloc [libc-2.31.so] (4 samples, 0.14%)</title><rect x="38.2621%" y="789" width="0.1402%" height="15" fill="rgb(227,7,12)"/><text x="38.5121%" y="799.50"></text></g><g><title>alloc::string::String::as_bytes [http_server_rust] (3 samples, 0.11%)</title><rect x="38.4022%" y="949" width="0.1051%" height="15" fill="rgb(245,203,43)"/><text x="38.6522%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice [http_server_rust] (3 samples, 0.11%)</title><rect x="38.4022%" y="933" width="0.1051%" height="15" fill="rgb(238,205,33)"/><text x="38.6522%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq [http_server_rust] (4 samples, 0.14%)</title><rect x="38.5424%" y="949" width="0.1402%" height="15" fill="rgb(231,56,7)"/><text x="38.7924%" y="959.50"></text></g><g><title>core::fmt::rt::Argument::new_display [http_server_rust] (9 samples, 0.32%)</title><rect x="38.6826%" y="949" width="0.3153%" height="15" fill="rgb(244,186,29)"/><text x="38.9326%" y="959.50"></text></g><g><title>core::fmt::rt::Argument::new [http_server_rust] (7 samples, 0.25%)</title><rect x="38.7526%" y="933" width="0.2453%" height="15" fill="rgb(234,111,31)"/><text x="39.0026%" y="943.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches [http_server_rust] (3 samples, 0.11%)</title><rect x="39.6987%" y="709" width="0.1051%" height="15" fill="rgb(241,149,10)"/><text x="39.9487%" y="719.50"></text></g><g><title>inline &lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len [http_server_rust] (6 samples, 0.21%)</title><rect x="39.9089%" y="693" width="0.2102%" height="15" fill="rgb(249,206,44)"/><text x="40.1589%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr [http_server_rust] (4 samples, 0.14%)</title><rect x="39.9790%" y="677" width="0.1402%" height="15" fill="rgb(251,153,30)"/><text x="40.2290%" y="687.50"></text></g><g><title>inline core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub_ptr [http_server_rust] (3 samples, 0.11%)</title><rect x="40.0140%" y="661" width="0.1051%" height="15" fill="rgb(239,152,38)"/><text x="40.2640%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (10 samples, 0.35%)</title><rect x="40.3994%" y="661" width="0.3504%" height="15" fill="rgb(249,139,47)"/><text x="40.6494%" y="671.50"></text></g><g><title>core::str::validations::next_code_point [http_server_rust] (20 samples, 0.70%)</title><rect x="40.1191%" y="677" width="0.7008%" height="15" fill="rgb(244,64,35)"/><text x="40.3691%" y="687.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (40 samples, 1.40%)</title><rect x="39.8038%" y="709" width="1.4015%" height="15" fill="rgb(216,46,15)"/><text x="40.0538%" y="719.50"></text></g><g><title>inline &lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (31 samples, 1.09%)</title><rect x="40.1191%" y="693" width="1.0862%" height="15" fill="rgb(250,74,19)"/><text x="40.3691%" y="703.50"></text></g><g><title>inline core::option::Option&lt;T&gt;::map [http_server_rust] (11 samples, 0.39%)</title><rect x="40.8199%" y="677" width="0.3854%" height="15" fill="rgb(249,42,33)"/><text x="41.0699%" y="687.50"></text></g><g><title>inline &lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} [http_server_rust] (6 samples, 0.21%)</title><rect x="40.9951%" y="661" width="0.2102%" height="15" fill="rgb(242,149,17)"/><text x="41.2451%" y="671.50"></text></g><g><title>inline core::char::methods::&lt;impl char&gt;::from_u32_unchecked [http_server_rust] (6 samples, 0.21%)</title><rect x="40.9951%" y="645" width="0.2102%" height="15" fill="rgb(244,29,21)"/><text x="41.2451%" y="655.50"></text></g><g><title>inline core::char::convert::from_u32_unchecked [http_server_rust] (6 samples, 0.21%)</title><rect x="40.9951%" y="629" width="0.2102%" height="15" fill="rgb(220,130,37)"/><text x="41.2451%" y="639.50"></text></g><g><title>core::char::convert::from_u32_unchecked::precondition_check [http_server_rust] (6 samples, 0.21%)</title><rect x="40.9951%" y="613" width="0.2102%" height="15" fill="rgb(211,67,2)"/><text x="41.2451%" y="623.50"></text></g><g><title>inline core::result::Result&lt;T,E&gt;::is_ok [http_server_rust] (3 samples, 0.11%)</title><rect x="41.1002%" y="597" width="0.1051%" height="15" fill="rgb(235,68,52)"/><text x="41.3502%" y="607.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next [http_server_rust] (45 samples, 1.58%)</title><rect x="39.6636%" y="725" width="1.5767%" height="15" fill="rgb(246,142,3)"/><text x="39.9136%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match [http_server_rust] (48 samples, 1.68%)</title><rect x="39.5936%" y="757" width="1.6819%" height="15" fill="rgb(241,25,7)"/><text x="39.8436%" y="767.50"></text></g><g><title>core::str::pattern::Searcher::next_match [http_server_rust] (48 samples, 1.68%)</title><rect x="39.5936%" y="741" width="1.6819%" height="15" fill="rgb(242,119,39)"/><text x="39.8436%" y="751.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (50 samples, 1.75%)</title><rect x="39.5936%" y="789" width="1.7519%" height="15" fill="rgb(241,98,45)"/><text x="39.8436%" y="799.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next [http_server_rust] (50 samples, 1.75%)</title><rect x="39.5936%" y="773" width="1.7519%" height="15" fill="rgb(254,28,30)"/><text x="39.8436%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold [http_server_rust] (55 samples, 1.93%)</title><rect x="39.4534%" y="805" width="1.9271%" height="15" fill="rgb(241,142,54)"/><text x="39.7034%" y="815.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend [http_server_rust] (60 samples, 2.10%)</title><rect x="39.3483%" y="885" width="2.1023%" height="15" fill="rgb(222,85,15)"/><text x="39.5983%" y="895.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared [http_server_rust] (60 samples, 2.10%)</title><rect x="39.3483%" y="869" width="2.1023%" height="15" fill="rgb(210,85,47)"/><text x="39.5983%" y="879.50">a..</text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (59 samples, 2.07%)</title><rect x="39.3833%" y="853" width="2.0673%" height="15" fill="rgb(224,206,25)"/><text x="39.6333%" y="863.50">&lt;..</text></g><g><title>inline &lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (58 samples, 2.03%)</title><rect x="39.4184%" y="837" width="2.0322%" height="15" fill="rgb(243,201,19)"/><text x="39.6684%" y="847.50">i..</text></g><g><title>core::iter::traits::iterator::Iterator::find [http_server_rust] (58 samples, 2.03%)</title><rect x="39.4184%" y="821" width="2.0322%" height="15" fill="rgb(236,59,4)"/><text x="39.6684%" y="831.50">c..</text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches [http_server_rust] (4 samples, 0.14%)</title><rect x="41.9411%" y="741" width="0.1402%" height="15" fill="rgb(254,179,45)"/><text x="42.1911%" y="751.50"></text></g><g><title>&lt;core::str::IsWhitespace as core::ops::function::FnMut&lt;(char,)&gt;&gt;::call_mut [http_server_rust] (3 samples, 0.11%)</title><rect x="41.9762%" y="725" width="0.1051%" height="15" fill="rgb(226,14,10)"/><text x="42.2262%" y="735.50"></text></g><g><title>inline &lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len [http_server_rust] (4 samples, 0.14%)</title><rect x="42.2214%" y="725" width="0.1402%" height="15" fill="rgb(244,27,41)"/><text x="42.4714%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr [http_server_rust] (3 samples, 0.11%)</title><rect x="42.2565%" y="709" width="0.1051%" height="15" fill="rgb(235,35,32)"/><text x="42.5065%" y="719.50"></text></g><g><title>core::str::validations::next_code_point [http_server_rust] (4 samples, 0.14%)</title><rect x="42.3616%" y="709" width="0.1402%" height="15" fill="rgb(218,68,31)"/><text x="42.6116%" y="719.50"></text></g><g><title>inline &lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (5 samples, 0.18%)</title><rect x="42.3616%" y="725" width="0.1752%" height="15" fill="rgb(207,120,37)"/><text x="42.6116%" y="735.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (14 samples, 0.49%)</title><rect x="42.0813%" y="741" width="0.4905%" height="15" fill="rgb(227,98,0)"/><text x="42.3313%" y="751.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (39 samples, 1.37%)</title><rect x="41.6258%" y="821" width="1.3665%" height="15" fill="rgb(207,7,3)"/><text x="41.8758%" y="831.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next [http_server_rust] (39 samples, 1.37%)</title><rect x="41.6258%" y="805" width="1.3665%" height="15" fill="rgb(206,98,19)"/><text x="41.8758%" y="815.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match [http_server_rust] (36 samples, 1.26%)</title><rect x="41.7309%" y="789" width="1.2614%" height="15" fill="rgb(217,5,26)"/><text x="41.9809%" y="799.50"></text></g><g><title>core::str::pattern::Searcher::next_match [http_server_rust] (36 samples, 1.26%)</title><rect x="41.7309%" y="773" width="1.2614%" height="15" fill="rgb(235,190,38)"/><text x="41.9809%" y="783.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next [http_server_rust] (32 samples, 1.12%)</title><rect x="41.8711%" y="757" width="1.1212%" height="15" fill="rgb(247,86,24)"/><text x="42.1211%" y="767.50"></text></g><g><title>inline &lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len [http_server_rust] (12 samples, 0.42%)</title><rect x="42.5718%" y="741" width="0.4205%" height="15" fill="rgb(205,101,16)"/><text x="42.8218%" y="751.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr [http_server_rust] (9 samples, 0.32%)</title><rect x="42.6769%" y="725" width="0.3153%" height="15" fill="rgb(246,168,33)"/><text x="42.9269%" y="735.50"></text></g><g><title>inline core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub_ptr [http_server_rust] (4 samples, 0.14%)</title><rect x="42.8521%" y="709" width="0.1402%" height="15" fill="rgb(231,114,1)"/><text x="43.1021%" y="719.50"></text></g><g><title>inline core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr [http_server_rust] (4 samples, 0.14%)</title><rect x="42.8521%" y="693" width="0.1402%" height="15" fill="rgb(207,184,53)"/><text x="43.1021%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold [http_server_rust] (44 samples, 1.54%)</title><rect x="41.4856%" y="837" width="1.5417%" height="15" fill="rgb(224,95,51)"/><text x="41.7356%" y="847.50"></text></g><g><title>&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (46 samples, 1.61%)</title><rect x="41.4506%" y="885" width="1.6118%" height="15" fill="rgb(212,188,45)"/><text x="41.7006%" y="895.50"></text></g><g><title>inline &lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (46 samples, 1.61%)</title><rect x="41.4506%" y="869" width="1.6118%" height="15" fill="rgb(223,154,38)"/><text x="41.7006%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find [http_server_rust] (46 samples, 1.61%)</title><rect x="41.4506%" y="853" width="1.6118%" height="15" fill="rgb(251,22,52)"/><text x="41.7006%" y="863.50"></text></g><g><title>__libc_malloc [libc-2.31.so] (8 samples, 0.28%)</title><rect x="43.2025%" y="805" width="0.2803%" height="15" fill="rgb(229,209,22)"/><text x="43.4525%" y="815.50"></text></g><g><title>inline alloc::vec::Vec&lt;T&gt;::with_capacity [http_server_rust] (13 samples, 0.46%)</title><rect x="43.0624%" y="885" width="0.4555%" height="15" fill="rgb(234,138,34)"/><text x="43.3124%" y="895.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::with_capacity_in [http_server_rust] (13 samples, 0.46%)</title><rect x="43.0624%" y="869" width="0.4555%" height="15" fill="rgb(212,95,11)"/><text x="43.3124%" y="879.50"></text></g><g><title>inline alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in [http_server_rust] (13 samples, 0.46%)</title><rect x="43.0624%" y="853" width="0.4555%" height="15" fill="rgb(240,179,47)"/><text x="43.3124%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in [http_server_rust] (13 samples, 0.46%)</title><rect x="43.0624%" y="837" width="0.4555%" height="15" fill="rgb(240,163,11)"/><text x="43.3124%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in [http_server_rust] (10 samples, 0.35%)</title><rect x="43.1675%" y="821" width="0.3504%" height="15" fill="rgb(236,37,12)"/><text x="43.4175%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect [http_server_rust] (132 samples, 4.63%)</title><rect x="38.9979%" y="949" width="4.6251%" height="15" fill="rgb(232,164,16)"/><text x="39.2479%" y="959.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter [http_server_rust] (131 samples, 4.59%)</title><rect x="39.0329%" y="933" width="4.5900%" height="15" fill="rgb(244,205,15)"/><text x="39.2829%" y="943.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter [http_server_rust] (126 samples, 4.41%)</title><rect x="39.2081%" y="917" width="4.4149%" height="15" fill="rgb(223,117,47)"/><text x="39.4581%" y="927.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter [http_server_rust] (126 samples, 4.41%)</title><rect x="39.2081%" y="901" width="4.4149%" height="15" fill="rgb(244,107,35)"/><text x="39.4581%" y="911.50">&lt;allo..</text></g><g><title>inline core::cmp::max [http_server_rust] (3 samples, 0.11%)</title><rect x="43.5179%" y="885" width="0.1051%" height="15" fill="rgb(205,140,8)"/><text x="43.7679%" y="895.50"></text></g><g><title>inline core::cmp::Ord::max [http_server_rust] (3 samples, 0.11%)</title><rect x="43.5179%" y="869" width="0.1051%" height="15" fill="rgb(228,84,46)"/><text x="43.7679%" y="879.50"></text></g><g><title>core::cmp::max_by [http_server_rust] (3 samples, 0.11%)</title><rect x="43.5179%" y="853" width="0.1051%" height="15" fill="rgb(254,188,9)"/><text x="43.7679%" y="863.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned [http_server_rust] (5 samples, 0.18%)</title><rect x="43.6230%" y="949" width="0.1752%" height="15" fill="rgb(206,112,54)"/><text x="43.8730%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else [http_server_rust] (4 samples, 0.14%)</title><rect x="43.7982%" y="949" width="0.1402%" height="15" fill="rgb(216,84,49)"/><text x="44.0482%" y="959.50"></text></g><g><title>http_server_rust::connection_handler::handle_connection::{{closure}} [http_server_rust] (4 samples, 0.14%)</title><rect x="43.7982%" y="933" width="0.1402%" height="15" fill="rgb(214,194,35)"/><text x="44.0482%" y="943.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string [http_server_rust] (4 samples, 0.14%)</title><rect x="43.7982%" y="917" width="0.1402%" height="15" fill="rgb(249,28,3)"/><text x="44.0482%" y="927.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="901" width="0.1051%" height="15" fill="rgb(222,56,52)"/><text x="44.0832%" y="911.50"></text></g><g><title>inline &lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="885" width="0.1051%" height="15" fill="rgb(245,217,50)"/><text x="44.0832%" y="895.50"></text></g><g><title>inline alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="869" width="0.1051%" height="15" fill="rgb(213,201,24)"/><text x="44.0832%" y="879.50"></text></g><g><title>inline alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="853" width="0.1051%" height="15" fill="rgb(248,116,28)"/><text x="44.0832%" y="863.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="837" width="0.1051%" height="15" fill="rgb(219,72,43)"/><text x="44.0832%" y="847.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec_in [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="821" width="0.1051%" height="15" fill="rgb(209,138,14)"/><text x="44.0832%" y="831.50"></text></g><g><title>inline alloc::slice::hack::to_vec [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="805" width="0.1051%" height="15" fill="rgb(222,18,33)"/><text x="44.0832%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec [http_server_rust] (3 samples, 0.11%)</title><rect x="43.8332%" y="789" width="0.1051%" height="15" fill="rgb(213,199,7)"/><text x="44.0832%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; [http_server_rust] (4 samples, 0.14%)</title><rect x="43.9383%" y="949" width="0.1402%" height="15" fill="rgb(250,110,10)"/><text x="44.1883%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; [http_server_rust] (3 samples, 0.11%)</title><rect x="43.9734%" y="933" width="0.1051%" height="15" fill="rgb(248,123,6)"/><text x="44.2234%" y="943.50"></text></g><g><title>inline &lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (4 samples, 0.14%)</title><rect x="44.4989%" y="821" width="0.1402%" height="15" fill="rgb(206,91,31)"/><text x="44.7489%" y="831.50"></text></g><g><title>inline hashbrown::control::bitmask::BitMask::lowest_set_bit [http_server_rust] (3 samples, 0.11%)</title><rect x="44.5340%" y="805" width="0.1051%" height="15" fill="rgb(211,154,13)"/><text x="44.7840%" y="815.50"></text></g><g><title>inline &lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (5 samples, 0.18%)</title><rect x="44.4989%" y="853" width="0.1752%" height="15" fill="rgb(225,148,7)"/><text x="44.7489%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl [http_server_rust] (5 samples, 0.18%)</title><rect x="44.4989%" y="837" width="0.1752%" height="15" fill="rgb(220,160,43)"/><text x="44.7489%" y="847.50"></text></g><g><title>inline core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place [http_server_rust] (7 samples, 0.25%)</title><rect x="44.6741%" y="837" width="0.2453%" height="15" fill="rgb(213,52,39)"/><text x="44.9241%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::string::String)&gt; [http_server_rust] (7 samples, 0.25%)</title><rect x="44.6741%" y="821" width="0.2453%" height="15" fill="rgb(243,137,7)"/><text x="44.9241%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; [http_server_rust] (7 samples, 0.25%)</title><rect x="44.6741%" y="805" width="0.2453%" height="15" fill="rgb(230,79,13)"/><text x="44.9241%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; [http_server_rust] (7 samples, 0.25%)</title><rect x="44.6741%" y="789" width="0.2453%" height="15" fill="rgb(247,105,23)"/><text x="44.9241%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; [http_server_rust] (5 samples, 0.18%)</title><rect x="44.7442%" y="773" width="0.1752%" height="15" fill="rgb(223,179,41)"/><text x="44.9942%" y="783.50"></text></g><g><title>inline hashbrown::raw::Bucket&lt;T&gt;::drop [http_server_rust] (8 samples, 0.28%)</title><rect x="44.6741%" y="853" width="0.2803%" height="15" fill="rgb(218,9,34)"/><text x="44.9241%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new [http_server_rust] (5 samples, 0.18%)</title><rect x="44.9544%" y="837" width="0.1752%" height="15" fill="rgb(222,106,8)"/><text x="45.2044%" y="847.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements [http_server_rust] (21 samples, 0.74%)</title><rect x="44.4289%" y="869" width="0.7358%" height="15" fill="rgb(211,220,0)"/><text x="44.6789%" y="879.50"></text></g><g><title>inline hashbrown::raw::RawTableInner::iter [http_server_rust] (6 samples, 0.21%)</title><rect x="44.9544%" y="853" width="0.2102%" height="15" fill="rgb(229,52,16)"/><text x="45.2044%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,alloc::string::String&gt;&gt; [http_server_rust] (25 samples, 0.88%)</title><rect x="44.3238%" y="949" width="0.8760%" height="15" fill="rgb(212,155,18)"/><text x="44.5738%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::string::String,std::hash::random::RandomState&gt;&gt; [http_server_rust] (22 samples, 0.77%)</title><rect x="44.4289%" y="933" width="0.7708%" height="15" fill="rgb(242,21,14)"/><text x="44.6789%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,alloc::string::String)&gt;&gt; [http_server_rust] (22 samples, 0.77%)</title><rect x="44.4289%" y="917" width="0.7708%" height="15" fill="rgb(222,19,48)"/><text x="44.6789%" y="927.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop [http_server_rust] (22 samples, 0.77%)</title><rect x="44.4289%" y="901" width="0.7708%" height="15" fill="rgb(232,45,27)"/><text x="44.6789%" y="911.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table [http_server_rust] (22 samples, 0.77%)</title><rect x="44.4289%" y="885" width="0.7708%" height="15" fill="rgb(249,103,42)"/><text x="44.6789%" y="895.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in [http_server_rust] (3 samples, 0.11%)</title><rect x="45.1997%" y="933" width="0.1051%" height="15" fill="rgb(246,81,33)"/><text x="45.4497%" y="943.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains [http_server_rust] (4 samples, 0.14%)</title><rect x="45.1997%" y="949" width="0.1402%" height="15" fill="rgb(252,33,42)"/><text x="45.4497%" y="959.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher [http_server_rust] (7 samples, 0.25%)</title><rect x="45.4100%" y="933" width="0.2453%" height="15" fill="rgb(209,212,41)"/><text x="45.6600%" y="943.50"></text></g><g><title>core::str::pattern::StrSearcher::new [http_server_rust] (6 samples, 0.21%)</title><rect x="45.4450%" y="917" width="0.2102%" height="15" fill="rgb(207,154,6)"/><text x="45.6950%" y="927.50"></text></g><g><title>inline core::str::pattern::TwoWaySearcher::new [http_server_rust] (6 samples, 0.21%)</title><rect x="45.4450%" y="901" width="0.2102%" height="15" fill="rgb(223,64,47)"/><text x="45.6950%" y="911.50"></text></g><g><title>inline core::str::pattern::TwoWaySearcher::byteset_contains [http_server_rust] (4 samples, 0.14%)</title><rect x="46.5312%" y="901" width="0.1402%" height="15" fill="rgb(211,161,38)"/><text x="46.7812%" y="911.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match [http_server_rust] (30 samples, 1.05%)</title><rect x="45.6552%" y="933" width="1.0512%" height="15" fill="rgb(219,138,40)"/><text x="45.9052%" y="943.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next [http_server_rust] (28 samples, 0.98%)</title><rect x="45.7253%" y="917" width="0.9811%" height="15" fill="rgb(241,228,46)"/><text x="45.9753%" y="927.50"></text></g><g><title>core::str::&lt;impl str&gt;::find [http_server_rust] (40 samples, 1.40%)</title><rect x="45.3399%" y="949" width="1.4015%" height="15" fill="rgb(223,209,38)"/><text x="45.5899%" y="959.50"></text></g><g><title>core::str::&lt;impl str&gt;::lines [http_server_rust] (12 samples, 0.42%)</title><rect x="46.7414%" y="949" width="0.4205%" height="15" fill="rgb(236,164,45)"/><text x="46.9914%" y="959.50"></text></g><g><title>inline core::str::&lt;impl str&gt;::split_inclusive [http_server_rust] (12 samples, 0.42%)</title><rect x="46.7414%" y="933" width="0.4205%" height="15" fill="rgb(231,15,5)"/><text x="46.9914%" y="943.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher [http_server_rust] (10 samples, 0.35%)</title><rect x="46.8115%" y="917" width="0.3504%" height="15" fill="rgb(252,35,15)"/><text x="47.0615%" y="927.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse [http_server_rust] (5 samples, 0.18%)</title><rect x="47.1619%" y="949" width="0.1752%" height="15" fill="rgb(248,181,18)"/><text x="47.4119%" y="959.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str [http_server_rust] (5 samples, 0.18%)</title><rect x="47.1619%" y="933" width="0.1752%" height="15" fill="rgb(233,39,42)"/><text x="47.4119%" y="943.50"></text></g><g><title>inline core::num::&lt;impl usize&gt;::from_str_radix [http_server_rust] (4 samples, 0.14%)</title><rect x="47.1969%" y="917" width="0.1402%" height="15" fill="rgb(238,110,33)"/><text x="47.4469%" y="927.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix [http_server_rust] (3 samples, 0.11%)</title><rect x="47.2320%" y="901" width="0.1051%" height="15" fill="rgb(233,195,10)"/><text x="47.4820%" y="911.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::into_searcher [http_server_rust] (6 samples, 0.21%)</title><rect x="47.4071%" y="933" width="0.2102%" height="15" fill="rgb(254,105,3)"/><text x="47.6571%" y="943.50"></text></g><g><title>inline core::char::methods::&lt;impl char&gt;::encode_utf8 [http_server_rust] (3 samples, 0.11%)</title><rect x="47.5123%" y="917" width="0.1051%" height="15" fill="rgb(221,225,9)"/><text x="47.7623%" y="927.50"></text></g><g><title>core::char::methods::encode_utf8_raw [http_server_rust] (3 samples, 0.11%)</title><rect x="47.5123%" y="901" width="0.1051%" height="15" fill="rgb(224,227,45)"/><text x="47.7623%" y="911.50"></text></g><g><title>core::slice::memchr::memchr [http_server_rust] (3 samples, 0.11%)</title><rect x="47.7926%" y="917" width="0.1051%" height="15" fill="rgb(229,198,43)"/><text x="48.0426%" y="927.50"></text></g><g><title>inline &lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch [http_server_rust] (3 samples, 0.11%)</title><rect x="47.8977%" y="917" width="0.1051%" height="15" fill="rgb(206,209,35)"/><text x="48.1477%" y="927.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match [http_server_rust] (13 samples, 0.46%)</title><rect x="47.6174%" y="933" width="0.4555%" height="15" fill="rgb(245,195,53)"/><text x="47.8674%" y="943.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once [http_server_rust] (24 samples, 0.84%)</title><rect x="47.3371%" y="949" width="0.8409%" height="15" fill="rgb(240,92,26)"/><text x="47.5871%" y="959.50"></text></g><g><title>inline core::str::&lt;impl str&gt;::get_unchecked [http_server_rust] (3 samples, 0.11%)</title><rect x="48.0729%" y="933" width="0.1051%" height="15" fill="rgb(207,40,23)"/><text x="48.3229%" y="943.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_whitespace [http_server_rust] (4 samples, 0.14%)</title><rect x="48.1780%" y="949" width="0.1402%" height="15" fill="rgb(223,111,35)"/><text x="48.4280%" y="959.50"></text></g><g><title>0x00007FF96183292B [libc-2.31.so] (3 samples, 0.11%)</title><rect x="48.4933%" y="901" width="0.1051%" height="15" fill="rgb(229,147,28)"/><text x="48.7433%" y="911.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher [http_server_rust] (13 samples, 0.46%)</title><rect x="48.3882%" y="917" width="0.4555%" height="15" fill="rgb(211,29,28)"/><text x="48.6382%" y="927.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher [http_server_rust] (4 samples, 0.14%)</title><rect x="48.7036%" y="901" width="0.1402%" height="15" fill="rgb(228,72,33)"/><text x="48.9536%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back [http_server_rust] (9 samples, 0.32%)</title><rect x="49.3343%" y="821" width="0.3153%" height="15" fill="rgb(205,214,31)"/><text x="49.5843%" y="831.50"></text></g><g><title>core::str::validations::next_code_point_reverse [http_server_rust] (15 samples, 0.53%)</title><rect x="49.1591%" y="837" width="0.5256%" height="15" fill="rgb(224,111,15)"/><text x="49.4091%" y="847.50"></text></g><g><title>inline &lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back [http_server_rust] (20 samples, 0.70%)</title><rect x="49.1240%" y="853" width="0.7008%" height="15" fill="rgb(253,21,26)"/><text x="49.3740%" y="863.50"></text></g><g><title>inline core::option::Option&lt;T&gt;::map [http_server_rust] (4 samples, 0.14%)</title><rect x="49.6847%" y="837" width="0.1402%" height="15" fill="rgb(245,139,43)"/><text x="49.9347%" y="847.50"></text></g><g><title>inline &lt;core::str::iter::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} [http_server_rust] (3 samples, 0.11%)</title><rect x="49.7197%" y="821" width="0.1051%" height="15" fill="rgb(252,170,7)"/><text x="49.9697%" y="831.50"></text></g><g><title>inline core::char::methods::&lt;impl char&gt;::from_u32_unchecked [http_server_rust] (3 samples, 0.11%)</title><rect x="49.7197%" y="805" width="0.1051%" height="15" fill="rgb(231,118,14)"/><text x="49.9697%" y="815.50"></text></g><g><title>inline core::char::convert::from_u32_unchecked [http_server_rust] (3 samples, 0.11%)</title><rect x="49.7197%" y="789" width="0.1051%" height="15" fill="rgb(238,83,0)"/><text x="49.9697%" y="799.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back [http_server_rust] (24 samples, 0.84%)</title><rect x="49.0890%" y="869" width="0.8409%" height="15" fill="rgb(221,39,39)"/><text x="49.3390%" y="879.50"></text></g><g><title>inline core::option::Option&lt;T&gt;::map [http_server_rust] (3 samples, 0.11%)</title><rect x="49.8248%" y="853" width="0.1051%" height="15" fill="rgb(222,119,46)"/><text x="50.0748%" y="863.50"></text></g><g><title>inline &lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} [http_server_rust] (3 samples, 0.11%)</title><rect x="49.8248%" y="837" width="0.1051%" height="15" fill="rgb(222,165,49)"/><text x="50.0748%" y="847.50"></text></g><g><title>inline &lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len [http_server_rust] (3 samples, 0.11%)</title><rect x="49.8248%" y="821" width="0.1051%" height="15" fill="rgb(219,113,52)"/><text x="50.0748%" y="831.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr [http_server_rust] (3 samples, 0.11%)</title><rect x="49.8248%" y="805" width="0.1051%" height="15" fill="rgb(214,7,15)"/><text x="50.0748%" y="815.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back [http_server_rust] (37 samples, 1.30%)</title><rect x="48.8437%" y="917" width="1.2964%" height="15" fill="rgb(235,32,4)"/><text x="49.0937%" y="927.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back [http_server_rust] (37 samples, 1.30%)</title><rect x="48.8437%" y="901" width="1.2964%" height="15" fill="rgb(238,90,54)"/><text x="49.0937%" y="911.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back [http_server_rust] (37 samples, 1.30%)</title><rect x="48.8437%" y="885" width="1.2964%" height="15" fill="rgb(213,208,19)"/><text x="49.0937%" y="895.50"></text></g><g><title>inline &lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len [http_server_rust] (6 samples, 0.21%)</title><rect x="49.9299%" y="869" width="0.2102%" height="15" fill="rgb(233,156,4)"/><text x="50.1799%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr [http_server_rust] (5 samples, 0.18%)</title><rect x="49.9650%" y="853" width="0.1752%" height="15" fill="rgb(207,194,5)"/><text x="50.2150%" y="863.50"></text></g><g><title>inline core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub_ptr [http_server_rust] (4 samples, 0.14%)</title><rect x="50.0000%" y="837" width="0.1402%" height="15" fill="rgb(206,111,30)"/><text x="50.2500%" y="847.50"></text></g><g><title>inline core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr [http_server_rust] (4 samples, 0.14%)</title><rect x="50.0000%" y="821" width="0.1402%" height="15" fill="rgb(243,70,54)"/><text x="50.2500%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="50.0350%" y="805" width="0.1051%" height="15" fill="rgb(242,28,8)"/><text x="50.2850%" y="815.50"></text></g><g><title>inline &lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len [http_server_rust] (3 samples, 0.11%)</title><rect x="50.4555%" y="853" width="0.1051%" height="15" fill="rgb(219,106,18)"/><text x="50.7055%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (4 samples, 0.14%)</title><rect x="50.8059%" y="821" width="0.1402%" height="15" fill="rgb(244,222,10)"/><text x="51.0559%" y="831.50"></text></g><g><title>core::str::validations::next_code_point [http_server_rust] (13 samples, 0.46%)</title><rect x="50.5957%" y="837" width="0.4555%" height="15" fill="rgb(236,179,52)"/><text x="50.8457%" y="847.50"></text></g><g><title>core::char::convert::from_u32_unchecked::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="51.0862%" y="773" width="0.1051%" height="15" fill="rgb(213,23,39)"/><text x="51.3362%" y="783.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (23 samples, 0.81%)</title><rect x="50.4205%" y="869" width="0.8059%" height="15" fill="rgb(238,48,10)"/><text x="50.6705%" y="879.50"></text></g><g><title>inline &lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (19 samples, 0.67%)</title><rect x="50.5606%" y="853" width="0.6657%" height="15" fill="rgb(251,196,23)"/><text x="50.8106%" y="863.50"></text></g><g><title>inline core::option::Option&lt;T&gt;::map [http_server_rust] (5 samples, 0.18%)</title><rect x="51.0512%" y="837" width="0.1752%" height="15" fill="rgb(250,152,24)"/><text x="51.3012%" y="847.50"></text></g><g><title>inline &lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} [http_server_rust] (4 samples, 0.14%)</title><rect x="51.0862%" y="821" width="0.1402%" height="15" fill="rgb(209,150,17)"/><text x="51.3362%" y="831.50"></text></g><g><title>inline core::char::methods::&lt;impl char&gt;::from_u32_unchecked [http_server_rust] (4 samples, 0.14%)</title><rect x="51.0862%" y="805" width="0.1402%" height="15" fill="rgb(234,202,34)"/><text x="51.3362%" y="815.50"></text></g><g><title>inline core::char::convert::from_u32_unchecked [http_server_rust] (4 samples, 0.14%)</title><rect x="51.0862%" y="789" width="0.1402%" height="15" fill="rgb(253,148,53)"/><text x="51.3362%" y="799.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_reject [http_server_rust] (34 samples, 1.19%)</title><rect x="50.1402%" y="917" width="1.1913%" height="15" fill="rgb(218,129,16)"/><text x="50.3902%" y="927.50"></text></g><g><title>core::str::pattern::Searcher::next_reject [http_server_rust] (33 samples, 1.16%)</title><rect x="50.1752%" y="901" width="1.1563%" height="15" fill="rgb(216,85,19)"/><text x="50.4252%" y="911.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next [http_server_rust] (31 samples, 1.09%)</title><rect x="50.2453%" y="885" width="1.0862%" height="15" fill="rgb(235,228,7)"/><text x="50.4953%" y="895.50"></text></g><g><title>inline &lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len [http_server_rust] (3 samples, 0.11%)</title><rect x="51.2263%" y="869" width="0.1051%" height="15" fill="rgb(245,175,0)"/><text x="51.4763%" y="879.50"></text></g><g><title>inline core::str::&lt;impl str&gt;::get_unchecked [http_server_rust] (5 samples, 0.18%)</title><rect x="51.3315%" y="917" width="0.1752%" height="15" fill="rgb(208,168,36)"/><text x="51.5815%" y="927.50"></text></g><g><title>inline core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked [http_server_rust] (5 samples, 0.18%)</title><rect x="51.3315%" y="901" width="0.1752%" height="15" fill="rgb(246,171,24)"/><text x="51.5815%" y="911.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim [http_server_rust] (93 samples, 3.26%)</title><rect x="48.3181%" y="949" width="3.2586%" height="15" fill="rgb(215,142,24)"/><text x="48.5681%" y="959.50">cor..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches [http_server_rust] (92 samples, 3.22%)</title><rect x="48.3532%" y="933" width="3.2235%" height="15" fill="rgb(250,187,7)"/><text x="48.6032%" y="943.50">cor..</text></g><g><title>core::str::converts::from_utf8 [http_server_rust] (6 samples, 0.21%)</title><rect x="51.5767%" y="949" width="0.2102%" height="15" fill="rgb(228,66,33)"/><text x="51.8267%" y="959.50"></text></g><g><title>inline core::str::validations::run_utf8_validation [http_server_rust] (4 samples, 0.14%)</title><rect x="51.6468%" y="933" width="0.1402%" height="15" fill="rgb(234,215,21)"/><text x="51.8968%" y="943.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index [http_server_rust] (5 samples, 0.18%)</title><rect x="51.7870%" y="949" width="0.1752%" height="15" fill="rgb(222,191,20)"/><text x="52.0370%" y="959.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index [http_server_rust] (4 samples, 0.14%)</title><rect x="51.8220%" y="933" width="0.1402%" height="15" fill="rgb(245,79,54)"/><text x="52.0720%" y="943.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get [http_server_rust] (3 samples, 0.11%)</title><rect x="51.8570%" y="917" width="0.1051%" height="15" fill="rgb(240,10,37)"/><text x="52.1070%" y="927.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch [http_server_rust] (4 samples, 0.14%)</title><rect x="52.8732%" y="869" width="0.1402%" height="15" fill="rgb(214,192,32)"/><text x="53.1232%" y="879.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str::{{closure}} [http_server_rust] (3 samples, 0.11%)</title><rect x="53.3987%" y="741" width="0.1051%" height="15" fill="rgb(209,36,54)"/><text x="53.6487%" y="751.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into [http_server_rust] (3 samples, 0.11%)</title><rect x="53.9243%" y="725" width="0.1051%" height="15" fill="rgb(220,10,11)"/><text x="54.1743%" y="735.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next [http_server_rust] (3 samples, 0.11%)</title><rect x="54.0294%" y="725" width="0.1051%" height="15" fill="rgb(221,106,17)"/><text x="54.2794%" y="735.50"></text></g><g><title>inline core::slice::&lt;impl [T]&gt;::split_at [http_server_rust] (3 samples, 0.11%)</title><rect x="54.0294%" y="709" width="0.1051%" height="15" fill="rgb(251,142,44)"/><text x="54.2794%" y="719.50"></text></g><g><title>inline core::slice::&lt;impl [T]&gt;::split_at_checked [http_server_rust] (3 samples, 0.11%)</title><rect x="54.0294%" y="693" width="0.1051%" height="15" fill="rgb(238,13,15)"/><text x="54.2794%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked [http_server_rust] (3 samples, 0.11%)</title><rect x="54.0294%" y="677" width="0.1051%" height="15" fill="rgb(208,107,27)"/><text x="54.2794%" y="687.50"></text></g><g><title>inline core::slice::raw::from_raw_parts [http_server_rust] (3 samples, 0.11%)</title><rect x="54.0294%" y="661" width="0.1051%" height="15" fill="rgb(205,136,37)"/><text x="54.2794%" y="671.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="54.0294%" y="645" width="0.1051%" height="15" fill="rgb(250,205,27)"/><text x="54.2794%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::chunks_exact [http_server_rust] (6 samples, 0.21%)</title><rect x="54.2046%" y="725" width="0.2102%" height="15" fill="rgb(210,80,43)"/><text x="54.4546%" y="735.50"></text></g><g><title>inline core::slice::iter::ChunksExact&lt;T&gt;::new [http_server_rust] (6 samples, 0.21%)</title><rect x="54.2046%" y="709" width="0.2102%" height="15" fill="rgb(247,160,36)"/><text x="54.4546%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked [http_server_rust] (5 samples, 0.18%)</title><rect x="54.2397%" y="693" width="0.1752%" height="15" fill="rgb(234,13,49)"/><text x="54.4897%" y="703.50"></text></g><g><title>inline core::slice::raw::from_raw_parts [http_server_rust] (3 samples, 0.11%)</title><rect x="54.3097%" y="677" width="0.1051%" height="15" fill="rgb(234,122,0)"/><text x="54.5597%" y="687.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="54.3097%" y="661" width="0.1051%" height="15" fill="rgb(207,146,38)"/><text x="54.5597%" y="671.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str [http_server_rust] (36 samples, 1.26%)</title><rect x="53.2936%" y="773" width="1.2614%" height="15" fill="rgb(207,177,25)"/><text x="53.5436%" y="783.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes [http_server_rust] (36 samples, 1.26%)</title><rect x="53.2936%" y="757" width="1.2614%" height="15" fill="rgb(211,178,42)"/><text x="53.5436%" y="767.50"></text></g><g><title>serde_json::read::SliceRead::skip_to_escape [http_server_rust] (27 samples, 0.95%)</title><rect x="53.6090%" y="741" width="0.9460%" height="15" fill="rgb(230,69,54)"/><text x="53.8590%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear [http_server_rust] (3 samples, 0.11%)</title><rect x="54.5550%" y="773" width="0.1051%" height="15" fill="rgb(214,135,41)"/><text x="54.8050%" y="783.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize [http_server_rust] (54 samples, 1.89%)</title><rect x="53.0834%" y="837" width="1.8921%" height="15" fill="rgb(237,67,25)"/><text x="53.3334%" y="847.50">&lt;..</text></g><g><title>&lt;http_server_rust::connection_handler::_::&lt;impl serde::de::Deserialize for http_server_rust::connection_handler::JsonBody&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize [http_server_rust] (53 samples, 1.86%)</title><rect x="53.1184%" y="821" width="1.8570%" height="15" fill="rgb(222,189,50)"/><text x="53.3684%" y="831.50">&lt;..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier [http_server_rust] (51 samples, 1.79%)</title><rect x="53.1885%" y="805" width="1.7870%" height="15" fill="rgb(245,148,34)"/><text x="53.4385%" y="815.50">&lt;..</text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any [http_server_rust] (51 samples, 1.79%)</title><rect x="53.1885%" y="789" width="1.7870%" height="15" fill="rgb(222,29,6)"/><text x="53.4385%" y="799.50">&lt;..</text></g><g><title>serde::de::Visitor::visit_borrowed_str [http_server_rust] (9 samples, 0.32%)</title><rect x="54.6601%" y="773" width="0.3153%" height="15" fill="rgb(221,189,43)"/><text x="54.9101%" y="783.50"></text></g><g><title>&lt;http_server_rust::connection_handler::_::&lt;impl serde::de::Deserialize for http_server_rust::connection_handler::JsonBody&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str [http_server_rust] (8 samples, 0.28%)</title><rect x="54.6952%" y="757" width="0.2803%" height="15" fill="rgb(207,36,27)"/><text x="54.9452%" y="767.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq [http_server_rust] (4 samples, 0.14%)</title><rect x="54.8353%" y="741" width="0.1402%" height="15" fill="rgb(217,90,24)"/><text x="55.0853%" y="751.50"></text></g><g><title>inline core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq [http_server_rust] (4 samples, 0.14%)</title><rect x="54.8353%" y="725" width="0.1402%" height="15" fill="rgb(224,66,35)"/><text x="55.0853%" y="735.50"></text></g><g><title>inline core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq [http_server_rust] (4 samples, 0.14%)</title><rect x="54.8353%" y="709" width="0.1402%" height="15" fill="rgb(221,13,50)"/><text x="55.0853%" y="719.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal [http_server_rust] (4 samples, 0.14%)</title><rect x="54.8353%" y="693" width="0.1402%" height="15" fill="rgb(236,68,49)"/><text x="55.0853%" y="703.50"></text></g><g><title>0x00007FF96182C066 [libc-2.31.so] (3 samples, 0.11%)</title><rect x="54.8704%" y="677" width="0.1051%" height="15" fill="rgb(229,146,28)"/><text x="55.1204%" y="687.50"></text></g><g><title>serde::de::MapAccess::next_key [http_server_rust] (63 samples, 2.21%)</title><rect x="53.0484%" y="869" width="2.2074%" height="15" fill="rgb(225,31,38)"/><text x="53.2984%" y="879.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed [http_server_rust] (63 samples, 2.21%)</title><rect x="53.0484%" y="853" width="2.2074%" height="15" fill="rgb(250,208,3)"/><text x="53.2984%" y="863.50">&lt;..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key [http_server_rust] (8 samples, 0.28%)</title><rect x="54.9755%" y="837" width="0.2803%" height="15" fill="rgb(246,54,23)"/><text x="55.2255%" y="847.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace [http_server_rust] (6 samples, 0.21%)</title><rect x="55.0456%" y="821" width="0.2102%" height="15" fill="rgb(243,76,11)"/><text x="55.2956%" y="831.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek [http_server_rust] (4 samples, 0.14%)</title><rect x="55.1156%" y="805" width="0.1402%" height="15" fill="rgb(245,21,50)"/><text x="55.3656%" y="815.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek [http_server_rust] (4 samples, 0.14%)</title><rect x="55.1156%" y="789" width="0.1402%" height="15" fill="rgb(228,9,43)"/><text x="55.3656%" y="799.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek [http_server_rust] (4 samples, 0.14%)</title><rect x="55.1156%" y="773" width="0.1402%" height="15" fill="rgb(208,100,47)"/><text x="55.3656%" y="783.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str [http_server_rust] (11 samples, 0.39%)</title><rect x="55.5711%" y="773" width="0.3854%" height="15" fill="rgb(232,26,8)"/><text x="55.8211%" y="783.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes [http_server_rust] (10 samples, 0.35%)</title><rect x="55.6062%" y="757" width="0.3504%" height="15" fill="rgb(216,166,38)"/><text x="55.8562%" y="767.50"></text></g><g><title>serde_json::read::SliceRead::skip_to_escape [http_server_rust] (9 samples, 0.32%)</title><rect x="55.6412%" y="741" width="0.3153%" height="15" fill="rgb(251,202,51)"/><text x="55.8912%" y="751.50"></text></g><g><title>serde_json::read::SliceRead::skip_to_escape_slow [http_server_rust] (6 samples, 0.21%)</title><rect x="55.7463%" y="725" width="0.2102%" height="15" fill="rgb(254,216,34)"/><text x="55.9963%" y="735.50"></text></g><g><title>serde_json::read::is_escape [http_server_rust] (3 samples, 0.11%)</title><rect x="55.8514%" y="709" width="0.1051%" height="15" fill="rgb(251,32,27)"/><text x="56.1014%" y="719.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::with_capacity_in [http_server_rust] (4 samples, 0.14%)</title><rect x="56.1668%" y="645" width="0.1402%" height="15" fill="rgb(208,127,28)"/><text x="56.4168%" y="655.50"></text></g><g><title>inline alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in [http_server_rust] (3 samples, 0.11%)</title><rect x="56.2018%" y="629" width="0.1051%" height="15" fill="rgb(224,137,22)"/><text x="56.4518%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in [http_server_rust] (3 samples, 0.11%)</title><rect x="56.2018%" y="613" width="0.1051%" height="15" fill="rgb(254,70,32)"/><text x="56.4518%" y="623.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str [http_server_rust] (9 samples, 0.32%)</title><rect x="56.0266%" y="773" width="0.3153%" height="15" fill="rgb(229,75,37)"/><text x="56.2766%" y="783.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str [http_server_rust] (7 samples, 0.25%)</title><rect x="56.0967%" y="757" width="0.2453%" height="15" fill="rgb(252,64,23)"/><text x="56.3467%" y="767.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned [http_server_rust] (5 samples, 0.18%)</title><rect x="56.1668%" y="741" width="0.1752%" height="15" fill="rgb(232,162,48)"/><text x="56.4168%" y="751.50"></text></g><g><title>inline alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned [http_server_rust] (5 samples, 0.18%)</title><rect x="56.1668%" y="725" width="0.1752%" height="15" fill="rgb(246,160,12)"/><text x="56.4168%" y="735.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec [http_server_rust] (5 samples, 0.18%)</title><rect x="56.1668%" y="709" width="0.1752%" height="15" fill="rgb(247,166,0)"/><text x="56.4168%" y="719.50"></text></g><g><title>inline alloc::slice::&lt;impl [T]&gt;::to_vec_in [http_server_rust] (5 samples, 0.18%)</title><rect x="56.1668%" y="693" width="0.1752%" height="15" fill="rgb(249,219,21)"/><text x="56.4168%" y="703.50"></text></g><g><title>inline alloc::slice::hack::to_vec [http_server_rust] (5 samples, 0.18%)</title><rect x="56.1668%" y="677" width="0.1752%" height="15" fill="rgb(205,209,3)"/><text x="56.4168%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec [http_server_rust] (5 samples, 0.18%)</title><rect x="56.1668%" y="661" width="0.1752%" height="15" fill="rgb(243,44,1)"/><text x="56.4168%" y="671.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize [http_server_rust] (27 samples, 0.95%)</title><rect x="55.5011%" y="821" width="0.9460%" height="15" fill="rgb(206,159,16)"/><text x="55.7511%" y="831.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string [http_server_rust] (27 samples, 0.95%)</title><rect x="55.5011%" y="805" width="0.9460%" height="15" fill="rgb(244,77,30)"/><text x="55.7511%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str [http_server_rust] (27 samples, 0.95%)</title><rect x="55.5011%" y="789" width="0.9460%" height="15" fill="rgb(218,69,12)"/><text x="55.7511%" y="799.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace [http_server_rust] (3 samples, 0.11%)</title><rect x="56.3420%" y="773" width="0.1051%" height="15" fill="rgb(212,87,7)"/><text x="56.5920%" y="783.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::next_char [http_server_rust] (3 samples, 0.11%)</title><rect x="56.5522%" y="757" width="0.1051%" height="15" fill="rgb(245,114,25)"/><text x="56.8022%" y="767.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::next [http_server_rust] (3 samples, 0.11%)</title><rect x="56.5522%" y="741" width="0.1051%" height="15" fill="rgb(210,61,42)"/><text x="56.8022%" y="751.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::next [http_server_rust] (3 samples, 0.11%)</title><rect x="56.5522%" y="725" width="0.1051%" height="15" fill="rgb(211,52,33)"/><text x="56.8022%" y="735.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer [http_server_rust] (6 samples, 0.21%)</title><rect x="56.5172%" y="773" width="0.2102%" height="15" fill="rgb(234,58,33)"/><text x="56.7672%" y="783.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u32&gt;::deserialize [http_server_rust] (11 samples, 0.39%)</title><rect x="56.4471%" y="821" width="0.3854%" height="15" fill="rgb(220,115,36)"/><text x="56.6971%" y="831.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u32 [http_server_rust] (11 samples, 0.39%)</title><rect x="56.4471%" y="805" width="0.3854%" height="15" fill="rgb(243,153,54)"/><text x="56.6971%" y="815.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::deserialize_number [http_server_rust] (11 samples, 0.39%)</title><rect x="56.4471%" y="789" width="0.3854%" height="15" fill="rgb(251,47,18)"/><text x="56.6971%" y="799.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize [http_server_rust] (42 samples, 1.47%)</title><rect x="55.3959%" y="837" width="1.4716%" height="15" fill="rgb(242,102,42)"/><text x="55.6459%" y="847.50"></text></g><g><title>serde::de::MapAccess::next_value [http_server_rust] (52 samples, 1.82%)</title><rect x="55.2558%" y="869" width="1.8220%" height="15" fill="rgb(234,31,38)"/><text x="55.5058%" y="879.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed [http_server_rust] (51 samples, 1.79%)</title><rect x="55.2908%" y="853" width="1.7870%" height="15" fill="rgb(221,117,51)"/><text x="55.5408%" y="863.50">&lt;..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon [http_server_rust] (6 samples, 0.21%)</title><rect x="56.8676%" y="837" width="0.2102%" height="15" fill="rgb(212,20,18)"/><text x="57.1176%" y="847.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace [http_server_rust] (4 samples, 0.14%)</title><rect x="56.9376%" y="821" width="0.1402%" height="15" fill="rgb(245,133,36)"/><text x="57.1876%" y="831.50"></text></g><g><title>&lt;http_server_rust::connection_handler::_::&lt;impl serde::de::Deserialize for http_server_rust::connection_handler::JsonBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map [http_server_rust] (124 samples, 4.34%)</title><rect x="52.7680%" y="885" width="4.3448%" height="15" fill="rgb(212,6,19)"/><text x="53.0180%" y="895.50">&lt;http..</text></g><g><title>http_server_rust::connection_handler::_::&lt;impl serde::de::Deserialize for http_server_rust::connection_handler::JsonBody&gt;::deserialize [http_server_rust] (147 samples, 5.15%)</title><rect x="52.2425%" y="917" width="5.1507%" height="15" fill="rgb(218,1,36)"/><text x="52.4925%" y="927.50">http_s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct [http_server_rust] (141 samples, 4.94%)</title><rect x="52.4527%" y="901" width="4.9404%" height="15" fill="rgb(246,84,54)"/><text x="52.7027%" y="911.50">&lt;&amp;mut ..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace [http_server_rust] (4 samples, 0.14%)</title><rect x="57.2530%" y="885" width="0.1402%" height="15" fill="rgb(242,110,6)"/><text x="57.5030%" y="895.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek [http_server_rust] (3 samples, 0.11%)</title><rect x="57.2880%" y="869" width="0.1051%" height="15" fill="rgb(214,47,5)"/><text x="57.5380%" y="879.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::end [http_server_rust] (3 samples, 0.11%)</title><rect x="57.3931%" y="917" width="0.1051%" height="15" fill="rgb(218,159,25)"/><text x="57.6431%" y="927.50"></text></g><g><title>serde_json::de::from_trait [http_server_rust] (155 samples, 5.43%)</title><rect x="52.1374%" y="933" width="5.4310%" height="15" fill="rgb(215,211,28)"/><text x="52.3874%" y="943.50">serde_j..</text></g><g><title>serde_json::de::from_str [http_server_rust] (167 samples, 5.85%)</title><rect x="51.9622%" y="949" width="5.8514%" height="15" fill="rgb(238,59,32)"/><text x="52.2122%" y="959.50">serde_j..</text></g><g><title>serde_json::read::StrRead::new [http_server_rust] (7 samples, 0.25%)</title><rect x="57.5683%" y="933" width="0.2453%" height="15" fill="rgb(226,82,3)"/><text x="57.8183%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity [http_server_rust] (4 samples, 0.14%)</title><rect x="57.8486%" y="917" width="0.1402%" height="15" fill="rgb(240,164,32)"/><text x="58.0986%" y="927.50"></text></g><g><title>inline alloc::vec::Vec&lt;T,A&gt;::with_capacity_in [http_server_rust] (3 samples, 0.11%)</title><rect x="57.8837%" y="901" width="0.1051%" height="15" fill="rgb(232,46,7)"/><text x="58.1337%" y="911.50"></text></g><g><title>inline alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in [http_server_rust] (3 samples, 0.11%)</title><rect x="57.8837%" y="885" width="0.1051%" height="15" fill="rgb(229,129,53)"/><text x="58.1337%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in [http_server_rust] (3 samples, 0.11%)</title><rect x="57.8837%" y="869" width="0.1051%" height="15" fill="rgb(234,188,29)"/><text x="58.1337%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements [http_server_rust] (3 samples, 0.11%)</title><rect x="58.4093%" y="773" width="0.1051%" height="15" fill="rgb(246,141,4)"/><text x="58.6593%" y="783.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_struct [http_server_rust] (13 samples, 0.46%)</title><rect x="58.1289%" y="885" width="0.4555%" height="15" fill="rgb(229,23,39)"/><text x="58.3789%" y="895.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_map [http_server_rust] (13 samples, 0.46%)</title><rect x="58.1289%" y="869" width="0.4555%" height="15" fill="rgb(206,12,3)"/><text x="58.3789%" y="879.50"></text></g><g><title>serde_json::ser::Formatter::begin_object [http_server_rust] (11 samples, 0.39%)</title><rect x="58.1990%" y="853" width="0.3854%" height="15" fill="rgb(252,226,20)"/><text x="58.4490%" y="863.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (11 samples, 0.39%)</title><rect x="58.1990%" y="837" width="0.3854%" height="15" fill="rgb(216,123,35)"/><text x="58.4490%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (8 samples, 0.28%)</title><rect x="58.3041%" y="821" width="0.2803%" height="15" fill="rgb(212,68,40)"/><text x="58.5541%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (7 samples, 0.25%)</title><rect x="58.3392%" y="805" width="0.2453%" height="15" fill="rgb(254,125,32)"/><text x="58.5892%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (5 samples, 0.18%)</title><rect x="58.4093%" y="789" width="0.1752%" height="15" fill="rgb(253,97,22)"/><text x="58.6593%" y="799.50"></text></g><g><title>serde_json::ser::Formatter::end_object [http_server_rust] (5 samples, 0.18%)</title><rect x="58.6195%" y="853" width="0.1752%" height="15" fill="rgb(241,101,14)"/><text x="58.8695%" y="863.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (5 samples, 0.18%)</title><rect x="58.6195%" y="837" width="0.1752%" height="15" fill="rgb(238,103,29)"/><text x="58.8695%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (5 samples, 0.18%)</title><rect x="58.6195%" y="821" width="0.1752%" height="15" fill="rgb(233,195,47)"/><text x="58.8695%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (5 samples, 0.18%)</title><rect x="58.6195%" y="805" width="0.1752%" height="15" fill="rgb(246,218,30)"/><text x="58.8695%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (5 samples, 0.18%)</title><rect x="58.6195%" y="789" width="0.1752%" height="15" fill="rgb(219,145,47)"/><text x="58.8695%" y="799.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::end [http_server_rust] (6 samples, 0.21%)</title><rect x="58.6195%" y="885" width="0.2102%" height="15" fill="rgb(243,12,26)"/><text x="58.8695%" y="895.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end [http_server_rust] (6 samples, 0.21%)</title><rect x="58.6195%" y="869" width="0.2102%" height="15" fill="rgb(214,87,16)"/><text x="58.8695%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err [http_server_rust] (3 samples, 0.11%)</title><rect x="59.0750%" y="837" width="0.1051%" height="15" fill="rgb(208,99,42)"/><text x="59.3250%" y="847.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null [http_server_rust] (3 samples, 0.11%)</title><rect x="59.4954%" y="645" width="0.1051%" height="15" fill="rgb(253,99,2)"/><text x="59.7454%" y="655.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null::runtime [http_server_rust] (3 samples, 0.11%)</title><rect x="59.4954%" y="629" width="0.1051%" height="15" fill="rgb(220,168,23)"/><text x="59.7454%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements [http_server_rust] (5 samples, 0.18%)</title><rect x="59.4604%" y="693" width="0.1752%" height="15" fill="rgb(242,38,24)"/><text x="59.7104%" y="703.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (4 samples, 0.14%)</title><rect x="59.4954%" y="677" width="0.1402%" height="15" fill="rgb(225,182,9)"/><text x="59.7454%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (4 samples, 0.14%)</title><rect x="59.4954%" y="661" width="0.1402%" height="15" fill="rgb(243,178,37)"/><text x="59.7454%" y="671.50"></text></g><g><title>serde_json::ser::Formatter::begin_string [http_server_rust] (14 samples, 0.49%)</title><rect x="59.3903%" y="773" width="0.4905%" height="15" fill="rgb(232,139,19)"/><text x="59.6403%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (14 samples, 0.49%)</title><rect x="59.3903%" y="757" width="0.4905%" height="15" fill="rgb(225,201,24)"/><text x="59.6403%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (14 samples, 0.49%)</title><rect x="59.3903%" y="741" width="0.4905%" height="15" fill="rgb(221,47,46)"/><text x="59.6403%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (14 samples, 0.49%)</title><rect x="59.3903%" y="725" width="0.4905%" height="15" fill="rgb(249,23,13)"/><text x="59.6403%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (13 samples, 0.46%)</title><rect x="59.4254%" y="709" width="0.4555%" height="15" fill="rgb(219,9,5)"/><text x="59.6754%" y="719.50"></text></g><g><title>inline core::slice::iter::Iter&lt;T&gt;::as_slice [http_server_rust] (7 samples, 0.25%)</title><rect x="59.6356%" y="693" width="0.2453%" height="15" fill="rgb(254,171,16)"/><text x="59.8856%" y="703.50"></text></g><g><title>inline core::slice::iter::Iter&lt;T&gt;::make_slice [http_server_rust] (7 samples, 0.25%)</title><rect x="59.6356%" y="677" width="0.2453%" height="15" fill="rgb(230,171,20)"/><text x="59.8856%" y="687.50"></text></g><g><title>inline core::slice::raw::from_raw_parts [http_server_rust] (3 samples, 0.11%)</title><rect x="59.7758%" y="661" width="0.1051%" height="15" fill="rgb(210,71,41)"/><text x="60.0258%" y="671.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="59.7758%" y="645" width="0.1051%" height="15" fill="rgb(206,173,20)"/><text x="60.0258%" y="655.50"></text></g><g><title>serde_json::ser::Formatter::end_string [http_server_rust] (4 samples, 0.14%)</title><rect x="59.8809%" y="773" width="0.1402%" height="15" fill="rgb(233,88,34)"/><text x="60.1309%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (4 samples, 0.14%)</title><rect x="59.8809%" y="757" width="0.1402%" height="15" fill="rgb(223,209,46)"/><text x="60.1309%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (3 samples, 0.11%)</title><rect x="59.9159%" y="741" width="0.1051%" height="15" fill="rgb(250,43,18)"/><text x="60.1659%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (3 samples, 0.11%)</title><rect x="59.9159%" y="725" width="0.1051%" height="15" fill="rgb(208,13,10)"/><text x="60.1659%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (3 samples, 0.11%)</title><rect x="59.9159%" y="709" width="0.1051%" height="15" fill="rgb(212,200,36)"/><text x="60.1659%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements [http_server_rust] (4 samples, 0.14%)</title><rect x="60.3714%" y="677" width="0.1402%" height="15" fill="rgb(225,90,30)"/><text x="60.6214%" y="687.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (4 samples, 0.14%)</title><rect x="60.3714%" y="661" width="0.1402%" height="15" fill="rgb(236,182,39)"/><text x="60.6214%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (4 samples, 0.14%)</title><rect x="60.3714%" y="645" width="0.1402%" height="15" fill="rgb(212,144,35)"/><text x="60.6214%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize [http_server_rust] (41 samples, 1.44%)</title><rect x="59.1801%" y="837" width="1.4366%" height="15" fill="rgb(228,63,44)"/><text x="59.4301%" y="847.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str [http_server_rust] (39 samples, 1.37%)</title><rect x="59.2502%" y="821" width="1.3665%" height="15" fill="rgb(228,109,6)"/><text x="59.5002%" y="831.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str [http_server_rust] (39 samples, 1.37%)</title><rect x="59.2502%" y="805" width="1.3665%" height="15" fill="rgb(238,117,24)"/><text x="59.5002%" y="815.50"></text></g><g><title>serde_json::ser::format_escaped_str [http_server_rust] (38 samples, 1.33%)</title><rect x="59.2852%" y="789" width="1.3315%" height="15" fill="rgb(242,26,26)"/><text x="59.5352%" y="799.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents [http_server_rust] (17 samples, 0.60%)</title><rect x="60.0210%" y="773" width="0.5957%" height="15" fill="rgb(221,92,48)"/><text x="60.2710%" y="783.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment [http_server_rust] (9 samples, 0.32%)</title><rect x="60.3013%" y="757" width="0.3153%" height="15" fill="rgb(209,209,32)"/><text x="60.5513%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (7 samples, 0.25%)</title><rect x="60.3714%" y="741" width="0.2453%" height="15" fill="rgb(221,70,22)"/><text x="60.6214%" y="751.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (7 samples, 0.25%)</title><rect x="60.3714%" y="725" width="0.2453%" height="15" fill="rgb(248,145,5)"/><text x="60.6214%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (7 samples, 0.25%)</title><rect x="60.3714%" y="709" width="0.2453%" height="15" fill="rgb(226,116,26)"/><text x="60.6214%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (7 samples, 0.25%)</title><rect x="60.3714%" y="693" width="0.2453%" height="15" fill="rgb(244,5,17)"/><text x="60.6214%" y="703.50"></text></g><g><title>inline core::slice::iter::Iter&lt;T&gt;::as_slice [http_server_rust] (3 samples, 0.11%)</title><rect x="60.5116%" y="677" width="0.1051%" height="15" fill="rgb(252,159,33)"/><text x="60.7616%" y="687.50"></text></g><g><title>inline core::slice::iter::Iter&lt;T&gt;::make_slice [http_server_rust] (3 samples, 0.11%)</title><rect x="60.5116%" y="661" width="0.1051%" height="15" fill="rgb(206,71,0)"/><text x="60.7616%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr [http_server_rust] (3 samples, 0.11%)</title><rect x="60.5116%" y="645" width="0.1051%" height="15" fill="rgb(233,118,54)"/><text x="60.7616%" y="655.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key [http_server_rust] (52 samples, 1.82%)</title><rect x="59.0049%" y="853" width="1.8220%" height="15" fill="rgb(234,83,48)"/><text x="59.2549%" y="863.50">&lt;..</text></g><g><title>serde_json::ser::Formatter::begin_object_key [http_server_rust] (6 samples, 0.21%)</title><rect x="60.6167%" y="837" width="0.2102%" height="15" fill="rgb(228,3,54)"/><text x="60.8667%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (4 samples, 0.14%)</title><rect x="60.6868%" y="821" width="0.1402%" height="15" fill="rgb(226,155,13)"/><text x="60.9368%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (3 samples, 0.11%)</title><rect x="60.7218%" y="805" width="0.1051%" height="15" fill="rgb(241,28,37)"/><text x="60.9718%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (3 samples, 0.11%)</title><rect x="60.7218%" y="789" width="0.1051%" height="15" fill="rgb(233,93,10)"/><text x="60.9718%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements [http_server_rust] (3 samples, 0.11%)</title><rect x="61.1773%" y="709" width="0.1051%" height="15" fill="rgb(225,113,19)"/><text x="61.4273%" y="719.50"></text></g><g><title>serde_json::ser::Formatter::end_string [http_server_rust] (5 samples, 0.18%)</title><rect x="61.1423%" y="789" width="0.1752%" height="15" fill="rgb(241,2,18)"/><text x="61.3923%" y="799.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (5 samples, 0.18%)</title><rect x="61.1423%" y="773" width="0.1752%" height="15" fill="rgb(228,207,21)"/><text x="61.3923%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (5 samples, 0.18%)</title><rect x="61.1423%" y="757" width="0.1752%" height="15" fill="rgb(213,211,35)"/><text x="61.3923%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (4 samples, 0.14%)</title><rect x="61.1773%" y="741" width="0.1402%" height="15" fill="rgb(209,83,10)"/><text x="61.4273%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (4 samples, 0.14%)</title><rect x="61.1773%" y="725" width="0.1402%" height="15" fill="rgb(209,164,1)"/><text x="61.4273%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str [http_server_rust] (14 samples, 0.49%)</title><rect x="61.0722%" y="821" width="0.4905%" height="15" fill="rgb(213,184,43)"/><text x="61.3222%" y="831.50"></text></g><g><title>serde_json::ser::format_escaped_str [http_server_rust] (14 samples, 0.49%)</title><rect x="61.0722%" y="805" width="0.4905%" height="15" fill="rgb(231,61,34)"/><text x="61.3222%" y="815.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents [http_server_rust] (7 samples, 0.25%)</title><rect x="61.3174%" y="789" width="0.2453%" height="15" fill="rgb(235,75,3)"/><text x="61.5674%" y="799.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment [http_server_rust] (4 samples, 0.14%)</title><rect x="61.4226%" y="773" width="0.1402%" height="15" fill="rgb(220,106,47)"/><text x="61.6726%" y="783.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (4 samples, 0.14%)</title><rect x="61.4226%" y="757" width="0.1402%" height="15" fill="rgb(210,196,33)"/><text x="61.6726%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (4 samples, 0.14%)</title><rect x="61.4226%" y="741" width="0.1402%" height="15" fill="rgb(229,154,42)"/><text x="61.6726%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (4 samples, 0.14%)</title><rect x="61.4226%" y="725" width="0.1402%" height="15" fill="rgb(228,114,26)"/><text x="61.6726%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (4 samples, 0.14%)</title><rect x="61.4226%" y="709" width="0.1402%" height="15" fill="rgb(208,144,1)"/><text x="61.6726%" y="719.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize [http_server_rust] (18 samples, 0.63%)</title><rect x="61.0021%" y="837" width="0.6307%" height="15" fill="rgb(239,112,37)"/><text x="61.2521%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err [http_server_rust] (3 samples, 0.11%)</title><rect x="61.6678%" y="805" width="0.1051%" height="15" fill="rgb(210,96,50)"/><text x="61.9178%" y="815.50"></text></g><g><title>itoa::Buffer::format [http_server_rust] (6 samples, 0.21%)</title><rect x="61.8080%" y="789" width="0.2102%" height="15" fill="rgb(222,178,2)"/><text x="62.0580%" y="799.50"></text></g><g><title>itoa::&lt;impl itoa::private::Sealed for u32&gt;::write [http_server_rust] (3 samples, 0.11%)</title><rect x="61.9131%" y="773" width="0.1051%" height="15" fill="rgb(226,74,18)"/><text x="62.1631%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements [http_server_rust] (4 samples, 0.14%)</title><rect x="62.0182%" y="725" width="0.1402%" height="15" fill="rgb(225,67,54)"/><text x="62.2682%" y="735.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (3 samples, 0.11%)</title><rect x="62.0533%" y="709" width="0.1051%" height="15" fill="rgb(251,92,32)"/><text x="62.3033%" y="719.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize [http_server_rust] (16 samples, 0.56%)</title><rect x="61.6328%" y="837" width="0.5606%" height="15" fill="rgb(228,149,22)"/><text x="61.8828%" y="847.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u32 [http_server_rust] (15 samples, 0.53%)</title><rect x="61.6678%" y="821" width="0.5256%" height="15" fill="rgb(243,54,13)"/><text x="61.9178%" y="831.50"></text></g><g><title>serde_json::ser::Formatter::write_u32 [http_server_rust] (12 samples, 0.42%)</title><rect x="61.7730%" y="805" width="0.4205%" height="15" fill="rgb(243,180,28)"/><text x="62.0230%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (5 samples, 0.18%)</title><rect x="62.0182%" y="789" width="0.1752%" height="15" fill="rgb(208,167,24)"/><text x="62.2682%" y="799.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (5 samples, 0.18%)</title><rect x="62.0182%" y="773" width="0.1752%" height="15" fill="rgb(245,73,45)"/><text x="62.2682%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (5 samples, 0.18%)</title><rect x="62.0182%" y="757" width="0.1752%" height="15" fill="rgb(237,203,48)"/><text x="62.2682%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (5 samples, 0.18%)</title><rect x="62.0182%" y="741" width="0.1752%" height="15" fill="rgb(211,197,16)"/><text x="62.2682%" y="751.50"></text></g><g><title>serde_json::ser::to_vec [http_server_rust] (131 samples, 4.59%)</title><rect x="57.8486%" y="933" width="4.5900%" height="15" fill="rgb(243,99,51)"/><text x="58.0986%" y="943.50">serde..</text></g><g><title>serde_json::ser::to_writer [http_server_rust] (127 samples, 4.45%)</title><rect x="57.9888%" y="917" width="4.4499%" height="15" fill="rgb(215,123,29)"/><text x="58.2388%" y="927.50">serde..</text></g><g><title>http_server_rust::connection_handler::_::&lt;impl serde::ser::Serialize for http_server_rust::connection_handler::JsonBody&gt;::serialize [http_server_rust] (127 samples, 4.45%)</title><rect x="57.9888%" y="901" width="4.4499%" height="15" fill="rgb(239,186,37)"/><text x="58.2388%" y="911.50">http_..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field [http_server_rust] (103 samples, 3.61%)</title><rect x="58.8297%" y="885" width="3.6090%" height="15" fill="rgb(252,136,39)"/><text x="59.0797%" y="895.50">&lt;ser..</text></g><g><title>serde::ser::SerializeMap::serialize_entry [http_server_rust] (100 samples, 3.50%)</title><rect x="58.9348%" y="869" width="3.5039%" height="15" fill="rgb(223,213,32)"/><text x="59.1848%" y="879.50">ser..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value [http_server_rust] (46 samples, 1.61%)</title><rect x="60.8269%" y="853" width="1.6118%" height="15" fill="rgb(233,115,5)"/><text x="61.0769%" y="863.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value [http_server_rust] (7 samples, 0.25%)</title><rect x="62.1934%" y="837" width="0.2453%" height="15" fill="rgb(207,226,44)"/><text x="62.4434%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all [http_server_rust] (7 samples, 0.25%)</title><rect x="62.1934%" y="821" width="0.2453%" height="15" fill="rgb(208,126,0)"/><text x="62.4434%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all [http_server_rust] (6 samples, 0.21%)</title><rect x="62.2285%" y="805" width="0.2102%" height="15" fill="rgb(244,66,21)"/><text x="62.4785%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice [http_server_rust] (6 samples, 0.21%)</title><rect x="62.2285%" y="789" width="0.2102%" height="15" fill="rgb(222,97,12)"/><text x="62.4785%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend [http_server_rust] (6 samples, 0.21%)</title><rect x="62.2285%" y="773" width="0.2102%" height="15" fill="rgb(219,213,19)"/><text x="62.4785%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements [http_server_rust] (6 samples, 0.21%)</title><rect x="62.2285%" y="757" width="0.2102%" height="15" fill="rgb(252,169,30)"/><text x="62.4785%" y="767.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (4 samples, 0.14%)</title><rect x="62.2985%" y="741" width="0.1402%" height="15" fill="rgb(206,32,51)"/><text x="62.5485%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (4 samples, 0.14%)</title><rect x="62.2985%" y="725" width="0.1402%" height="15" fill="rgb(250,172,42)"/><text x="62.5485%" y="735.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null [http_server_rust] (3 samples, 0.11%)</title><rect x="62.3336%" y="709" width="0.1051%" height="15" fill="rgb(209,34,43)"/><text x="62.5836%" y="719.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null::runtime [http_server_rust] (3 samples, 0.11%)</title><rect x="62.3336%" y="693" width="0.1051%" height="15" fill="rgb(223,11,35)"/><text x="62.5836%" y="703.50"></text></g><g><title>inline core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to [http_server_rust] (3 samples, 0.11%)</title><rect x="62.3336%" y="677" width="0.1051%" height="15" fill="rgb(251,219,26)"/><text x="62.5836%" y="687.50"></text></g><g><title>serde_json::ser::to_string [http_server_rust] (133 samples, 4.66%)</title><rect x="57.8136%" y="949" width="4.6601%" height="15" fill="rgb(231,119,3)"/><text x="58.0636%" y="959.50">serde..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish [http_server_rust] (7 samples, 0.25%)</title><rect x="62.6489%" y="869" width="0.2453%" height="15" fill="rgb(216,97,11)"/><text x="62.8989%" y="879.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish [http_server_rust] (6 samples, 0.21%)</title><rect x="62.6840%" y="853" width="0.2102%" height="15" fill="rgb(223,59,9)"/><text x="62.9340%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish [http_server_rust] (6 samples, 0.21%)</title><rect x="62.6840%" y="837" width="0.2102%" height="15" fill="rgb(233,93,31)"/><text x="62.9340%" y="847.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds [http_server_rust] (3 samples, 0.11%)</title><rect x="62.7891%" y="821" width="0.1051%" height="15" fill="rgb(239,81,33)"/><text x="63.0391%" y="831.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher [http_server_rust] (3 samples, 0.11%)</title><rect x="62.8942%" y="869" width="0.1051%" height="15" fill="rgb(213,120,34)"/><text x="63.1442%" y="879.50"></text></g><g><title>inline core::hash::sip::SipHasher13::new_with_keys [http_server_rust] (3 samples, 0.11%)</title><rect x="62.8942%" y="853" width="0.1051%" height="15" fill="rgb(243,49,53)"/><text x="63.1442%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write [http_server_rust] (4 samples, 0.14%)</title><rect x="63.1044%" y="789" width="0.1402%" height="15" fill="rgb(247,216,33)"/><text x="63.3544%" y="799.50"></text></g><g><title>inline hashbrown::map::make_hash [http_server_rust] (21 samples, 0.74%)</title><rect x="62.5788%" y="901" width="0.7358%" height="15" fill="rgb(226,26,14)"/><text x="62.8288%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one [http_server_rust] (21 samples, 0.74%)</title><rect x="62.5788%" y="885" width="0.7358%" height="15" fill="rgb(215,49,53)"/><text x="62.8288%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash [http_server_rust] (9 samples, 0.32%)</title><rect x="62.9993%" y="869" width="0.3153%" height="15" fill="rgb(245,162,40)"/><text x="63.2493%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash [http_server_rust] (8 samples, 0.28%)</title><rect x="63.0343%" y="853" width="0.2803%" height="15" fill="rgb(229,68,17)"/><text x="63.2843%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str [http_server_rust] (6 samples, 0.21%)</title><rect x="63.1044%" y="837" width="0.2102%" height="15" fill="rgb(213,182,10)"/><text x="63.3544%" y="847.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str [http_server_rust] (6 samples, 0.21%)</title><rect x="63.1044%" y="821" width="0.2102%" height="15" fill="rgb(245,125,30)"/><text x="63.3544%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str [http_server_rust] (6 samples, 0.21%)</title><rect x="63.1044%" y="805" width="0.2102%" height="15" fill="rgb(232,202,2)"/><text x="63.3544%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 [http_server_rust] (3 samples, 0.11%)</title><rect x="63.5249%" y="837" width="0.1051%" height="15" fill="rgb(237,140,51)"/><text x="63.7749%" y="847.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get [http_server_rust] (35 samples, 1.23%)</title><rect x="62.4737%" y="949" width="1.2263%" height="15" fill="rgb(236,157,25)"/><text x="62.7237%" y="959.50"></text></g><g><title>inline hashbrown::map::HashMap&lt;K,V,S,A&gt;::get [http_server_rust] (34 samples, 1.19%)</title><rect x="62.5088%" y="933" width="1.1913%" height="15" fill="rgb(219,209,0)"/><text x="62.7588%" y="943.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner [http_server_rust] (34 samples, 1.19%)</title><rect x="62.5088%" y="917" width="1.1913%" height="15" fill="rgb(240,116,54)"/><text x="62.7588%" y="927.50"></text></g><g><title>inline hashbrown::raw::RawTable&lt;T,A&gt;::get [http_server_rust] (11 samples, 0.39%)</title><rect x="63.3146%" y="901" width="0.3854%" height="15" fill="rgb(216,10,36)"/><text x="63.5646%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find [http_server_rust] (11 samples, 0.39%)</title><rect x="63.3146%" y="885" width="0.3854%" height="15" fill="rgb(222,72,44)"/><text x="63.5646%" y="895.50"></text></g><g><title>inline hashbrown::raw::RawTableInner::find_inner [http_server_rust] (10 samples, 0.35%)</title><rect x="63.3497%" y="869" width="0.3504%" height="15" fill="rgb(232,159,9)"/><text x="63.5997%" y="879.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (6 samples, 0.21%)</title><rect x="63.4898%" y="853" width="0.2102%" height="15" fill="rgb(210,39,32)"/><text x="63.7398%" y="863.50"></text></g><g><title>inline hashbrown::raw::Bucket&lt;T&gt;::write [http_server_rust] (3 samples, 0.11%)</title><rect x="63.8402%" y="901" width="0.1051%" height="15" fill="rgb(216,194,45)"/><text x="64.0902%" y="911.50"></text></g><g><title>inline core::ptr::mut_ptr::&lt;impl *mut T&gt;::write [http_server_rust] (3 samples, 0.11%)</title><rect x="63.8402%" y="885" width="0.1051%" height="15" fill="rgb(218,18,35)"/><text x="64.0902%" y="895.50"></text></g><g><title>inline core::ptr::write [http_server_rust] (3 samples, 0.11%)</title><rect x="63.8402%" y="869" width="0.1051%" height="15" fill="rgb(207,83,51)"/><text x="64.0902%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot [http_server_rust] (8 samples, 0.28%)</title><rect x="63.7351%" y="917" width="0.2803%" height="15" fill="rgb(225,63,43)"/><text x="63.9851%" y="927.50"></text></g><g><title>inline core::cmp::Ord::max [http_server_rust] (3 samples, 0.11%)</title><rect x="64.2957%" y="837" width="0.1051%" height="15" fill="rgb(207,57,36)"/><text x="64.5457%" y="847.50"></text></g><g><title>core::cmp::max_by [http_server_rust] (3 samples, 0.11%)</title><rect x="64.2957%" y="821" width="0.1051%" height="15" fill="rgb(216,99,33)"/><text x="64.5457%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; [http_server_rust] (5 samples, 0.18%)</title><rect x="64.5410%" y="821" width="0.1752%" height="15" fill="rgb(225,42,16)"/><text x="64.7910%" y="831.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop [http_server_rust] (5 samples, 0.18%)</title><rect x="64.5410%" y="805" width="0.1752%" height="15" fill="rgb(220,201,45)"/><text x="64.7910%" y="815.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} [http_server_rust] (4 samples, 0.14%)</title><rect x="64.5760%" y="789" width="0.1402%" height="15" fill="rgb(225,33,4)"/><text x="64.8260%" y="799.50"></text></g><g><title>inline hashbrown::raw::RawTableInner::free_buckets [http_server_rust] (3 samples, 0.11%)</title><rect x="64.6111%" y="773" width="0.1051%" height="15" fill="rgb(224,33,50)"/><text x="64.8611%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate [http_server_rust] (3 samples, 0.11%)</title><rect x="64.6111%" y="757" width="0.1051%" height="15" fill="rgb(246,198,51)"/><text x="64.8611%" y="767.50"></text></g><g><title>inline alloc::alloc::dealloc [http_server_rust] (3 samples, 0.11%)</title><rect x="64.6111%" y="741" width="0.1051%" height="15" fill="rgb(205,22,4)"/><text x="64.8611%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish [http_server_rust] (17 samples, 0.60%)</title><rect x="64.9264%" y="757" width="0.5957%" height="15" fill="rgb(206,3,8)"/><text x="65.1764%" y="767.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish [http_server_rust] (17 samples, 0.60%)</title><rect x="64.9264%" y="741" width="0.5957%" height="15" fill="rgb(251,23,15)"/><text x="65.1764%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish [http_server_rust] (16 samples, 0.56%)</title><rect x="64.9615%" y="725" width="0.5606%" height="15" fill="rgb(252,88,28)"/><text x="65.2115%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds [http_server_rust] (14 samples, 0.49%)</title><rect x="65.0315%" y="709" width="0.4905%" height="15" fill="rgb(212,127,14)"/><text x="65.2815%" y="719.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher [http_server_rust] (4 samples, 0.14%)</title><rect x="65.5221%" y="757" width="0.1402%" height="15" fill="rgb(247,145,37)"/><text x="65.7721%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write [http_server_rust] (5 samples, 0.18%)</title><rect x="65.6973%" y="661" width="0.1752%" height="15" fill="rgb(209,117,53)"/><text x="65.9473%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le [http_server_rust] (4 samples, 0.14%)</title><rect x="65.7323%" y="645" width="0.1402%" height="15" fill="rgb(212,90,42)"/><text x="65.9823%" y="655.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (3 samples, 0.11%)</title><rect x="65.7673%" y="629" width="0.1051%" height="15" fill="rgb(218,164,37)"/><text x="66.0173%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="65.7673%" y="613" width="0.1051%" height="15" fill="rgb(246,65,34)"/><text x="66.0173%" y="623.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} [http_server_rust] (34 samples, 1.19%)</title><rect x="64.7512%" y="805" width="1.1913%" height="15" fill="rgb(231,100,33)"/><text x="65.0012%" y="815.50"></text></g><g><title>inline hashbrown::map::make_hash [http_server_rust] (31 samples, 1.09%)</title><rect x="64.8563%" y="789" width="1.0862%" height="15" fill="rgb(228,126,14)"/><text x="65.1063%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one [http_server_rust] (30 samples, 1.05%)</title><rect x="64.8914%" y="773" width="1.0512%" height="15" fill="rgb(215,173,21)"/><text x="65.1414%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash [http_server_rust] (8 samples, 0.28%)</title><rect x="65.6622%" y="757" width="0.2803%" height="15" fill="rgb(210,6,40)"/><text x="65.9122%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash [http_server_rust] (8 samples, 0.28%)</title><rect x="65.6622%" y="741" width="0.2803%" height="15" fill="rgb(212,48,18)"/><text x="65.9122%" y="751.50"></text></g><g><title>inline core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash [http_server_rust] (7 samples, 0.25%)</title><rect x="65.6973%" y="725" width="0.2453%" height="15" fill="rgb(230,214,11)"/><text x="65.9473%" y="735.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str [http_server_rust] (7 samples, 0.25%)</title><rect x="65.6973%" y="709" width="0.2453%" height="15" fill="rgb(254,105,39)"/><text x="65.9473%" y="719.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str [http_server_rust] (7 samples, 0.25%)</title><rect x="65.6973%" y="693" width="0.2453%" height="15" fill="rgb(245,158,5)"/><text x="65.9473%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str [http_server_rust] (7 samples, 0.25%)</title><rect x="65.6973%" y="677" width="0.2453%" height="15" fill="rgb(249,208,11)"/><text x="65.9473%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} [http_server_rust] (37 samples, 1.30%)</title><rect x="64.7162%" y="821" width="1.2964%" height="15" fill="rgb(210,39,28)"/><text x="64.9662%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group [http_server_rust] (5 samples, 0.18%)</title><rect x="66.0477%" y="789" width="0.1752%" height="15" fill="rgb(211,56,53)"/><text x="66.2977%" y="799.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::load [http_server_rust] (5 samples, 0.18%)</title><rect x="66.2228%" y="789" width="0.1752%" height="15" fill="rgb(226,201,30)"/><text x="66.4728%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 [http_server_rust] (4 samples, 0.14%)</title><rect x="66.2579%" y="773" width="0.1402%" height="15" fill="rgb(239,101,34)"/><text x="66.5079%" y="783.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (3 samples, 0.11%)</title><rect x="66.2929%" y="757" width="0.1051%" height="15" fill="rgb(226,209,5)"/><text x="66.5429%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="66.2929%" y="741" width="0.1051%" height="15" fill="rgb(250,105,47)"/><text x="66.5429%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot [http_server_rust] (12 samples, 0.42%)</title><rect x="66.0126%" y="821" width="0.4205%" height="15" fill="rgb(230,72,3)"/><text x="66.2626%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot [http_server_rust] (11 samples, 0.39%)</title><rect x="66.0477%" y="805" width="0.3854%" height="15" fill="rgb(232,218,39)"/><text x="66.2977%" y="815.50"></text></g><g><title>inline hashbrown::raw::RawTableInner::full_buckets_indices [http_server_rust] (3 samples, 0.11%)</title><rect x="66.5732%" y="821" width="0.1051%" height="15" fill="rgb(248,166,6)"/><text x="66.8232%" y="831.50"></text></g><g><title>__libc_malloc [libc-2.31.so] (3 samples, 0.11%)</title><rect x="67.1689%" y="709" width="0.1051%" height="15" fill="rgb(247,89,20)"/><text x="67.4189%" y="719.50"></text></g><g><title>alloc::alloc::alloc [http_server_rust] (9 samples, 0.32%)</title><rect x="67.0988%" y="725" width="0.3153%" height="15" fill="rgb(248,130,54)"/><text x="67.3488%" y="735.50"></text></g><g><title>inline core::ptr::read_volatile [http_server_rust] (3 samples, 0.11%)</title><rect x="67.3090%" y="709" width="0.1051%" height="15" fill="rgb(234,196,4)"/><text x="67.5590%" y="719.50"></text></g><g><title>inline hashbrown::raw::alloc::inner::do_alloc [http_server_rust] (14 samples, 0.49%)</title><rect x="66.9587%" y="773" width="0.4905%" height="15" fill="rgb(250,143,31)"/><text x="67.2087%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate [http_server_rust] (12 samples, 0.42%)</title><rect x="67.0287%" y="757" width="0.4205%" height="15" fill="rgb(211,110,34)"/><text x="67.2787%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl [http_server_rust] (12 samples, 0.42%)</title><rect x="67.0287%" y="741" width="0.4205%" height="15" fill="rgb(215,124,48)"/><text x="67.2787%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized [http_server_rust] (20 samples, 0.70%)</title><rect x="66.7835%" y="789" width="0.7008%" height="15" fill="rgb(216,46,13)"/><text x="67.0335%" y="799.50"></text></g><g><title>inline hashbrown::control::tag::TagSliceExt::fill_empty [http_server_rust] (3 samples, 0.11%)</title><rect x="67.5543%" y="789" width="0.1051%" height="15" fill="rgb(205,184,25)"/><text x="67.8043%" y="799.50"></text></g><g><title>inline &lt;[hashbrown::control::tag::Tag] as hashbrown::control::tag::TagSliceExt&gt;::fill_tag [http_server_rust] (3 samples, 0.11%)</title><rect x="67.5543%" y="773" width="0.1051%" height="15" fill="rgb(228,1,10)"/><text x="67.8043%" y="783.50"></text></g><g><title>inline core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes [http_server_rust] (3 samples, 0.11%)</title><rect x="67.5543%" y="757" width="0.1051%" height="15" fill="rgb(213,116,27)"/><text x="67.8043%" y="767.50"></text></g><g><title>inline core::intrinsics::write_bytes [http_server_rust] (3 samples, 0.11%)</title><rect x="67.5543%" y="741" width="0.1051%" height="15" fill="rgb(241,95,50)"/><text x="67.8043%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity [http_server_rust] (29 samples, 1.02%)</title><rect x="66.7134%" y="805" width="1.0161%" height="15" fill="rgb(238,48,32)"/><text x="66.9634%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve [http_server_rust] (106 samples, 3.71%)</title><rect x="64.1205%" y="885" width="3.7141%" height="15" fill="rgb(235,113,49)"/><text x="64.3705%" y="895.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash [http_server_rust] (104 samples, 3.64%)</title><rect x="64.1906%" y="869" width="3.6440%" height="15" fill="rgb(205,127,43)"/><text x="64.4406%" y="879.50">hash..</text></g><g><title>inline hashbrown::raw::RawTableInner::reserve_rehash_inner [http_server_rust] (101 samples, 3.54%)</title><rect x="64.2957%" y="853" width="3.5389%" height="15" fill="rgb(250,162,2)"/><text x="64.5457%" y="863.50">inl..</text></g><g><title>inline hashbrown::raw::RawTableInner::resize_inner [http_server_rust] (98 samples, 3.43%)</title><rect x="64.4008%" y="837" width="3.4338%" height="15" fill="rgb(220,13,41)"/><text x="64.6508%" y="847.50">inl..</text></g><g><title>inline hashbrown::raw::RawTableInner::prepare_resize [http_server_rust] (33 samples, 1.16%)</title><rect x="66.6783%" y="821" width="1.1563%" height="15" fill="rgb(249,221,25)"/><text x="66.9283%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group [http_server_rust] (3 samples, 0.11%)</title><rect x="67.9047%" y="869" width="0.1051%" height="15" fill="rgb(215,208,19)"/><text x="68.1547%" y="879.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::load [http_server_rust] (12 samples, 0.42%)</title><rect x="68.0799%" y="869" width="0.4205%" height="15" fill="rgb(236,175,2)"/><text x="68.3299%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 [http_server_rust] (10 samples, 0.35%)</title><rect x="68.1500%" y="853" width="0.3504%" height="15" fill="rgb(241,52,2)"/><text x="68.4000%" y="863.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (7 samples, 0.25%)</title><rect x="68.2551%" y="837" width="0.2453%" height="15" fill="rgb(248,140,14)"/><text x="68.5051%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (6 samples, 0.21%)</title><rect x="68.2901%" y="821" width="0.2102%" height="15" fill="rgb(253,22,42)"/><text x="68.5401%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 [http_server_rust] (3 samples, 0.11%)</title><rect x="68.5704%" y="837" width="0.1051%" height="15" fill="rgb(234,61,47)"/><text x="68.8204%" y="847.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_empty [http_server_rust] (9 samples, 0.32%)</title><rect x="68.5004%" y="869" width="0.3153%" height="15" fill="rgb(208,226,15)"/><text x="68.7504%" y="879.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (9 samples, 0.32%)</title><rect x="68.5004%" y="853" width="0.3153%" height="15" fill="rgb(217,221,4)"/><text x="68.7504%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 [http_server_rust] (4 samples, 0.14%)</title><rect x="68.6755%" y="837" width="0.1402%" height="15" fill="rgb(212,174,34)"/><text x="68.9255%" y="847.50"></text></g><g><title>inline core::core_arch::x86::sse2::_mm_set_epi8 [http_server_rust] (4 samples, 0.14%)</title><rect x="68.6755%" y="821" width="0.1402%" height="15" fill="rgb(253,83,4)"/><text x="68.9255%" y="831.50"></text></g><g><title>inline hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot [http_server_rust] (153 samples, 5.36%)</title><rect x="64.0154%" y="917" width="5.3609%" height="15" fill="rgb(250,195,49)"/><text x="64.2654%" y="927.50">inline ..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot [http_server_rust] (152 samples, 5.33%)</title><rect x="64.0505%" y="901" width="5.3259%" height="15" fill="rgb(241,192,25)"/><text x="64.3005%" y="911.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner [http_server_rust] (44 samples, 1.54%)</title><rect x="67.8346%" y="885" width="1.5417%" height="15" fill="rgb(208,124,10)"/><text x="68.0846%" y="895.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (16 samples, 0.56%)</title><rect x="68.8157%" y="869" width="0.5606%" height="15" fill="rgb(222,33,0)"/><text x="69.0657%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 [http_server_rust] (8 samples, 0.28%)</title><rect x="69.0960%" y="853" width="0.2803%" height="15" fill="rgb(234,209,28)"/><text x="69.3460%" y="863.50"></text></g><g><title>inline core::core_arch::x86::sse2::_mm_set_epi8 [http_server_rust] (8 samples, 0.28%)</title><rect x="69.0960%" y="837" width="0.2803%" height="15" fill="rgb(224,11,23)"/><text x="69.3460%" y="847.50"></text></g><g><title>inline core::core_arch::simd::i8x16::new [http_server_rust] (7 samples, 0.25%)</title><rect x="69.1310%" y="821" width="0.2453%" height="15" fill="rgb(232,99,1)"/><text x="69.3810%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds [http_server_rust] (4 samples, 0.14%)</title><rect x="69.6216%" y="837" width="0.1402%" height="15" fill="rgb(237,95,45)"/><text x="69.8716%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish [http_server_rust] (16 samples, 0.56%)</title><rect x="69.4114%" y="885" width="0.5606%" height="15" fill="rgb(208,109,11)"/><text x="69.6614%" y="895.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish [http_server_rust] (15 samples, 0.53%)</title><rect x="69.4464%" y="869" width="0.5256%" height="15" fill="rgb(216,190,48)"/><text x="69.6964%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish [http_server_rust] (15 samples, 0.53%)</title><rect x="69.4464%" y="853" width="0.5256%" height="15" fill="rgb(251,171,36)"/><text x="69.6964%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds [http_server_rust] (6 samples, 0.21%)</title><rect x="69.7617%" y="837" width="0.2102%" height="15" fill="rgb(230,62,22)"/><text x="70.0117%" y="847.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher [http_server_rust] (7 samples, 0.25%)</title><rect x="69.9720%" y="885" width="0.2453%" height="15" fill="rgb(225,114,35)"/><text x="70.2220%" y="895.50"></text></g><g><title>inline core::hash::sip::SipHasher13::new_with_keys [http_server_rust] (5 samples, 0.18%)</title><rect x="70.0420%" y="869" width="0.1752%" height="15" fill="rgb(215,118,42)"/><text x="70.2920%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds [http_server_rust] (3 samples, 0.11%)</title><rect x="70.2873%" y="773" width="0.1051%" height="15" fill="rgb(243,119,21)"/><text x="70.5373%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le [http_server_rust] (8 samples, 0.28%)</title><rect x="70.3924%" y="773" width="0.2803%" height="15" fill="rgb(252,177,53)"/><text x="70.6424%" y="783.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (8 samples, 0.28%)</title><rect x="70.3924%" y="757" width="0.2803%" height="15" fill="rgb(237,209,29)"/><text x="70.6424%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (8 samples, 0.28%)</title><rect x="70.3924%" y="741" width="0.2803%" height="15" fill="rgb(212,65,23)"/><text x="70.6424%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write [http_server_rust] (14 samples, 0.49%)</title><rect x="70.2873%" y="789" width="0.4905%" height="15" fill="rgb(230,222,46)"/><text x="70.5373%" y="799.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (3 samples, 0.11%)</title><rect x="70.6727%" y="773" width="0.1051%" height="15" fill="rgb(215,135,32)"/><text x="70.9227%" y="783.50"></text></g><g><title>core::hash::sip::u8to64_le [http_server_rust] (4 samples, 0.14%)</title><rect x="70.8479%" y="757" width="0.1402%" height="15" fill="rgb(246,101,22)"/><text x="71.0979%" y="767.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert [http_server_rust] (212 samples, 7.43%)</title><rect x="63.7001%" y="949" width="7.4282%" height="15" fill="rgb(206,107,13)"/><text x="63.9501%" y="959.50">std::colle..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert [http_server_rust] (212 samples, 7.43%)</title><rect x="63.7001%" y="933" width="7.4282%" height="15" fill="rgb(250,100,44)"/><text x="63.9501%" y="943.50">hashbrown:..</text></g><g><title>inline hashbrown::map::make_hash [http_server_rust] (50 samples, 1.75%)</title><rect x="69.3763%" y="917" width="1.7519%" height="15" fill="rgb(231,147,38)"/><text x="69.6263%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one [http_server_rust] (50 samples, 1.75%)</title><rect x="69.3763%" y="901" width="1.7519%" height="15" fill="rgb(229,8,40)"/><text x="69.6263%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash [http_server_rust] (26 samples, 0.91%)</title><rect x="70.2172%" y="885" width="0.9110%" height="15" fill="rgb(221,135,30)"/><text x="70.4672%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash [http_server_rust] (26 samples, 0.91%)</title><rect x="70.2172%" y="869" width="0.9110%" height="15" fill="rgb(249,193,18)"/><text x="70.4672%" y="879.50"></text></g><g><title>inline core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash [http_server_rust] (24 samples, 0.84%)</title><rect x="70.2873%" y="853" width="0.8409%" height="15" fill="rgb(209,133,39)"/><text x="70.5373%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str [http_server_rust] (24 samples, 0.84%)</title><rect x="70.2873%" y="837" width="0.8409%" height="15" fill="rgb(232,100,14)"/><text x="70.5373%" y="847.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str [http_server_rust] (24 samples, 0.84%)</title><rect x="70.2873%" y="821" width="0.8409%" height="15" fill="rgb(224,185,1)"/><text x="70.5373%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str [http_server_rust] (24 samples, 0.84%)</title><rect x="70.2873%" y="805" width="0.8409%" height="15" fill="rgb(223,139,8)"/><text x="70.5373%" y="815.50"></text></g><g><title>inline core::hash::Hasher::write_u8 [http_server_rust] (10 samples, 0.35%)</title><rect x="70.7779%" y="789" width="0.3504%" height="15" fill="rgb(232,213,38)"/><text x="71.0279%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write [http_server_rust] (10 samples, 0.35%)</title><rect x="70.7779%" y="773" width="0.3504%" height="15" fill="rgb(207,94,22)"/><text x="71.0279%" y="783.50"></text></g><g><title>inline core::cmp::min [http_server_rust] (4 samples, 0.14%)</title><rect x="70.9881%" y="757" width="0.1402%" height="15" fill="rgb(219,183,54)"/><text x="71.2381%" y="767.50"></text></g><g><title>inline core::cmp::Ord::min [http_server_rust] (4 samples, 0.14%)</title><rect x="70.9881%" y="741" width="0.1402%" height="15" fill="rgb(216,185,54)"/><text x="71.2381%" y="751.50"></text></g><g><title>core::cmp::min_by [http_server_rust] (4 samples, 0.14%)</title><rect x="70.9881%" y="725" width="0.1402%" height="15" fill="rgb(254,217,39)"/><text x="71.2381%" y="735.50"></text></g><g><title>inline &lt;std::hash::random::RandomState as core::default::Default&gt;::default [http_server_rust] (5 samples, 0.18%)</title><rect x="71.1983%" y="917" width="0.1752%" height="15" fill="rgb(240,178,23)"/><text x="71.4483%" y="927.50"></text></g><g><title>inline std::hash::random::RandomState::new [http_server_rust] (5 samples, 0.18%)</title><rect x="71.1983%" y="901" width="0.1752%" height="15" fill="rgb(218,11,47)"/><text x="71.4483%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with [http_server_rust] (5 samples, 0.18%)</title><rect x="71.1983%" y="885" width="0.1752%" height="15" fill="rgb(218,51,51)"/><text x="71.4483%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with [http_server_rust] (4 samples, 0.14%)</title><rect x="71.2334%" y="869" width="0.1402%" height="15" fill="rgb(238,126,27)"/><text x="71.4834%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once [http_server_rust] (3 samples, 0.11%)</title><rect x="71.2684%" y="853" width="0.1051%" height="15" fill="rgb(249,202,22)"/><text x="71.5184%" y="863.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new [http_server_rust] (9 samples, 0.32%)</title><rect x="71.1282%" y="949" width="0.3153%" height="15" fill="rgb(254,195,49)"/><text x="71.3782%" y="959.50"></text></g><g><title>inline &lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default [http_server_rust] (7 samples, 0.25%)</title><rect x="71.1983%" y="933" width="0.2453%" height="15" fill="rgb(208,123,14)"/><text x="71.4483%" y="943.50"></text></g><g><title>__x64_sys_sendto [linux] (3 samples, 0.11%)</title><rect x="71.9692%" y="869" width="0.1051%" height="15" fill="rgb(224,200,8)"/><text x="72.2192%" y="879.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="71.9692%" y="853" width="0.1051%" height="15" fill="rgb(217,61,36)"/><text x="72.2192%" y="863.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="72.0743%" y="853" width="0.1752%" height="15" fill="rgb(206,35,45)"/><text x="72.3243%" y="863.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="72.4597%" y="773" width="0.1051%" height="15" fill="rgb(217,65,33)"/><text x="72.7097%" y="783.50"></text></g><g><title>_raw_spin_lock_bh [linux] (5 samples, 0.18%)</title><rect x="72.5648%" y="773" width="0.1752%" height="15" fill="rgb(222,158,48)"/><text x="72.8148%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="72.5648%" y="757" width="0.1752%" height="15" fill="rgb(254,2,54)"/><text x="72.8148%" y="767.50"></text></g><g><title>_cond_resched [linux] (28 samples, 0.98%)</title><rect x="72.7400%" y="741" width="0.9811%" height="15" fill="rgb(250,143,38)"/><text x="72.9900%" y="751.50"></text></g><g><title>preempt_schedule_common [linux] (28 samples, 0.98%)</title><rect x="72.7400%" y="725" width="0.9811%" height="15" fill="rgb(248,25,0)"/><text x="72.9900%" y="735.50"></text></g><g><title>__sched_text_start [linux] (28 samples, 0.98%)</title><rect x="72.7400%" y="709" width="0.9811%" height="15" fill="rgb(206,152,27)"/><text x="72.9900%" y="719.50"></text></g><g><title>finish_task_switch [linux] (28 samples, 0.98%)</title><rect x="72.7400%" y="693" width="0.9811%" height="15" fill="rgb(240,77,30)"/><text x="72.9900%" y="703.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (28 samples, 0.98%)</title><rect x="72.7400%" y="677" width="0.9811%" height="15" fill="rgb(231,5,3)"/><text x="72.9900%" y="687.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="74.0364%" y="693" width="0.1752%" height="15" fill="rgb(207,226,32)"/><text x="74.2864%" y="703.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (8 samples, 0.28%)</title><rect x="74.2116%" y="677" width="0.2803%" height="15" fill="rgb(222,207,47)"/><text x="74.4616%" y="687.50"></text></g><g><title>tcp_clean_rtx_queue [linux] (14 samples, 0.49%)</title><rect x="74.2116%" y="693" width="0.4905%" height="15" fill="rgb(229,115,45)"/><text x="74.4616%" y="703.50"></text></g><g><title>tcp_rcv_established [linux] (24 samples, 0.84%)</title><rect x="73.8963%" y="725" width="0.8409%" height="15" fill="rgb(224,191,6)"/><text x="74.1463%" y="735.50"></text></g><g><title>tcp_ack [linux] (20 samples, 0.70%)</title><rect x="74.0364%" y="709" width="0.7008%" height="15" fill="rgb(230,227,24)"/><text x="74.2864%" y="719.50"></text></g><g><title>__release_sock [linux] (58 samples, 2.03%)</title><rect x="72.7400%" y="757" width="2.0322%" height="15" fill="rgb(228,80,19)"/><text x="72.9900%" y="767.50">_..</text></g><g><title>tcp_v4_do_rcv [linux] (29 samples, 1.02%)</title><rect x="73.7561%" y="741" width="1.0161%" height="15" fill="rgb(247,229,0)"/><text x="74.0061%" y="751.50"></text></g><g><title>release_sock [linux] (61 samples, 2.14%)</title><rect x="72.7400%" y="773" width="2.1374%" height="15" fill="rgb(237,194,15)"/><text x="72.9900%" y="783.50">r..</text></g><g><title>_raw_spin_lock_bh [linux] (3 samples, 0.11%)</title><rect x="74.7722%" y="757" width="0.1051%" height="15" fill="rgb(219,203,20)"/><text x="75.0222%" y="767.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="74.7722%" y="741" width="0.1051%" height="15" fill="rgb(234,128,8)"/><text x="75.0222%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="74.8774%" y="757" width="0.2102%" height="15" fill="rgb(248,202,8)"/><text x="75.1274%" y="767.50"></text></g><g><title>__check_object_size [linux] (3 samples, 0.11%)</title><rect x="75.0876%" y="757" width="0.1051%" height="15" fill="rgb(206,104,37)"/><text x="75.3376%" y="767.50"></text></g><g><title>__virt_addr_valid [linux] (3 samples, 0.11%)</title><rect x="75.0876%" y="741" width="0.1051%" height="15" fill="rgb(223,8,27)"/><text x="75.3376%" y="751.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="75.0876%" y="725" width="0.1051%" height="15" fill="rgb(216,217,28)"/><text x="75.3376%" y="735.50"></text></g><g><title>__kmalloc_reserve.isra.0 [linux] (3 samples, 0.11%)</title><rect x="75.4029%" y="725" width="0.1051%" height="15" fill="rgb(249,199,1)"/><text x="75.6529%" y="735.50"></text></g><g><title>ksize [linux] (4 samples, 0.14%)</title><rect x="75.6132%" y="725" width="0.1402%" height="15" fill="rgb(240,85,17)"/><text x="75.8632%" y="735.50"></text></g><g><title>__ksize [linux] (4 samples, 0.14%)</title><rect x="75.6132%" y="709" width="0.1402%" height="15" fill="rgb(206,108,45)"/><text x="75.8632%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="75.6132%" y="693" width="0.1402%" height="15" fill="rgb(245,210,41)"/><text x="75.8632%" y="703.50"></text></g><g><title>__alloc_skb [linux] (15 samples, 0.53%)</title><rect x="75.3329%" y="741" width="0.5256%" height="15" fill="rgb(206,13,37)"/><text x="75.5829%" y="751.50"></text></g><g><title>memcg_kmem_put_cache [linux] (3 samples, 0.11%)</title><rect x="75.7533%" y="725" width="0.1051%" height="15" fill="rgb(250,61,18)"/><text x="76.0033%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="75.7533%" y="709" width="0.1051%" height="15" fill="rgb(235,172,48)"/><text x="76.0033%" y="719.50"></text></g><g><title>sk_stream_alloc_skb [linux] (17 samples, 0.60%)</title><rect x="75.3329%" y="757" width="0.5957%" height="15" fill="rgb(249,201,17)"/><text x="75.5829%" y="767.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="76.1738%" y="693" width="0.1752%" height="15" fill="rgb(219,208,6)"/><text x="76.4238%" y="703.50"></text></g><g><title>bictcp_cwnd_event [linux] (4 samples, 0.14%)</title><rect x="76.3840%" y="693" width="0.1402%" height="15" fill="rgb(248,31,23)"/><text x="76.6340%" y="703.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="76.3840%" y="677" width="0.1402%" height="15" fill="rgb(245,15,42)"/><text x="76.6340%" y="687.50"></text></g><g><title>__cgroup_bpf_run_filter_skb [linux] (3 samples, 0.11%)</title><rect x="76.7694%" y="613" width="0.1051%" height="15" fill="rgb(222,217,39)"/><text x="77.0194%" y="623.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="76.7694%" y="597" width="0.1051%" height="15" fill="rgb(210,219,27)"/><text x="77.0194%" y="607.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="76.8746%" y="581" width="0.1051%" height="15" fill="rgb(252,166,36)"/><text x="77.1246%" y="591.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="77.0147%" y="549" width="0.1752%" height="15" fill="rgb(245,132,34)"/><text x="77.2647%" y="559.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="77.1899%" y="517" width="0.2102%" height="15" fill="rgb(236,54,3)"/><text x="77.4399%" y="527.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="77.4001%" y="501" width="0.1051%" height="15" fill="rgb(241,173,43)"/><text x="77.6501%" y="511.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="77.5753%" y="485" width="0.1402%" height="15" fill="rgb(215,190,9)"/><text x="77.8253%" y="495.50"></text></g><g><title>__netif_receive_skb_core [linux] (8 samples, 0.28%)</title><rect x="77.8206%" y="453" width="0.2803%" height="15" fill="rgb(242,101,16)"/><text x="78.0706%" y="463.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (8 samples, 0.28%)</title><rect x="77.8206%" y="437" width="0.2803%" height="15" fill="rgb(223,190,21)"/><text x="78.0706%" y="447.50"></text></g><g><title>ip_rcv_core.isra.0 [linux] (3 samples, 0.11%)</title><rect x="78.1009%" y="437" width="0.1051%" height="15" fill="rgb(215,228,25)"/><text x="78.3509%" y="447.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="78.1009%" y="421" width="0.1051%" height="15" fill="rgb(225,36,22)"/><text x="78.3509%" y="431.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="78.3111%" y="373" width="0.1752%" height="15" fill="rgb(251,106,46)"/><text x="78.5611%" y="383.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="78.6265%" y="357" width="0.1402%" height="15" fill="rgb(208,90,1)"/><text x="78.8765%" y="367.50"></text></g><g><title>kfree_skbmem [linux] (5 samples, 0.18%)</title><rect x="78.8017%" y="309" width="0.1752%" height="15" fill="rgb(243,10,4)"/><text x="79.0517%" y="319.50"></text></g><g><title>kmem_cache_free [linux] (5 samples, 0.18%)</title><rect x="78.8017%" y="293" width="0.1752%" height="15" fill="rgb(212,137,27)"/><text x="79.0517%" y="303.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="78.8017%" y="277" width="0.1752%" height="15" fill="rgb(231,220,49)"/><text x="79.0517%" y="287.50"></text></g><g><title>skb_release_data [linux] (4 samples, 0.14%)</title><rect x="78.9769%" y="293" width="0.1402%" height="15" fill="rgb(237,96,20)"/><text x="79.2269%" y="303.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="78.9769%" y="277" width="0.1402%" height="15" fill="rgb(239,229,30)"/><text x="79.2269%" y="287.50"></text></g><g><title>kfree_skb [linux] (10 samples, 0.35%)</title><rect x="78.8017%" y="325" width="0.3504%" height="15" fill="rgb(219,65,33)"/><text x="79.0517%" y="335.50"></text></g><g><title>skb_release_all [linux] (5 samples, 0.18%)</title><rect x="78.9769%" y="309" width="0.1752%" height="15" fill="rgb(243,134,7)"/><text x="79.2269%" y="319.50"></text></g><g><title>raw_rcv [linux] (15 samples, 0.53%)</title><rect x="78.7666%" y="357" width="0.5256%" height="15" fill="rgb(216,177,54)"/><text x="79.0166%" y="367.50"></text></g><g><title>raw_rcv_skb [linux] (15 samples, 0.53%)</title><rect x="78.7666%" y="341" width="0.5256%" height="15" fill="rgb(211,160,20)"/><text x="79.0166%" y="351.50"></text></g><g><title>sock_queue_rcv_skb [linux] (3 samples, 0.11%)</title><rect x="79.1871%" y="325" width="0.1051%" height="15" fill="rgb(239,85,39)"/><text x="79.4371%" y="335.50"></text></g><g><title>__skb_clone [linux] (3 samples, 0.11%)</title><rect x="79.3623%" y="341" width="0.1051%" height="15" fill="rgb(232,125,22)"/><text x="79.6123%" y="351.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="79.3623%" y="325" width="0.1051%" height="15" fill="rgb(244,57,34)"/><text x="79.6123%" y="335.50"></text></g><g><title>kmem_cache_alloc [linux] (6 samples, 0.21%)</title><rect x="79.4674%" y="341" width="0.2102%" height="15" fill="rgb(214,203,32)"/><text x="79.7174%" y="351.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="79.4674%" y="325" width="0.2102%" height="15" fill="rgb(207,58,43)"/><text x="79.7174%" y="335.50"></text></g><g><title>raw_local_deliver [linux] (32 samples, 1.12%)</title><rect x="78.6265%" y="373" width="1.1212%" height="15" fill="rgb(215,193,15)"/><text x="78.8765%" y="383.50"></text></g><g><title>skb_clone [linux] (13 samples, 0.46%)</title><rect x="79.2922%" y="357" width="0.4555%" height="15" fill="rgb(232,15,44)"/><text x="79.5422%" y="367.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="79.8528%" y="357" width="0.2453%" height="15" fill="rgb(212,3,48)"/><text x="80.1028%" y="367.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (14 samples, 0.49%)</title><rect x="80.0981%" y="341" width="0.4905%" height="15" fill="rgb(218,128,7)"/><text x="80.3481%" y="351.50"></text></g><g><title>__inet_lookup_established [linux] (15 samples, 0.53%)</title><rect x="80.0981%" y="357" width="0.5256%" height="15" fill="rgb(226,216,39)"/><text x="80.3481%" y="367.50"></text></g><g><title>sk_filter_trim_cap [linux] (3 samples, 0.11%)</title><rect x="80.6237%" y="357" width="0.1051%" height="15" fill="rgb(243,47,51)"/><text x="80.8737%" y="367.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="80.7989%" y="325" width="0.1752%" height="15" fill="rgb(241,183,40)"/><text x="81.0489%" y="335.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="81.1142%" y="229" width="0.1051%" height="15" fill="rgb(231,217,32)"/><text x="81.3642%" y="239.50"></text></g><g><title>__kmalloc_reserve.isra.0 [linux] (4 samples, 0.14%)</title><rect x="81.1142%" y="261" width="0.1402%" height="15" fill="rgb(229,61,38)"/><text x="81.3642%" y="271.50"></text></g><g><title>__kmalloc_node_track_caller [linux] (4 samples, 0.14%)</title><rect x="81.1142%" y="245" width="0.1402%" height="15" fill="rgb(225,210,5)"/><text x="81.3642%" y="255.50"></text></g><g><title>kmem_cache_alloc_node [linux] (3 samples, 0.11%)</title><rect x="81.2544%" y="261" width="0.1051%" height="15" fill="rgb(231,79,45)"/><text x="81.5044%" y="271.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="81.2544%" y="245" width="0.1051%" height="15" fill="rgb(224,100,7)"/><text x="81.5044%" y="255.50"></text></g><g><title>__alloc_skb [linux] (9 samples, 0.32%)</title><rect x="81.1142%" y="277" width="0.3153%" height="15" fill="rgb(241,198,18)"/><text x="81.3642%" y="287.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (8 samples, 0.28%)</title><rect x="81.4296%" y="261" width="0.2803%" height="15" fill="rgb(252,97,53)"/><text x="81.6796%" y="271.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="81.7449%" y="229" width="0.1051%" height="15" fill="rgb(220,88,7)"/><text x="81.9949%" y="239.50"></text></g><g><title>dev_hard_start_xmit [linux] (4 samples, 0.14%)</title><rect x="81.9902%" y="117" width="0.1402%" height="15" fill="rgb(213,176,14)"/><text x="82.2402%" y="127.50"></text></g><g><title>loopback_xmit [linux] (3 samples, 0.11%)</title><rect x="82.0252%" y="101" width="0.1051%" height="15" fill="rgb(246,73,7)"/><text x="82.2752%" y="111.50"></text></g><g><title>netif_rx [linux] (3 samples, 0.11%)</title><rect x="82.0252%" y="85" width="0.1051%" height="15" fill="rgb(245,64,36)"/><text x="82.2752%" y="95.50"></text></g><g><title>netif_rx_internal [linux] (3 samples, 0.11%)</title><rect x="82.0252%" y="69" width="0.1051%" height="15" fill="rgb(245,80,10)"/><text x="82.2752%" y="79.50"></text></g><g><title>enqueue_to_backlog [linux] (3 samples, 0.11%)</title><rect x="82.0252%" y="53" width="0.1051%" height="15" fill="rgb(232,107,50)"/><text x="82.2752%" y="63.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="82.0252%" y="37" width="0.1051%" height="15" fill="rgb(253,3,0)"/><text x="82.2752%" y="47.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="82.1303%" y="101" width="0.1051%" height="15" fill="rgb(212,99,53)"/><text x="82.3803%" y="111.50"></text></g><g><title>__ip_queue_xmit [linux] (15 samples, 0.53%)</title><rect x="81.7449%" y="245" width="0.5256%" height="15" fill="rgb(249,111,54)"/><text x="81.9949%" y="255.50"></text></g><g><title>ip_local_out [linux] (12 samples, 0.42%)</title><rect x="81.8500%" y="229" width="0.4205%" height="15" fill="rgb(249,55,30)"/><text x="82.1000%" y="239.50"></text></g><g><title>ip_output [linux] (11 samples, 0.39%)</title><rect x="81.8851%" y="213" width="0.3854%" height="15" fill="rgb(237,47,42)"/><text x="82.1351%" y="223.50"></text></g><g><title>ip_finish_output [linux] (11 samples, 0.39%)</title><rect x="81.8851%" y="197" width="0.3854%" height="15" fill="rgb(211,20,18)"/><text x="82.1351%" y="207.50"></text></g><g><title>__ip_finish_output [linux] (11 samples, 0.39%)</title><rect x="81.8851%" y="181" width="0.3854%" height="15" fill="rgb(231,203,46)"/><text x="82.1351%" y="191.50"></text></g><g><title>ip_finish_output2 [linux] (11 samples, 0.39%)</title><rect x="81.8851%" y="165" width="0.3854%" height="15" fill="rgb(237,142,3)"/><text x="82.1351%" y="175.50"></text></g><g><title>dev_queue_xmit [linux] (9 samples, 0.32%)</title><rect x="81.9552%" y="149" width="0.3153%" height="15" fill="rgb(241,107,1)"/><text x="82.2052%" y="159.50"></text></g><g><title>__dev_queue_xmit [linux] (9 samples, 0.32%)</title><rect x="81.9552%" y="133" width="0.3153%" height="15" fill="rgb(229,83,13)"/><text x="82.2052%" y="143.50"></text></g><g><title>validate_xmit_skb [linux] (4 samples, 0.14%)</title><rect x="82.1303%" y="117" width="0.1402%" height="15" fill="rgb(241,91,40)"/><text x="82.3803%" y="127.50"></text></g><g><title>__tcp_ack_snd_check [linux] (38 samples, 1.33%)</title><rect x="80.9741%" y="325" width="1.3315%" height="15" fill="rgb(225,3,45)"/><text x="81.2241%" y="335.50"></text></g><g><title>tcp_send_ack [linux] (37 samples, 1.30%)</title><rect x="81.0091%" y="309" width="1.2964%" height="15" fill="rgb(244,223,14)"/><text x="81.2591%" y="319.50"></text></g><g><title>__tcp_send_ack.part.0 [linux] (35 samples, 1.23%)</title><rect x="81.0792%" y="293" width="1.2263%" height="15" fill="rgb(224,124,37)"/><text x="81.3292%" y="303.50"></text></g><g><title>__tcp_transmit_skb [linux] (25 samples, 0.88%)</title><rect x="81.4296%" y="277" width="0.8760%" height="15" fill="rgb(251,171,30)"/><text x="81.6796%" y="287.50"></text></g><g><title>ip_queue_xmit [linux] (16 samples, 0.56%)</title><rect x="81.7449%" y="261" width="0.5606%" height="15" fill="rgb(236,46,54)"/><text x="81.9949%" y="271.50"></text></g><g><title>tcp_ack [linux] (5 samples, 0.18%)</title><rect x="82.3756%" y="325" width="0.1752%" height="15" fill="rgb(245,213,5)"/><text x="82.6256%" y="335.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="82.5508%" y="309" width="0.1402%" height="15" fill="rgb(230,144,27)"/><text x="82.8008%" y="319.50"></text></g><g><title>dst_release [linux] (3 samples, 0.11%)</title><rect x="82.6910%" y="309" width="0.1051%" height="15" fill="rgb(220,86,6)"/><text x="82.9410%" y="319.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="82.6910%" y="293" width="0.1051%" height="15" fill="rgb(240,20,13)"/><text x="82.9410%" y="303.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="82.8662%" y="277" width="0.2102%" height="15" fill="rgb(217,89,34)"/><text x="83.1162%" y="287.50"></text></g><g><title>tcp_data_ready [linux] (119 samples, 4.17%)</title><rect x="82.8311%" y="309" width="4.1696%" height="15" fill="rgb(229,13,5)"/><text x="83.0811%" y="319.50">tcp_d..</text></g><g><title>sock_def_readable [linux] (118 samples, 4.13%)</title><rect x="82.8662%" y="293" width="4.1345%" height="15" fill="rgb(244,67,35)"/><text x="83.1162%" y="303.50">sock_..</text></g><g><title>__wake_up_sync_key [linux] (112 samples, 3.92%)</title><rect x="83.0764%" y="277" width="3.9243%" height="15" fill="rgb(221,40,2)"/><text x="83.3264%" y="287.50">__wa..</text></g><g><title>__wake_up_common_lock [linux] (112 samples, 3.92%)</title><rect x="83.0764%" y="261" width="3.9243%" height="15" fill="rgb(237,157,21)"/><text x="83.3264%" y="271.50">__wa..</text></g><g><title>__lock_text_start [linux] (112 samples, 3.92%)</title><rect x="83.0764%" y="245" width="3.9243%" height="15" fill="rgb(222,94,11)"/><text x="83.3264%" y="255.50">__lo..</text></g><g><title>0xFFFFFFFFFFFFFF80 (112 samples, 3.92%)</title><rect x="83.0764%" y="229" width="3.9243%" height="15" fill="rgb(249,113,6)"/><text x="83.3264%" y="239.50">0xFF..</text></g><g><title>tcp_event_data_recv [linux] (6 samples, 0.21%)</title><rect x="87.0007%" y="309" width="0.2102%" height="15" fill="rgb(238,137,36)"/><text x="87.2507%" y="319.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (6 samples, 0.21%)</title><rect x="87.0007%" y="293" width="0.2102%" height="15" fill="rgb(210,102,26)"/><text x="87.2507%" y="303.50"></text></g><g><title>tcp_data_queue [linux] (135 samples, 4.73%)</title><rect x="82.5508%" y="325" width="4.7302%" height="15" fill="rgb(218,30,30)"/><text x="82.8008%" y="335.50">tcp_da..</text></g><g><title>tcp_rcv_established [linux] (190 samples, 6.66%)</title><rect x="80.7989%" y="341" width="6.6573%" height="15" fill="rgb(214,67,26)"/><text x="81.0489%" y="351.50">tcp_rcv_e..</text></g><g><title>tcp_rcv_state_process [linux] (4 samples, 0.14%)</title><rect x="87.4562%" y="341" width="0.1402%" height="15" fill="rgb(251,9,53)"/><text x="87.7062%" y="351.50"></text></g><g><title>tcp_done [linux] (3 samples, 0.11%)</title><rect x="87.4912%" y="325" width="0.1051%" height="15" fill="rgb(228,204,25)"/><text x="87.7412%" y="335.50"></text></g><g><title>inet_csk_destroy_sock [linux] (3 samples, 0.11%)</title><rect x="87.4912%" y="309" width="0.1051%" height="15" fill="rgb(207,153,8)"/><text x="87.7412%" y="319.50"></text></g><g><title>tcp_v4_destroy_sock [linux] (3 samples, 0.11%)</title><rect x="87.4912%" y="293" width="0.1051%" height="15" fill="rgb(242,9,16)"/><text x="87.7412%" y="303.50"></text></g><g><title>tcp_v4_do_rcv [linux] (198 samples, 6.94%)</title><rect x="80.7638%" y="357" width="6.9376%" height="15" fill="rgb(217,211,10)"/><text x="81.0138%" y="367.50">tcp_v4_do..</text></g><g><title>tcp_v4_send_reset [linux] (3 samples, 0.11%)</title><rect x="87.5964%" y="341" width="0.1051%" height="15" fill="rgb(219,228,52)"/><text x="87.8464%" y="351.50"></text></g><g><title>ip_local_deliver [linux] (271 samples, 9.50%)</title><rect x="78.2411%" y="421" width="9.4954%" height="15" fill="rgb(231,92,29)"/><text x="78.4911%" y="431.50">ip_local_deliv..</text></g><g><title>ip_local_deliver_finish [linux] (269 samples, 9.43%)</title><rect x="78.3111%" y="405" width="9.4254%" height="15" fill="rgb(232,8,23)"/><text x="78.5611%" y="415.50">ip_local_deli..</text></g><g><title>ip_protocol_deliver_rcu [linux] (269 samples, 9.43%)</title><rect x="78.3111%" y="389" width="9.4254%" height="15" fill="rgb(216,211,34)"/><text x="78.5611%" y="399.50">ip_protocol_d..</text></g><g><title>tcp_v4_rcv [linux] (225 samples, 7.88%)</title><rect x="79.8528%" y="373" width="7.8837%" height="15" fill="rgb(236,151,0)"/><text x="80.1028%" y="383.50">tcp_v4_rcv ..</text></g><g><title>ip_rcv [linux] (277 samples, 9.71%)</title><rect x="78.1009%" y="453" width="9.7057%" height="15" fill="rgb(209,168,3)"/><text x="78.3509%" y="463.50">ip_rcv [linux]</text></g><g><title>ip_rcv_finish [linux] (274 samples, 9.60%)</title><rect x="78.2060%" y="437" width="9.6006%" height="15" fill="rgb(208,129,28)"/><text x="78.4560%" y="447.50">ip_rcv_finish ..</text></g><g><title>__netif_receive_skb_one_core [linux] (288 samples, 10.09%)</title><rect x="77.7505%" y="469" width="10.0911%" height="15" fill="rgb(229,78,22)"/><text x="78.0005%" y="479.50">__netif_receive..</text></g><g><title>net_rx_action [linux] (299 samples, 10.48%)</title><rect x="77.4001%" y="517" width="10.4765%" height="15" fill="rgb(228,187,13)"/><text x="77.6501%" y="527.50">net_rx_action [..</text></g><g><title>process_backlog [linux] (294 samples, 10.30%)</title><rect x="77.5753%" y="501" width="10.3013%" height="15" fill="rgb(240,119,24)"/><text x="77.8253%" y="511.50">process_backlog..</text></g><g><title>__netif_receive_skb [linux] (290 samples, 10.16%)</title><rect x="77.7155%" y="485" width="10.1612%" height="15" fill="rgb(209,194,42)"/><text x="77.9655%" y="495.50">__netif_receive..</text></g><g><title>__softirqentry_text_start [linux] (306 samples, 10.72%)</title><rect x="77.1899%" y="533" width="10.7218%" height="15" fill="rgb(247,200,46)"/><text x="77.4399%" y="543.50">__softirqentry_t..</text></g><g><title>__local_bh_enable_ip [linux] (313 samples, 10.97%)</title><rect x="76.9797%" y="581" width="10.9671%" height="15" fill="rgb(218,76,16)"/><text x="77.2297%" y="591.50">__local_bh_enabl..</text></g><g><title>do_softirq.part.0 [linux] (312 samples, 10.93%)</title><rect x="77.0147%" y="565" width="10.9320%" height="15" fill="rgb(225,21,48)"/><text x="77.2647%" y="575.50">do_softirq.part...</text></g><g><title>do_softirq_own_stack [linux] (307 samples, 10.76%)</title><rect x="77.1899%" y="549" width="10.7568%" height="15" fill="rgb(239,223,50)"/><text x="77.4399%" y="559.50">do_softirq_own_s..</text></g><g><title>netif_rx [linux] (4 samples, 0.14%)</title><rect x="88.0869%" y="517" width="0.1402%" height="15" fill="rgb(244,45,21)"/><text x="88.3369%" y="527.50"></text></g><g><title>netif_rx_internal [linux] (4 samples, 0.14%)</title><rect x="88.0869%" y="501" width="0.1402%" height="15" fill="rgb(232,33,43)"/><text x="88.3369%" y="511.50"></text></g><g><title>dev_hard_start_xmit [linux] (7 samples, 0.25%)</title><rect x="88.0168%" y="549" width="0.2453%" height="15" fill="rgb(209,8,3)"/><text x="88.2668%" y="559.50"></text></g><g><title>loopback_xmit [linux] (6 samples, 0.21%)</title><rect x="88.0519%" y="533" width="0.2102%" height="15" fill="rgb(214,25,53)"/><text x="88.3019%" y="543.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="88.3322%" y="533" width="0.1402%" height="15" fill="rgb(254,186,54)"/><text x="88.5822%" y="543.50"></text></g><g><title>validate_xmit_skb [linux] (5 samples, 0.18%)</title><rect x="88.3322%" y="549" width="0.1752%" height="15" fill="rgb(208,174,49)"/><text x="88.5822%" y="559.50"></text></g><g><title>ip_finish_output2 [linux] (333 samples, 11.67%)</title><rect x="76.8746%" y="597" width="11.6678%" height="15" fill="rgb(233,191,51)"/><text x="77.1246%" y="607.50">ip_finish_output2..</text></g><g><title>dev_queue_xmit [linux] (17 samples, 0.60%)</title><rect x="87.9467%" y="581" width="0.5957%" height="15" fill="rgb(222,134,10)"/><text x="88.1967%" y="591.50"></text></g><g><title>__dev_queue_xmit [linux] (17 samples, 0.60%)</title><rect x="87.9467%" y="565" width="0.5957%" height="15" fill="rgb(230,226,20)"/><text x="88.1967%" y="575.50"></text></g><g><title>ip_local_out [linux] (343 samples, 12.02%)</title><rect x="76.5592%" y="661" width="12.0182%" height="15" fill="rgb(251,111,25)"/><text x="76.8092%" y="671.50">ip_local_out [linu..</text></g><g><title>ip_output [linux] (341 samples, 11.95%)</title><rect x="76.6293%" y="645" width="11.9481%" height="15" fill="rgb(224,40,46)"/><text x="76.8793%" y="655.50">ip_output [linux]</text></g><g><title>ip_finish_output [linux] (337 samples, 11.81%)</title><rect x="76.7694%" y="629" width="11.8080%" height="15" fill="rgb(236,108,47)"/><text x="77.0194%" y="639.50">ip_finish_output [..</text></g><g><title>__ip_finish_output [linux] (334 samples, 11.70%)</title><rect x="76.8746%" y="613" width="11.7029%" height="15" fill="rgb(234,93,0)"/><text x="77.1246%" y="623.50">__ip_finish_outpu..</text></g><g><title>__ip_queue_xmit [linux] (346 samples, 12.12%)</title><rect x="76.5242%" y="677" width="12.1233%" height="15" fill="rgb(224,213,32)"/><text x="76.7742%" y="687.50">__ip_queue_xmit [l..</text></g><g><title>ip_queue_xmit [linux] (348 samples, 12.19%)</title><rect x="76.5242%" y="693" width="12.1934%" height="15" fill="rgb(251,11,48)"/><text x="76.7742%" y="703.50">ip_queue_xmit [lin..</text></g><g><title>__tcp_transmit_skb [linux] (363 samples, 12.72%)</title><rect x="76.1738%" y="709" width="12.7190%" height="15" fill="rgb(236,173,5)"/><text x="76.4238%" y="719.50">__tcp_transmit_skb ..</text></g><g><title>ktime_get [linux] (3 samples, 0.11%)</title><rect x="88.9629%" y="709" width="0.1051%" height="15" fill="rgb(230,95,12)"/><text x="89.2129%" y="719.50"></text></g><g><title>kvm_clock_get_cycles [linux] (3 samples, 0.11%)</title><rect x="88.9629%" y="693" width="0.1051%" height="15" fill="rgb(232,209,1)"/><text x="89.2129%" y="703.50"></text></g><g><title>pvclock_clocksource_read [linux] (3 samples, 0.11%)</title><rect x="88.9629%" y="677" width="0.1051%" height="15" fill="rgb(232,6,1)"/><text x="89.2129%" y="687.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="88.9629%" y="661" width="0.1051%" height="15" fill="rgb(210,224,50)"/><text x="89.2129%" y="671.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="89.2081%" y="645" width="0.1402%" height="15" fill="rgb(228,127,35)"/><text x="89.4581%" y="655.50"></text></g><g><title>__lock_text_start [linux] (4 samples, 0.14%)</title><rect x="89.3483%" y="645" width="0.1402%" height="15" fill="rgb(245,102,45)"/><text x="89.5983%" y="655.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="89.3483%" y="629" width="0.1402%" height="15" fill="rgb(214,1,49)"/><text x="89.5983%" y="639.50"></text></g><g><title>tcp_event_new_data_sent [linux] (12 samples, 0.42%)</title><rect x="89.1030%" y="709" width="0.4205%" height="15" fill="rgb(226,163,40)"/><text x="89.3530%" y="719.50"></text></g><g><title>tcp_rearm_rto [linux] (9 samples, 0.32%)</title><rect x="89.2081%" y="693" width="0.3153%" height="15" fill="rgb(239,212,28)"/><text x="89.4581%" y="703.50"></text></g><g><title>sk_reset_timer [linux] (9 samples, 0.32%)</title><rect x="89.2081%" y="677" width="0.3153%" height="15" fill="rgb(220,20,13)"/><text x="89.4581%" y="687.50"></text></g><g><title>mod_timer [linux] (9 samples, 0.32%)</title><rect x="89.2081%" y="661" width="0.3153%" height="15" fill="rgb(210,164,35)"/><text x="89.4581%" y="671.50"></text></g><g><title>tcp_push [linux] (388 samples, 13.59%)</title><rect x="75.9636%" y="757" width="13.5950%" height="15" fill="rgb(248,109,41)"/><text x="76.2136%" y="767.50">tcp_push [linux]</text></g><g><title>__tcp_push_pending_frames [linux] (386 samples, 13.52%)</title><rect x="76.0336%" y="741" width="13.5249%" height="15" fill="rgb(238,23,50)"/><text x="76.2836%" y="751.50">__tcp_push_pending_f..</text></g><g><title>tcp_write_xmit [linux] (384 samples, 13.45%)</title><rect x="76.1037%" y="725" width="13.4548%" height="15" fill="rgb(211,48,49)"/><text x="76.3537%" y="735.50">tcp_write_xmit [linu..</text></g><g><title>tcp_sendmsg [linux] (494 samples, 17.31%)</title><rect x="72.4597%" y="789" width="17.3090%" height="15" fill="rgb(223,36,21)"/><text x="72.7097%" y="799.50">tcp_sendmsg [linux]</text></g><g><title>tcp_sendmsg_locked [linux] (425 samples, 14.89%)</title><rect x="74.8774%" y="773" width="14.8914%" height="15" fill="rgb(207,123,46)"/><text x="75.1274%" y="783.50">tcp_sendmsg_locked [lin..</text></g><g><title>tcp_send_mss [linux] (6 samples, 0.21%)</title><rect x="89.5585%" y="757" width="0.2102%" height="15" fill="rgb(240,218,32)"/><text x="89.8085%" y="767.50"></text></g><g><title>tcp_current_mss [linux] (5 samples, 0.18%)</title><rect x="89.5936%" y="741" width="0.1752%" height="15" fill="rgb(252,5,43)"/><text x="89.8436%" y="751.50"></text></g><g><title>ipv4_mtu [linux] (3 samples, 0.11%)</title><rect x="89.6636%" y="725" width="0.1051%" height="15" fill="rgb(252,84,19)"/><text x="89.9136%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="89.6636%" y="709" width="0.1051%" height="15" fill="rgb(243,152,39)"/><text x="89.9136%" y="719.50"></text></g><g><title>inet_sendmsg [linux] (496 samples, 17.38%)</title><rect x="72.4247%" y="805" width="17.3791%" height="15" fill="rgb(234,160,15)"/><text x="72.6747%" y="815.50">inet_sendmsg [linux]</text></g><g><title>__sock_sendmsg [linux] (500 samples, 17.52%)</title><rect x="72.3196%" y="821" width="17.5193%" height="15" fill="rgb(237,34,20)"/><text x="72.5696%" y="831.50">__sock_sendmsg [linux]</text></g><g><title>__sys_sendto [linux] (506 samples, 17.73%)</title><rect x="72.2495%" y="837" width="17.7295%" height="15" fill="rgb(229,97,13)"/><text x="72.4995%" y="847.50">__sys_sendto [linux]</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write [http_server_rust] (527 samples, 18.47%)</title><rect x="71.5487%" y="933" width="18.4653%" height="15" fill="rgb(234,71,50)"/><text x="71.7987%" y="943.50">&lt;&amp;std::net::tcp::TcpStream as..</text></g><g><title>inline std::sys_common::net::TcpStream::write [http_server_rust] (521 samples, 18.26%)</title><rect x="71.7589%" y="917" width="18.2551%" height="15" fill="rgb(253,155,4)"/><text x="72.0089%" y="927.50">inline std::sys_common::net:..</text></g><g><title>send [libpthread-2.31.so] (520 samples, 18.22%)</title><rect x="71.7940%" y="901" width="18.2200%" height="15" fill="rgb(222,185,37)"/><text x="72.0440%" y="911.50">send [libpthread-2.31.so]</text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (515 samples, 18.04%)</title><rect x="71.9692%" y="885" width="18.0448%" height="15" fill="rgb(251,177,13)"/><text x="72.2192%" y="895.50">entry_SYSCALL_64_after_hwfra..</text></g><g><title>do_syscall_64 [linux] (512 samples, 17.94%)</title><rect x="72.0743%" y="869" width="17.9397%" height="15" fill="rgb(250,179,40)"/><text x="72.3243%" y="879.50">do_syscall_64 [linux]</text></g><g><title>__x64_sys_sendto [linux] (507 samples, 17.76%)</title><rect x="72.2495%" y="853" width="17.7645%" height="15" fill="rgb(242,44,2)"/><text x="72.4995%" y="863.50">__x64_sys_sendto [linux]</text></g><g><title>std::io::Write::write_all [http_server_rust] (531 samples, 18.61%)</title><rect x="71.4436%" y="949" width="18.6055%" height="15" fill="rgb(216,177,13)"/><text x="71.6936%" y="959.50">std::io::Write::write_all [ht..</text></g><g><title>http_server_rust::connection_handler::handle_connection [http_server_rust] (1,739 samples, 60.93%)</title><rect x="29.1521%" y="965" width="60.9320%" height="15" fill="rgb(216,106,43)"/><text x="29.4021%" y="975.50">http_server_rust::connection_handler::handle_connection [http_server_rust]</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish [http_server_rust] (4 samples, 0.14%)</title><rect x="90.2593%" y="885" width="0.1402%" height="15" fill="rgb(216,183,2)"/><text x="90.5093%" y="895.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish [http_server_rust] (3 samples, 0.11%)</title><rect x="90.2943%" y="869" width="0.1051%" height="15" fill="rgb(249,75,3)"/><text x="90.5443%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish [http_server_rust] (3 samples, 0.11%)</title><rect x="90.2943%" y="853" width="0.1051%" height="15" fill="rgb(219,67,39)"/><text x="90.5443%" y="863.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher [http_server_rust] (6 samples, 0.21%)</title><rect x="90.3994%" y="885" width="0.2102%" height="15" fill="rgb(253,228,2)"/><text x="90.6494%" y="895.50"></text></g><g><title>inline core::hash::sip::SipHasher13::new_with_keys [http_server_rust] (3 samples, 0.11%)</title><rect x="90.5046%" y="869" width="0.1051%" height="15" fill="rgb(235,138,27)"/><text x="90.7546%" y="879.50"></text></g><g><title>inline hashbrown::map::make_hash [http_server_rust] (17 samples, 0.60%)</title><rect x="90.1892%" y="917" width="0.5957%" height="15" fill="rgb(236,97,51)"/><text x="90.4392%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one [http_server_rust] (17 samples, 0.60%)</title><rect x="90.1892%" y="901" width="0.5957%" height="15" fill="rgb(240,80,30)"/><text x="90.4392%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash [http_server_rust] (5 samples, 0.18%)</title><rect x="90.6097%" y="885" width="0.1752%" height="15" fill="rgb(230,178,19)"/><text x="90.8597%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash [http_server_rust] (5 samples, 0.18%)</title><rect x="90.6097%" y="869" width="0.1752%" height="15" fill="rgb(210,190,27)"/><text x="90.8597%" y="879.50"></text></g><g><title>core::hash::Hasher::write_i32 [http_server_rust] (5 samples, 0.18%)</title><rect x="90.6097%" y="853" width="0.1752%" height="15" fill="rgb(222,107,31)"/><text x="90.8597%" y="863.50"></text></g><g><title>core::hash::Hasher::write_u32 [http_server_rust] (5 samples, 0.18%)</title><rect x="90.6097%" y="837" width="0.1752%" height="15" fill="rgb(216,127,34)"/><text x="90.8597%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write [http_server_rust] (5 samples, 0.18%)</title><rect x="90.6097%" y="821" width="0.1752%" height="15" fill="rgb(234,116,52)"/><text x="90.8597%" y="831.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write [http_server_rust] (5 samples, 0.18%)</title><rect x="90.6097%" y="805" width="0.1752%" height="15" fill="rgb(222,124,15)"/><text x="90.8597%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write [http_server_rust] (5 samples, 0.18%)</title><rect x="90.6097%" y="789" width="0.1752%" height="15" fill="rgb(231,179,28)"/><text x="90.8597%" y="799.50"></text></g><g><title>core::hash::sip::u8to64_le [http_server_rust] (4 samples, 0.14%)</title><rect x="90.6447%" y="773" width="0.1402%" height="15" fill="rgb(226,93,45)"/><text x="90.8947%" y="783.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (3 samples, 0.11%)</title><rect x="90.6797%" y="757" width="0.1051%" height="15" fill="rgb(215,8,51)"/><text x="90.9297%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (3 samples, 0.11%)</title><rect x="90.6797%" y="741" width="0.1051%" height="15" fill="rgb(223,106,5)"/><text x="90.9297%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} [http_server_rust] (10 samples, 0.35%)</title><rect x="90.8199%" y="869" width="0.3504%" height="15" fill="rgb(250,191,5)"/><text x="91.0699%" y="879.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} [http_server_rust] (10 samples, 0.35%)</title><rect x="90.8199%" y="853" width="0.3504%" height="15" fill="rgb(242,132,44)"/><text x="91.0699%" y="863.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent [http_server_rust] (9 samples, 0.32%)</title><rect x="90.8549%" y="837" width="0.3153%" height="15" fill="rgb(251,152,29)"/><text x="91.1049%" y="847.50"></text></g><g><title>inline core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq [http_server_rust] (8 samples, 0.28%)</title><rect x="90.8900%" y="821" width="0.2803%" height="15" fill="rgb(218,179,5)"/><text x="91.1400%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq [http_server_rust] (8 samples, 0.28%)</title><rect x="90.8900%" y="805" width="0.2803%" height="15" fill="rgb(227,67,19)"/><text x="91.1400%" y="815.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut [http_server_rust] (40 samples, 1.40%)</title><rect x="90.0841%" y="965" width="1.4015%" height="15" fill="rgb(233,119,31)"/><text x="90.3341%" y="975.50"></text></g><g><title>inline hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut [http_server_rust] (39 samples, 1.37%)</title><rect x="90.1191%" y="949" width="1.3665%" height="15" fill="rgb(241,120,22)"/><text x="90.3691%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut [http_server_rust] (39 samples, 1.37%)</title><rect x="90.1191%" y="933" width="1.3665%" height="15" fill="rgb(224,102,30)"/><text x="90.3691%" y="943.50"></text></g><g><title>inline hashbrown::raw::RawTable&lt;T,A&gt;::get_mut [http_server_rust] (20 samples, 0.70%)</title><rect x="90.7849%" y="917" width="0.7008%" height="15" fill="rgb(210,164,37)"/><text x="91.0349%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find [http_server_rust] (20 samples, 0.70%)</title><rect x="90.7849%" y="901" width="0.7008%" height="15" fill="rgb(226,191,16)"/><text x="91.0349%" y="911.50"></text></g><g><title>inline hashbrown::raw::RawTableInner::find_inner [http_server_rust] (19 samples, 0.67%)</title><rect x="90.8199%" y="885" width="0.6657%" height="15" fill="rgb(214,40,45)"/><text x="91.0699%" y="895.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (6 samples, 0.21%)</title><rect x="91.2754%" y="869" width="0.2102%" height="15" fill="rgb(244,29,26)"/><text x="91.5254%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 [http_server_rust] (3 samples, 0.11%)</title><rect x="91.3805%" y="853" width="0.1051%" height="15" fill="rgb(216,16,5)"/><text x="91.6305%" y="863.50"></text></g><g><title>inline core::core_arch::x86::sse2::_mm_set_epi8 [http_server_rust] (3 samples, 0.11%)</title><rect x="91.3805%" y="837" width="0.1051%" height="15" fill="rgb(249,76,35)"/><text x="91.6305%" y="847.50"></text></g><g><title>inline core::core_arch::simd::i8x16::new [http_server_rust] (3 samples, 0.11%)</title><rect x="91.3805%" y="821" width="0.1051%" height="15" fill="rgb(207,11,44)"/><text x="91.6305%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot [http_server_rust] (3 samples, 0.11%)</title><rect x="91.5907%" y="933" width="0.1051%" height="15" fill="rgb(228,190,49)"/><text x="91.8407%" y="943.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null [http_server_rust] (4 samples, 0.14%)</title><rect x="92.1864%" y="821" width="0.1402%" height="15" fill="rgb(214,173,12)"/><text x="92.4364%" y="831.50"></text></g><g><title>inline core::ub_checks::maybe_is_aligned_and_not_null::runtime [http_server_rust] (4 samples, 0.14%)</title><rect x="92.1864%" y="805" width="0.1402%" height="15" fill="rgb(218,26,35)"/><text x="92.4364%" y="815.50"></text></g><g><title>inline core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to [http_server_rust] (4 samples, 0.14%)</title><rect x="92.1864%" y="789" width="0.1402%" height="15" fill="rgb(220,200,19)"/><text x="92.4364%" y="799.50"></text></g><g><title>inline core::num::&lt;impl usize&gt;::is_power_of_two [http_server_rust] (3 samples, 0.11%)</title><rect x="92.2214%" y="773" width="0.1051%" height="15" fill="rgb(239,95,49)"/><text x="92.4714%" y="783.50"></text></g><g><title>inline core::num::&lt;impl usize&gt;::count_ones [http_server_rust] (3 samples, 0.11%)</title><rect x="92.2214%" y="757" width="0.1051%" height="15" fill="rgb(235,85,53)"/><text x="92.4714%" y="767.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::load [http_server_rust] (9 samples, 0.32%)</title><rect x="92.0463%" y="885" width="0.3153%" height="15" fill="rgb(233,133,31)"/><text x="92.2963%" y="895.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 [http_server_rust] (8 samples, 0.28%)</title><rect x="92.0813%" y="869" width="0.2803%" height="15" fill="rgb(218,25,20)"/><text x="92.3313%" y="879.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (8 samples, 0.28%)</title><rect x="92.0813%" y="853" width="0.2803%" height="15" fill="rgb(252,210,38)"/><text x="92.3313%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (5 samples, 0.18%)</title><rect x="92.1864%" y="837" width="0.1752%" height="15" fill="rgb(242,134,21)"/><text x="92.4364%" y="847.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_empty [http_server_rust] (5 samples, 0.18%)</title><rect x="92.3616%" y="885" width="0.1752%" height="15" fill="rgb(213,28,48)"/><text x="92.6116%" y="895.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (5 samples, 0.18%)</title><rect x="92.3616%" y="869" width="0.1752%" height="15" fill="rgb(250,196,2)"/><text x="92.6116%" y="879.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (3 samples, 0.11%)</title><rect x="92.5368%" y="885" width="0.1051%" height="15" fill="rgb(227,5,17)"/><text x="92.7868%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner [http_server_rust] (23 samples, 0.81%)</title><rect x="91.8711%" y="901" width="0.8059%" height="15" fill="rgb(221,226,24)"/><text x="92.1211%" y="911.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot [http_server_rust] (27 samples, 0.95%)</title><rect x="91.7659%" y="917" width="0.9460%" height="15" fill="rgb(211,5,48)"/><text x="92.0159%" y="927.50"></text></g><g><title>inline hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot [http_server_rust] (30 samples, 1.05%)</title><rect x="91.6959%" y="933" width="1.0512%" height="15" fill="rgb(219,150,6)"/><text x="91.9459%" y="943.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish [http_server_rust] (9 samples, 0.32%)</title><rect x="92.7821%" y="901" width="0.3153%" height="15" fill="rgb(251,46,16)"/><text x="93.0321%" y="911.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish [http_server_rust] (8 samples, 0.28%)</title><rect x="92.8171%" y="885" width="0.2803%" height="15" fill="rgb(220,204,40)"/><text x="93.0671%" y="895.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish [http_server_rust] (8 samples, 0.28%)</title><rect x="92.8171%" y="869" width="0.2803%" height="15" fill="rgb(211,85,2)"/><text x="93.0671%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds [http_server_rust] (4 samples, 0.14%)</title><rect x="92.9573%" y="853" width="0.1402%" height="15" fill="rgb(229,17,7)"/><text x="93.2073%" y="863.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher [http_server_rust] (5 samples, 0.18%)</title><rect x="93.0974%" y="901" width="0.1752%" height="15" fill="rgb(239,72,28)"/><text x="93.3474%" y="911.50"></text></g><g><title>inline core::hash::sip::SipHasher13::new_with_keys [http_server_rust] (5 samples, 0.18%)</title><rect x="93.0974%" y="885" width="0.1752%" height="15" fill="rgb(230,47,54)"/><text x="93.3474%" y="895.50"></text></g><g><title>inline core::hash::sip::Hasher&lt;S&gt;::new_with_keys [http_server_rust] (4 samples, 0.14%)</title><rect x="93.1324%" y="869" width="0.1402%" height="15" fill="rgb(214,50,8)"/><text x="93.3824%" y="879.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset [http_server_rust] (3 samples, 0.11%)</title><rect x="93.1675%" y="853" width="0.1051%" height="15" fill="rgb(216,198,43)"/><text x="93.4175%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert [http_server_rust] (65 samples, 2.28%)</title><rect x="91.4856%" y="949" width="2.2775%" height="15" fill="rgb(234,20,35)"/><text x="91.7356%" y="959.50">h..</text></g><g><title>inline hashbrown::map::make_hash [http_server_rust] (29 samples, 1.02%)</title><rect x="92.7470%" y="933" width="1.0161%" height="15" fill="rgb(254,45,19)"/><text x="92.9970%" y="943.50"></text></g><g><title>core::hash::BuildHasher::hash_one [http_server_rust] (28 samples, 0.98%)</title><rect x="92.7821%" y="917" width="0.9811%" height="15" fill="rgb(219,14,44)"/><text x="93.0321%" y="927.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash [http_server_rust] (14 samples, 0.49%)</title><rect x="93.2726%" y="901" width="0.4905%" height="15" fill="rgb(217,220,26)"/><text x="93.5226%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash [http_server_rust] (14 samples, 0.49%)</title><rect x="93.2726%" y="885" width="0.4905%" height="15" fill="rgb(213,158,28)"/><text x="93.5226%" y="895.50"></text></g><g><title>core::hash::Hasher::write_i32 [http_server_rust] (14 samples, 0.49%)</title><rect x="93.2726%" y="869" width="0.4905%" height="15" fill="rgb(252,51,52)"/><text x="93.5226%" y="879.50"></text></g><g><title>core::hash::Hasher::write_u32 [http_server_rust] (14 samples, 0.49%)</title><rect x="93.2726%" y="853" width="0.4905%" height="15" fill="rgb(246,89,16)"/><text x="93.5226%" y="863.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write [http_server_rust] (14 samples, 0.49%)</title><rect x="93.2726%" y="837" width="0.4905%" height="15" fill="rgb(216,158,49)"/><text x="93.5226%" y="847.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write [http_server_rust] (14 samples, 0.49%)</title><rect x="93.2726%" y="821" width="0.4905%" height="15" fill="rgb(236,107,19)"/><text x="93.5226%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write [http_server_rust] (14 samples, 0.49%)</title><rect x="93.2726%" y="805" width="0.4905%" height="15" fill="rgb(228,185,30)"/><text x="93.5226%" y="815.50"></text></g><g><title>core::hash::sip::u8to64_le [http_server_rust] (12 samples, 0.42%)</title><rect x="93.3427%" y="789" width="0.4205%" height="15" fill="rgb(246,134,8)"/><text x="93.5927%" y="799.50"></text></g><g><title>inline core::intrinsics::copy_nonoverlapping [http_server_rust] (9 samples, 0.32%)</title><rect x="93.4478%" y="773" width="0.3153%" height="15" fill="rgb(214,143,50)"/><text x="93.6978%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check [http_server_rust] (8 samples, 0.28%)</title><rect x="93.4828%" y="757" width="0.2803%" height="15" fill="rgb(228,75,8)"/><text x="93.7328%" y="767.50"></text></g><g><title>inline core::ub_checks::maybe_is_nonoverlapping [http_server_rust] (4 samples, 0.14%)</title><rect x="93.6230%" y="741" width="0.1402%" height="15" fill="rgb(207,175,4)"/><text x="93.8730%" y="751.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime [http_server_rust] (4 samples, 0.14%)</title><rect x="93.6230%" y="725" width="0.1402%" height="15" fill="rgb(205,108,24)"/><text x="93.8730%" y="735.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert [http_server_rust] (66 samples, 2.31%)</title><rect x="91.4856%" y="965" width="2.3125%" height="15" fill="rgb(244,120,49)"/><text x="91.7356%" y="975.50">s..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find [http_server_rust] (7 samples, 0.25%)</title><rect x="93.8683%" y="901" width="0.2453%" height="15" fill="rgb(223,47,38)"/><text x="94.1183%" y="911.50"></text></g><g><title>inline hashbrown::raw::RawTableInner::find_inner [http_server_rust] (4 samples, 0.14%)</title><rect x="93.9734%" y="885" width="0.1402%" height="15" fill="rgb(229,179,11)"/><text x="94.2234%" y="895.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (3 samples, 0.11%)</title><rect x="94.0084%" y="869" width="0.1051%" height="15" fill="rgb(231,122,1)"/><text x="94.2584%" y="879.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::load [http_server_rust] (3 samples, 0.11%)</title><rect x="94.2186%" y="853" width="0.1051%" height="15" fill="rgb(245,119,9)"/><text x="94.4686%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry [http_server_rust] (18 samples, 0.63%)</title><rect x="93.8683%" y="917" width="0.6307%" height="15" fill="rgb(241,163,25)"/><text x="94.1183%" y="927.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove [http_server_rust] (11 samples, 0.39%)</title><rect x="94.1135%" y="901" width="0.3854%" height="15" fill="rgb(217,214,3)"/><text x="94.3635%" y="911.50"></text></g><g><title>inline hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop [http_server_rust] (9 samples, 0.32%)</title><rect x="94.1836%" y="885" width="0.3153%" height="15" fill="rgb(240,86,28)"/><text x="94.4336%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase [http_server_rust] (8 samples, 0.28%)</title><rect x="94.2186%" y="869" width="0.2803%" height="15" fill="rgb(215,47,9)"/><text x="94.4686%" y="879.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_empty [http_server_rust] (5 samples, 0.18%)</title><rect x="94.3238%" y="853" width="0.1752%" height="15" fill="rgb(252,25,45)"/><text x="94.5738%" y="863.50"></text></g><g><title>inline hashbrown::control::group::sse2::Group::match_tag [http_server_rust] (5 samples, 0.18%)</title><rect x="94.3238%" y="837" width="0.1752%" height="15" fill="rgb(251,164,9)"/><text x="94.5738%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 [http_server_rust] (3 samples, 0.11%)</title><rect x="94.3938%" y="821" width="0.1051%" height="15" fill="rgb(233,194,0)"/><text x="94.6438%" y="831.50"></text></g><g><title>inline core::core_arch::x86::sse2::_mm_set_epi8 [http_server_rust] (3 samples, 0.11%)</title><rect x="94.3938%" y="805" width="0.1051%" height="15" fill="rgb(249,111,24)"/><text x="94.6438%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish [http_server_rust] (5 samples, 0.18%)</title><rect x="94.4989%" y="885" width="0.1752%" height="15" fill="rgb(250,223,3)"/><text x="94.7489%" y="895.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish [http_server_rust] (5 samples, 0.18%)</title><rect x="94.4989%" y="869" width="0.1752%" height="15" fill="rgb(236,178,37)"/><text x="94.7489%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish [http_server_rust] (5 samples, 0.18%)</title><rect x="94.4989%" y="853" width="0.1752%" height="15" fill="rgb(241,158,50)"/><text x="94.7489%" y="863.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher [http_server_rust] (6 samples, 0.21%)</title><rect x="94.6741%" y="885" width="0.2102%" height="15" fill="rgb(213,121,41)"/><text x="94.9241%" y="895.50"></text></g><g><title>inline core::hash::sip::SipHasher13::new_with_keys [http_server_rust] (4 samples, 0.14%)</title><rect x="94.7442%" y="869" width="0.1402%" height="15" fill="rgb(240,92,3)"/><text x="94.9942%" y="879.50"></text></g><g><title>inline hashbrown::map::make_hash [http_server_rust] (15 samples, 0.53%)</title><rect x="94.4989%" y="917" width="0.5256%" height="15" fill="rgb(205,123,3)"/><text x="94.7489%" y="927.50"></text></g><g><title>core::hash::BuildHasher::hash_one [http_server_rust] (15 samples, 0.53%)</title><rect x="94.4989%" y="901" width="0.5256%" height="15" fill="rgb(205,97,47)"/><text x="94.7489%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash [http_server_rust] (4 samples, 0.14%)</title><rect x="94.8844%" y="885" width="0.1402%" height="15" fill="rgb(247,152,14)"/><text x="95.1344%" y="895.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash [http_server_rust] (4 samples, 0.14%)</title><rect x="94.8844%" y="869" width="0.1402%" height="15" fill="rgb(248,195,53)"/><text x="95.1344%" y="879.50"></text></g><g><title>core::hash::Hasher::write_i32 [http_server_rust] (3 samples, 0.11%)</title><rect x="94.9194%" y="853" width="0.1051%" height="15" fill="rgb(226,201,16)"/><text x="95.1694%" y="863.50"></text></g><g><title>core::hash::Hasher::write_u32 [http_server_rust] (3 samples, 0.11%)</title><rect x="94.9194%" y="837" width="0.1051%" height="15" fill="rgb(205,98,0)"/><text x="95.1694%" y="847.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write [http_server_rust] (3 samples, 0.11%)</title><rect x="94.9194%" y="821" width="0.1051%" height="15" fill="rgb(214,191,48)"/><text x="95.1694%" y="831.50"></text></g><g><title>inline &lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write [http_server_rust] (3 samples, 0.11%)</title><rect x="94.9194%" y="805" width="0.1051%" height="15" fill="rgb(237,112,39)"/><text x="95.1694%" y="815.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write [http_server_rust] (3 samples, 0.11%)</title><rect x="94.9194%" y="789" width="0.1051%" height="15" fill="rgb(247,203,27)"/><text x="95.1694%" y="799.50"></text></g><g><title>core::hash::sip::u8to64_le [http_server_rust] (3 samples, 0.11%)</title><rect x="94.9194%" y="773" width="0.1051%" height="15" fill="rgb(235,124,28)"/><text x="95.1694%" y="783.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove [http_server_rust] (36 samples, 1.26%)</title><rect x="93.7982%" y="965" width="1.2614%" height="15" fill="rgb(208,207,46)"/><text x="94.0482%" y="975.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove [http_server_rust] (36 samples, 1.26%)</title><rect x="93.7982%" y="949" width="1.2614%" height="15" fill="rgb(234,176,4)"/><text x="94.0482%" y="959.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry [http_server_rust] (34 samples, 1.19%)</title><rect x="93.8683%" y="933" width="1.1913%" height="15" fill="rgb(230,133,28)"/><text x="94.1183%" y="943.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="95.3399%" y="837" width="0.1051%" height="15" fill="rgb(211,137,40)"/><text x="95.5899%" y="847.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="95.4450%" y="805" width="0.1051%" height="15" fill="rgb(254,35,13)"/><text x="95.6950%" y="815.50"></text></g><g><title>_raw_spin_lock_bh [linux] (4 samples, 0.14%)</title><rect x="95.8304%" y="789" width="0.1402%" height="15" fill="rgb(225,49,51)"/><text x="96.0804%" y="799.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="95.8304%" y="773" width="0.1402%" height="15" fill="rgb(251,10,15)"/><text x="96.0804%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="96.0056%" y="773" width="0.2453%" height="15" fill="rgb(228,207,15)"/><text x="96.2556%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="96.3560%" y="757" width="0.1402%" height="15" fill="rgb(241,99,19)"/><text x="96.6060%" y="767.50"></text></g><g><title>inet_csk_accept [linux] (15 samples, 0.53%)</title><rect x="96.0056%" y="789" width="0.5256%" height="15" fill="rgb(207,104,49)"/><text x="96.2556%" y="799.50"></text></g><g><title>kmem_cache_free [linux] (5 samples, 0.18%)</title><rect x="96.3560%" y="773" width="0.1752%" height="15" fill="rgb(234,99,18)"/><text x="96.6060%" y="783.50"></text></g><g><title>inet_accept [linux] (22 samples, 0.77%)</title><rect x="95.8304%" y="805" width="0.7708%" height="15" fill="rgb(213,191,49)"/><text x="96.0804%" y="815.50"></text></g><g><title>move_addr_to_user [linux] (3 samples, 0.11%)</title><rect x="96.6013%" y="805" width="0.1051%" height="15" fill="rgb(210,226,19)"/><text x="96.8513%" y="815.50"></text></g><g><title>_raw_spin_lock [linux] (7 samples, 0.25%)</title><rect x="96.8115%" y="789" width="0.2453%" height="15" fill="rgb(229,97,18)"/><text x="97.0615%" y="799.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="96.8115%" y="773" width="0.2453%" height="15" fill="rgb(211,167,15)"/><text x="97.0615%" y="783.50"></text></g><g><title>inode_init_always [linux] (3 samples, 0.11%)</title><rect x="97.1268%" y="757" width="0.1051%" height="15" fill="rgb(210,169,34)"/><text x="97.3768%" y="767.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="97.3020%" y="725" width="0.1402%" height="15" fill="rgb(241,121,31)"/><text x="97.5520%" y="735.50"></text></g><g><title>alloc_slab_page [linux] (3 samples, 0.11%)</title><rect x="97.4422%" y="661" width="0.1051%" height="15" fill="rgb(232,40,11)"/><text x="97.6922%" y="671.50"></text></g><g><title>__slab_alloc [linux] (4 samples, 0.14%)</title><rect x="97.4422%" y="725" width="0.1402%" height="15" fill="rgb(205,86,26)"/><text x="97.6922%" y="735.50"></text></g><g><title>___slab_alloc [linux] (4 samples, 0.14%)</title><rect x="97.4422%" y="709" width="0.1402%" height="15" fill="rgb(231,126,28)"/><text x="97.6922%" y="719.50"></text></g><g><title>new_slab [linux] (4 samples, 0.14%)</title><rect x="97.4422%" y="693" width="0.1402%" height="15" fill="rgb(219,221,18)"/><text x="97.6922%" y="703.50"></text></g><g><title>allocate_slab [linux] (4 samples, 0.14%)</title><rect x="97.4422%" y="677" width="0.1402%" height="15" fill="rgb(211,40,0)"/><text x="97.6922%" y="687.50"></text></g><g><title>sock_alloc [linux] (26 samples, 0.91%)</title><rect x="96.8115%" y="805" width="0.9110%" height="15" fill="rgb(239,85,43)"/><text x="97.0615%" y="815.50"></text></g><g><title>new_inode_pseudo [linux] (18 samples, 0.63%)</title><rect x="97.0918%" y="789" width="0.6307%" height="15" fill="rgb(231,55,21)"/><text x="97.3418%" y="799.50"></text></g><g><title>alloc_inode [linux] (18 samples, 0.63%)</title><rect x="97.0918%" y="773" width="0.6307%" height="15" fill="rgb(225,184,43)"/><text x="97.3418%" y="783.50"></text></g><g><title>sock_alloc_inode [linux] (13 samples, 0.46%)</title><rect x="97.2670%" y="757" width="0.4555%" height="15" fill="rgb(251,158,41)"/><text x="97.5170%" y="767.50"></text></g><g><title>kmem_cache_alloc [linux] (12 samples, 0.42%)</title><rect x="97.3020%" y="741" width="0.4205%" height="15" fill="rgb(234,159,37)"/><text x="97.5520%" y="751.50"></text></g><g><title>memcg_kmem_get_cache [linux] (4 samples, 0.14%)</title><rect x="97.5823%" y="725" width="0.1402%" height="15" fill="rgb(216,204,22)"/><text x="97.8323%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (4 samples, 0.14%)</title><rect x="97.5823%" y="709" width="0.1402%" height="15" fill="rgb(214,17,3)"/><text x="97.8323%" y="719.50"></text></g><g><title>_raw_spin_lock [linux] (3 samples, 0.11%)</title><rect x="97.8276%" y="773" width="0.1051%" height="15" fill="rgb(212,111,17)"/><text x="98.0776%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="97.8276%" y="757" width="0.1051%" height="15" fill="rgb(221,157,24)"/><text x="98.0776%" y="767.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="98.0378%" y="725" width="0.2453%" height="15" fill="rgb(252,16,13)"/><text x="98.2878%" y="735.50"></text></g><g><title>kmem_cache_alloc [linux] (7 samples, 0.25%)</title><rect x="98.3181%" y="725" width="0.2453%" height="15" fill="rgb(221,62,2)"/><text x="98.5681%" y="735.50"></text></g><g><title>__slab_alloc [linux] (5 samples, 0.18%)</title><rect x="98.3882%" y="709" width="0.1752%" height="15" fill="rgb(247,87,22)"/><text x="98.6382%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="98.3882%" y="693" width="0.1752%" height="15" fill="rgb(215,73,9)"/><text x="98.6382%" y="703.50"></text></g><g><title>apparmor_file_alloc_security [linux] (3 samples, 0.11%)</title><rect x="98.5985%" y="709" width="0.1051%" height="15" fill="rgb(207,175,33)"/><text x="98.8485%" y="719.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="98.5985%" y="693" width="0.1051%" height="15" fill="rgb(243,129,54)"/><text x="98.8485%" y="703.50"></text></g><g><title>__alloc_file [linux] (20 samples, 0.70%)</title><rect x="98.0378%" y="741" width="0.7008%" height="15" fill="rgb(227,119,45)"/><text x="98.2878%" y="751.50"></text></g><g><title>security_file_alloc [linux] (5 samples, 0.18%)</title><rect x="98.5634%" y="725" width="0.1752%" height="15" fill="rgb(205,109,36)"/><text x="98.8134%" y="735.50"></text></g><g><title>alloc_file [linux] (23 samples, 0.81%)</title><rect x="97.9678%" y="773" width="0.8059%" height="15" fill="rgb(205,6,39)"/><text x="98.2178%" y="783.50"></text></g><g><title>alloc_empty_file [linux] (21 samples, 0.74%)</title><rect x="98.0378%" y="757" width="0.7358%" height="15" fill="rgb(221,32,16)"/><text x="98.2878%" y="767.50"></text></g><g><title>__slab_alloc [linux] (3 samples, 0.11%)</title><rect x="98.8087%" y="725" width="0.1051%" height="15" fill="rgb(228,144,50)"/><text x="99.0587%" y="735.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="98.8087%" y="709" width="0.1051%" height="15" fill="rgb(229,201,53)"/><text x="99.0587%" y="719.50"></text></g><g><title>d_alloc_pseudo [linux] (8 samples, 0.28%)</title><rect x="98.7737%" y="773" width="0.2803%" height="15" fill="rgb(249,153,27)"/><text x="99.0237%" y="783.50"></text></g><g><title>__d_alloc [linux] (8 samples, 0.28%)</title><rect x="98.7737%" y="757" width="0.2803%" height="15" fill="rgb(227,106,25)"/><text x="99.0237%" y="767.50"></text></g><g><title>kmem_cache_alloc [linux] (7 samples, 0.25%)</title><rect x="98.8087%" y="741" width="0.2453%" height="15" fill="rgb(230,65,29)"/><text x="99.0587%" y="751.50"></text></g><g><title>alloc_file_pseudo [linux] (41 samples, 1.44%)</title><rect x="97.7575%" y="789" width="1.4366%" height="15" fill="rgb(221,57,46)"/><text x="98.0075%" y="799.50"></text></g><g><title>sock_alloc_file [linux] (43 samples, 1.51%)</title><rect x="97.7225%" y="805" width="1.5067%" height="15" fill="rgb(229,161,17)"/><text x="97.9725%" y="815.50"></text></g><g><title>__sys_accept4 [linux] (113 samples, 3.96%)</title><rect x="95.4450%" y="821" width="3.9594%" height="15" fill="rgb(222,213,11)"/><text x="95.6950%" y="831.50">__sy..</text></g><g><title>sockfd_lookup_light [linux] (5 samples, 0.18%)</title><rect x="99.2292%" y="805" width="0.1752%" height="15" fill="rgb(235,35,13)"/><text x="99.4792%" y="815.50"></text></g><g><title>__fdget [linux] (5 samples, 0.18%)</title><rect x="99.2292%" y="789" width="0.1752%" height="15" fill="rgb(233,158,34)"/><text x="99.4792%" y="799.50"></text></g><g><title>__fget_light [linux] (5 samples, 0.18%)</title><rect x="99.2292%" y="773" width="0.1752%" height="15" fill="rgb(215,151,48)"/><text x="99.4792%" y="783.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (5 samples, 0.18%)</title><rect x="99.2292%" y="757" width="0.1752%" height="15" fill="rgb(229,84,14)"/><text x="99.4792%" y="767.50"></text></g><g><title>std::net::tcp::TcpListener::accept [http_server_rust] (125 samples, 4.38%)</title><rect x="95.0596%" y="965" width="4.3798%" height="15" fill="rgb(229,68,14)"/><text x="95.3096%" y="975.50">std::..</text></g><g><title>inline std::sys_common::net::TcpListener::accept [http_server_rust] (124 samples, 4.34%)</title><rect x="95.0946%" y="949" width="4.3448%" height="15" fill="rgb(243,106,26)"/><text x="95.3446%" y="959.50">inlin..</text></g><g><title>inline std::sys::pal::unix::net::Socket::accept [http_server_rust] (123 samples, 4.31%)</title><rect x="95.1296%" y="933" width="4.3097%" height="15" fill="rgb(206,45,38)"/><text x="95.3796%" y="943.50">inlin..</text></g><g><title>inline std::sys::pal::unix::cvt_r [http_server_rust] (123 samples, 4.31%)</title><rect x="95.1296%" y="917" width="4.3097%" height="15" fill="rgb(226,6,15)"/><text x="95.3796%" y="927.50">inlin..</text></g><g><title>inline std::sys::pal::unix::net::Socket::accept::{{closure}} [http_server_rust] (122 samples, 4.27%)</title><rect x="95.1647%" y="901" width="4.2747%" height="15" fill="rgb(232,22,54)"/><text x="95.4147%" y="911.50">inlin..</text></g><g><title>accept4 [libc-2.31.so] (122 samples, 4.27%)</title><rect x="95.1647%" y="885" width="4.2747%" height="15" fill="rgb(229,222,32)"/><text x="95.4147%" y="895.50">accep..</text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (119 samples, 4.17%)</title><rect x="95.2698%" y="869" width="4.1696%" height="15" fill="rgb(228,62,29)"/><text x="95.5198%" y="879.50">entry..</text></g><g><title>do_syscall_64 [linux] (117 samples, 4.10%)</title><rect x="95.3399%" y="853" width="4.0995%" height="15" fill="rgb(251,103,34)"/><text x="95.5899%" y="863.50">do_s..</text></g><g><title>__x64_sys_accept4 [linux] (114 samples, 3.99%)</title><rect x="95.4450%" y="837" width="3.9944%" height="15" fill="rgb(233,12,30)"/><text x="95.6950%" y="847.50">__x6..</text></g><g><title>__x64_sys_ioctl [linux] (3 samples, 0.11%)</title><rect x="99.4744%" y="901" width="0.1051%" height="15" fill="rgb(238,52,0)"/><text x="99.7244%" y="911.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (3 samples, 0.11%)</title><rect x="99.4744%" y="885" width="0.1051%" height="15" fill="rgb(223,98,5)"/><text x="99.7244%" y="895.50"></text></g><g><title>0xFFFFFFFFFFFFFF80 (7 samples, 0.25%)</title><rect x="99.5795%" y="885" width="0.2453%" height="15" fill="rgb(228,75,37)"/><text x="99.8295%" y="895.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::set_nonblocking [http_server_rust] (15 samples, 0.53%)</title><rect x="99.4394%" y="965" width="0.5256%" height="15" fill="rgb(205,115,49)"/><text x="99.6894%" y="975.50"></text></g><g><title>inline std::sys::pal::unix::net::Socket::set_nonblocking [http_server_rust] (14 samples, 0.49%)</title><rect x="99.4744%" y="949" width="0.4905%" height="15" fill="rgb(250,154,43)"/><text x="99.7244%" y="959.50"></text></g><g><title>ioctl [libc-2.31.so] (14 samples, 0.49%)</title><rect x="99.4744%" y="933" width="0.4905%" height="15" fill="rgb(226,43,29)"/><text x="99.7244%" y="943.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe [linux] (14 samples, 0.49%)</title><rect x="99.4744%" y="917" width="0.4905%" height="15" fill="rgb(249,228,39)"/><text x="99.7244%" y="927.50"></text></g><g><title>do_syscall_64 [linux] (11 samples, 0.39%)</title><rect x="99.5795%" y="901" width="0.3854%" height="15" fill="rgb(216,79,43)"/><text x="99.8295%" y="911.50"></text></g><g><title>all (2,854 samples, 100%)</title><rect x="0.0000%" y="1301" width="100.0000%" height="15" fill="rgb(228,95,12)"/><text x="0.2500%" y="1311.50"></text></g><g><title>http_server_rust [PID=620349] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(249,221,15)"/><text x="0.2500%" y="1295.50">http_server_rust [PID=620349]</text></g><g><title>[MAIN_THREAD] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(233,34,13)"/><text x="0.2500%" y="1279.50">[MAIN_THREAD]</text></g><g><title>_start [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(214,103,39)"/><text x="0.2500%" y="1263.50">_start [http_server_rust]</text></g><g><title>__libc_start_main [libc-2.31.so] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(251,126,39)"/><text x="0.2500%" y="1247.50">__libc_start_main [libc-2.31.so]</text></g><g><title>main [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(214,216,36)"/><text x="0.2500%" y="1231.50">main [http_server_rust]</text></g><g><title>std::rt::lang_start [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(220,221,8)"/><text x="0.2500%" y="1215.50">std::rt::lang_start [http_server_rust]</text></g><g><title>std::rt::lang_start_internal [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(240,216,3)"/><text x="0.2500%" y="1199.50">std::rt::lang_start_internal [http_server_rust]</text></g><g><title>inline std::panic::catch_unwind [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(232,218,17)"/><text x="0.2500%" y="1183.50">inline std::panic::catch_unwind [http_server_rust]</text></g><g><title>inline std::panicking::try [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(229,163,45)"/><text x="0.2500%" y="1167.50">inline std::panicking::try [http_server_rust]</text></g><g><title>inline std::panicking::try::do_call [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(231,110,42)"/><text x="0.2500%" y="1151.50">inline std::panicking::try::do_call [http_server_rust]</text></g><g><title>inline std::rt::lang_start_internal::{{closure}} [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(208,170,48)"/><text x="0.2500%" y="1135.50">inline std::rt::lang_start_internal::{{closure}} [http_server_rust]</text></g><g><title>inline std::panic::catch_unwind [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(239,116,25)"/><text x="0.2500%" y="1119.50">inline std::panic::catch_unwind [http_server_rust]</text></g><g><title>inline std::panicking::try [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(219,200,50)"/><text x="0.2500%" y="1103.50">inline std::panicking::try [http_server_rust]</text></g><g><title>inline std::panicking::try::do_call [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(245,200,0)"/><text x="0.2500%" y="1087.50">inline std::panicking::try::do_call [http_server_rust]</text></g><g><title>inline core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(245,119,33)"/><text x="0.2500%" y="1071.50">inline core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once [http_server_rust]</text></g><g><title>std::rt::lang_start::{{closure}} [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(231,125,12)"/><text x="0.2500%" y="1055.50">std::rt::lang_start::{{closure}} [http_server_rust]</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(216,96,41)"/><text x="0.2500%" y="1039.50">std::sys::backtrace::__rust_begin_short_backtrace [http_server_rust]</text></g><g><title>core::ops::function::FnOnce::call_once [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(248,43,45)"/><text x="0.2500%" y="1023.50">core::ops::function::FnOnce::call_once [http_server_rust]</text></g><g><title>http_server_rust::main [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(217,222,7)"/><text x="0.2500%" y="1007.50">http_server_rust::main [http_server_rust]</text></g><g><title>http_server_rust::server::use_epoll [http_server_rust] (2,854 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(233,28,6)"/><text x="0.2500%" y="991.50">http_server_rust::server::use_epoll [http_server_rust]</text></g></svg></svg>